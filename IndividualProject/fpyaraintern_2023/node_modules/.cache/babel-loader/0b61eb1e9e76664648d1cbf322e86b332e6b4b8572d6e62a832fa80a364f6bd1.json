{"ast":null,"code":"'use strict';\n\nvar util = require(\"util\");\nfunction toString(val) {\n  val = val.toString(8);\n  while (val.length < 4) {\n    val = \"0\" + val;\n  }\n  return val;\n}\nvar defaultUmask = 18; // 0022;\nvar defaultUmaskString = toString(defaultUmask);\nfunction validate(data, k, val) {\n  // must be either an integer or an octal string.\n  if (typeof val === \"number\" && !isNaN(val)) {\n    data[k] = val;\n    return true;\n  }\n  if (typeof val === \"string\") {\n    if (val.charAt(0) !== \"0\") {\n      return false;\n    }\n    data[k] = parseInt(val, 8);\n    return true;\n  }\n  return false;\n}\nfunction convert_fromString(val, cb) {\n  if (typeof val === \"string\") {\n    // check for octal string first\n    if (val.charAt(0) === '0' && /^[0-7]+$/.test(val)) {\n      val = parseInt(val, 8);\n    } else if (val.charAt(0) !== '0' && /^[0-9]+$/.test(val)) {\n      // legacy support for decimal strings\n      val = parseInt(val, 10);\n    } else {\n      return cb(new Error(util.format(\"Expected octal string, got %j, defaulting to %j\", val, defaultUmaskString)), defaultUmask);\n    }\n  } else if (typeof val !== \"number\") {\n    return cb(new Error(util.format(\"Expected number or octal string, got %j, defaulting to %j\", val, defaultUmaskString)), defaultUmask);\n  }\n  val = Math.floor(val);\n  if (val < 0 || val > 511) {\n    return cb(new Error(util.format(\"Must be in range 0..511 (0000..0777), got %j\", val)), defaultUmask);\n  }\n  cb(null, val);\n}\nfunction fromString(val, cb) {\n  // synchronous callback, no zalgo\n  convert_fromString(val, cb || function (err, result) {\n    /*jslint unparam:true*/\n    val = result;\n  });\n  return val;\n}\nexports.toString = toString;\nexports.fromString = fromString;\nexports.validate = validate;","map":{"version":3,"names":["util","require","toString","val","length","defaultUmask","defaultUmaskString","validate","data","k","isNaN","charAt","parseInt","convert_fromString","cb","test","Error","format","Math","floor","fromString","err","result","exports"],"sources":["/Users/hkateliev/node_modules/npm/node_modules/umask/index.js"],"sourcesContent":["'use strict';\n\nvar util = require(\"util\");\n\nfunction toString(val) {\n    val = val.toString(8);\n    while (val.length < 4) {\n        val = \"0\" + val;\n    }\n    return val;\n}\n\nvar defaultUmask = 18; // 0022;\nvar defaultUmaskString = toString(defaultUmask);\n\nfunction validate(data, k, val) {\n    // must be either an integer or an octal string.\n    if (typeof val === \"number\" && !isNaN(val)) {\n        data[k] = val;\n        return true;\n    }\n\n    if (typeof val === \"string\") {\n        if (val.charAt(0) !== \"0\") {\n            return false;\n        }\n        data[k] = parseInt(val, 8);\n        return true;\n    }\n\n    return false;\n}\n\nfunction convert_fromString(val, cb) {\n    if (typeof val === \"string\") {\n        // check for octal string first\n        if (val.charAt(0) === '0' && /^[0-7]+$/.test(val)) {\n            val = parseInt(val, 8);\n        } else if (val.charAt(0) !== '0' && /^[0-9]+$/.test(val)) {\n            // legacy support for decimal strings\n            val = parseInt(val, 10);\n        } else {\n            return cb(new Error(util.format(\"Expected octal string, got %j, defaulting to %j\",\n                                            val, defaultUmaskString)),\n                      defaultUmask);\n        }\n    } else if (typeof val !== \"number\") {\n        return cb(new Error(util.format(\"Expected number or octal string, got %j, defaulting to %j\",\n                                        val, defaultUmaskString)),\n                  defaultUmask);\n    }\n\n    val = Math.floor(val);\n\n    if ((val < 0) || (val > 511)) {\n        return cb(new Error(util.format(\"Must be in range 0..511 (0000..0777), got %j\", val)),\n                  defaultUmask);\n    }\n\n    cb(null, val);\n}\n\nfunction fromString(val, cb) {\n\n    // synchronous callback, no zalgo\n    convert_fromString(val, cb || function (err, result) {\n        /*jslint unparam:true*/\n        val = result;\n    });\n\n    return val;\n}\n\nexports.toString = toString;\nexports.fromString = fromString;\nexports.validate = validate;\n\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAE1B,SAASC,QAAQA,CAACC,GAAG,EAAE;EACnBA,GAAG,GAAGA,GAAG,CAACD,QAAQ,CAAC,CAAC,CAAC;EACrB,OAAOC,GAAG,CAACC,MAAM,GAAG,CAAC,EAAE;IACnBD,GAAG,GAAG,GAAG,GAAGA,GAAG;EACnB;EACA,OAAOA,GAAG;AACd;AAEA,IAAIE,YAAY,GAAG,EAAE,CAAC,CAAC;AACvB,IAAIC,kBAAkB,GAAGJ,QAAQ,CAACG,YAAY,CAAC;AAE/C,SAASE,QAAQA,CAACC,IAAI,EAAEC,CAAC,EAAEN,GAAG,EAAE;EAC5B;EACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAI,CAACO,KAAK,CAACP,GAAG,CAAC,EAAE;IACxCK,IAAI,CAACC,CAAC,CAAC,GAAGN,GAAG;IACb,OAAO,IAAI;EACf;EAEA,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACzB,IAAIA,GAAG,CAACQ,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACvB,OAAO,KAAK;IAChB;IACAH,IAAI,CAACC,CAAC,CAAC,GAAGG,QAAQ,CAACT,GAAG,EAAE,CAAC,CAAC;IAC1B,OAAO,IAAI;EACf;EAEA,OAAO,KAAK;AAChB;AAEA,SAASU,kBAAkBA,CAACV,GAAG,EAAEW,EAAE,EAAE;EACjC,IAAI,OAAOX,GAAG,KAAK,QAAQ,EAAE;IACzB;IACA,IAAIA,GAAG,CAACQ,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,UAAU,CAACI,IAAI,CAACZ,GAAG,CAAC,EAAE;MAC/CA,GAAG,GAAGS,QAAQ,CAACT,GAAG,EAAE,CAAC,CAAC;IAC1B,CAAC,MAAM,IAAIA,GAAG,CAACQ,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,UAAU,CAACI,IAAI,CAACZ,GAAG,CAAC,EAAE;MACtD;MACAA,GAAG,GAAGS,QAAQ,CAACT,GAAG,EAAE,EAAE,CAAC;IAC3B,CAAC,MAAM;MACH,OAAOW,EAAE,CAAC,IAAIE,KAAK,CAAChB,IAAI,CAACiB,MAAM,CAAC,iDAAiD,EACjDd,GAAG,EAAEG,kBAAkB,CAAC,CAAC,EAC/CD,YAAY,CAAC;IAC3B;EACJ,CAAC,MAAM,IAAI,OAAOF,GAAG,KAAK,QAAQ,EAAE;IAChC,OAAOW,EAAE,CAAC,IAAIE,KAAK,CAAChB,IAAI,CAACiB,MAAM,CAAC,2DAA2D,EAC3Dd,GAAG,EAAEG,kBAAkB,CAAC,CAAC,EAC/CD,YAAY,CAAC;EAC3B;EAEAF,GAAG,GAAGe,IAAI,CAACC,KAAK,CAAChB,GAAG,CAAC;EAErB,IAAKA,GAAG,GAAG,CAAC,IAAMA,GAAG,GAAG,GAAI,EAAE;IAC1B,OAAOW,EAAE,CAAC,IAAIE,KAAK,CAAChB,IAAI,CAACiB,MAAM,CAAC,8CAA8C,EAAEd,GAAG,CAAC,CAAC,EAC3EE,YAAY,CAAC;EAC3B;EAEAS,EAAE,CAAC,IAAI,EAAEX,GAAG,CAAC;AACjB;AAEA,SAASiB,UAAUA,CAACjB,GAAG,EAAEW,EAAE,EAAE;EAEzB;EACAD,kBAAkB,CAACV,GAAG,EAAEW,EAAE,IAAI,UAAUO,GAAG,EAAEC,MAAM,EAAE;IACjD;IACAnB,GAAG,GAAGmB,MAAM;EAChB,CAAC,CAAC;EAEF,OAAOnB,GAAG;AACd;AAEAoB,OAAO,CAACrB,QAAQ,GAAGA,QAAQ;AAC3BqB,OAAO,CAACH,UAAU,GAAGA,UAAU;AAC/BG,OAAO,CAAChB,QAAQ,GAAGA,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}