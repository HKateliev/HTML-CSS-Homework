{"ast":null,"code":"var assert = require('assert');\nvar dirname = require('path').dirname;\nvar resolve = require('path').resolve;\nvar isInside = require('path-is-inside');\nvar rimraf = require('rimraf');\nvar lstat = require('graceful-fs').lstat;\nvar readdir = require('graceful-fs').readdir;\nvar rmdir = require('graceful-fs').rmdir;\nvar unlink = require('graceful-fs').unlink;\nmodule.exports = vacuum;\nfunction vacuum(leaf, options, cb) {\n  assert(typeof leaf === 'string', 'must pass in path to remove');\n  assert(typeof cb === 'function', 'must pass in callback');\n  if (!options) options = {};\n  assert(typeof options === 'object', 'options must be an object');\n  var log = options.log ? options.log : function () {};\n  leaf = leaf && resolve(leaf);\n  var base = options.base && resolve(options.base);\n  if (base && !isInside(leaf, base)) {\n    return cb(new Error(leaf + ' is not a child of ' + base));\n  }\n  lstat(leaf, function (error, stat) {\n    if (error) {\n      if (error.code === 'ENOENT') return cb(null);\n      log(error.stack);\n      return cb(error);\n    }\n    if (!(stat && (stat.isDirectory() || stat.isSymbolicLink() || stat.isFile()))) {\n      log(leaf, 'is not a directory, file, or link');\n      return cb(new Error(leaf + ' is not a directory, file, or link'));\n    }\n    if (options.purge) {\n      log('purging', leaf);\n      rimraf(leaf, function (error) {\n        if (error) return cb(error);\n        next(dirname(leaf));\n      });\n    } else if (!stat.isDirectory()) {\n      log('removing', leaf);\n      unlink(leaf, function (error) {\n        if (error) return cb(error);\n        next(dirname(leaf));\n      });\n    } else {\n      next(leaf);\n    }\n  });\n  function next(branch) {\n    branch = branch && resolve(branch);\n    // either we've reached the base or we've reached the root\n    if (base && branch === base || branch === dirname(branch)) {\n      log('finished vacuuming up to', branch);\n      return cb(null);\n    }\n    readdir(branch, function (error, files) {\n      if (error) {\n        if (error.code === 'ENOENT') return cb(null);\n        log('unable to check directory', branch, 'due to', error.message);\n        return cb(error);\n      }\n      if (files.length > 0) {\n        log('quitting because other entries in', branch);\n        return cb(null);\n      }\n      if (branch === process.env.HOME) {\n        log('quitting because cannot remove home directory', branch);\n        return cb(null);\n      }\n      log('removing', branch);\n      lstat(branch, function (error, stat) {\n        if (error) {\n          if (error.code === 'ENOENT') return cb(null);\n          log('unable to lstat', branch, 'due to', error.message);\n          return cb(error);\n        }\n        var remove = stat.isDirectory() ? rmdir : unlink;\n        remove(branch, function (error) {\n          if (error) {\n            if (error.code === 'ENOENT') {\n              log('quitting because lost the race to remove', branch);\n              return cb(null);\n            }\n            if (error.code === 'ENOTEMPTY' || error.code === 'EEXIST') {\n              log('quitting because new (racy) entries in', branch);\n              return cb(null);\n            }\n            log('unable to remove', branch, 'due to', error.message);\n            return cb(error);\n          }\n          next(dirname(branch));\n        });\n      });\n    });\n  }\n}","map":{"version":3,"names":["assert","require","dirname","resolve","isInside","rimraf","lstat","readdir","rmdir","unlink","module","exports","vacuum","leaf","options","cb","log","base","Error","error","stat","code","stack","isDirectory","isSymbolicLink","isFile","purge","next","branch","files","message","length","process","env","HOME","remove"],"sources":["/Users/hkateliev/node_modules/npm/node_modules/fs-vacuum/vacuum.js"],"sourcesContent":["var assert = require('assert')\nvar dirname = require('path').dirname\nvar resolve = require('path').resolve\nvar isInside = require('path-is-inside')\n\nvar rimraf = require('rimraf')\nvar lstat = require('graceful-fs').lstat\nvar readdir = require('graceful-fs').readdir\nvar rmdir = require('graceful-fs').rmdir\nvar unlink = require('graceful-fs').unlink\n\nmodule.exports = vacuum\n\nfunction vacuum (leaf, options, cb) {\n  assert(typeof leaf === 'string', 'must pass in path to remove')\n  assert(typeof cb === 'function', 'must pass in callback')\n\n  if (!options) options = {}\n  assert(typeof options === 'object', 'options must be an object')\n\n  var log = options.log ? options.log : function () {}\n\n  leaf = leaf && resolve(leaf)\n  var base = options.base && resolve(options.base)\n  if (base && !isInside(leaf, base)) {\n    return cb(new Error(leaf + ' is not a child of ' + base))\n  }\n\n  lstat(leaf, function (error, stat) {\n    if (error) {\n      if (error.code === 'ENOENT') return cb(null)\n\n      log(error.stack)\n      return cb(error)\n    }\n\n    if (!(stat && (stat.isDirectory() || stat.isSymbolicLink() || stat.isFile()))) {\n      log(leaf, 'is not a directory, file, or link')\n      return cb(new Error(leaf + ' is not a directory, file, or link'))\n    }\n\n    if (options.purge) {\n      log('purging', leaf)\n      rimraf(leaf, function (error) {\n        if (error) return cb(error)\n\n        next(dirname(leaf))\n      })\n    } else if (!stat.isDirectory()) {\n      log('removing', leaf)\n      unlink(leaf, function (error) {\n        if (error) return cb(error)\n\n        next(dirname(leaf))\n      })\n    } else {\n      next(leaf)\n    }\n  })\n\n  function next (branch) {\n    branch = branch && resolve(branch)\n    // either we've reached the base or we've reached the root\n    if ((base && branch === base) || branch === dirname(branch)) {\n      log('finished vacuuming up to', branch)\n      return cb(null)\n    }\n\n    readdir(branch, function (error, files) {\n      if (error) {\n        if (error.code === 'ENOENT') return cb(null)\n\n        log('unable to check directory', branch, 'due to', error.message)\n        return cb(error)\n      }\n\n      if (files.length > 0) {\n        log('quitting because other entries in', branch)\n        return cb(null)\n      }\n\n      if (branch === process.env.HOME) {\n        log('quitting because cannot remove home directory', branch)\n        return cb(null)\n      }\n\n      log('removing', branch)\n      lstat(branch, function (error, stat) {\n        if (error) {\n          if (error.code === 'ENOENT') return cb(null)\n\n          log('unable to lstat', branch, 'due to', error.message)\n          return cb(error)\n        }\n\n        var remove = stat.isDirectory() ? rmdir : unlink\n        remove(branch, function (error) {\n          if (error) {\n            if (error.code === 'ENOENT') {\n              log('quitting because lost the race to remove', branch)\n              return cb(null)\n            }\n            if (error.code === 'ENOTEMPTY' || error.code === 'EEXIST') {\n              log('quitting because new (racy) entries in', branch)\n              return cb(null)\n            }\n\n            log('unable to remove', branch, 'due to', error.message)\n            return cb(error)\n          }\n\n          next(dirname(branch))\n        })\n      })\n    })\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}