{"ast":null,"code":"'use strict';\n\nconst BB = require('bluebird');\nconst chain = require('slide').chain;\nconst detectIndent = require('detect-indent');\nconst detectNewline = require('detect-newline');\nconst readFile = BB.promisify(require('graceful-fs').readFile);\nconst getRequested = require('./install/get-requested.js');\nconst id = require('./install/deps.js');\nconst iferr = require('iferr');\nconst isOnlyOptional = require('./install/is-only-optional.js');\nconst isOnlyDev = require('./install/is-only-dev.js');\nconst lifecycle = require('./utils/lifecycle.js');\nconst log = require('npmlog');\nconst moduleName = require('./utils/module-name.js');\nconst move = require('move-concurrently');\nconst npm = require('./npm.js');\nconst path = require('path');\nconst readPackageTree = BB.promisify(require('read-package-tree'));\nconst ssri = require('ssri');\nconst stringifyPackage = require('stringify-package');\nconst validate = require('aproba');\nconst writeFileAtomic = require('write-file-atomic');\nconst unixFormatPath = require('./utils/unix-format-path.js');\nconst isRegistry = require('./utils/is-registry.js');\nconst {\n  chown\n} = require('fs');\nconst inferOwner = require('infer-owner');\nconst selfOwner = {\n  uid: process.getuid && process.getuid(),\n  gid: process.getgid && process.getgid()\n};\nconst PKGLOCK = 'package-lock.json';\nconst SHRINKWRAP = 'npm-shrinkwrap.json';\nconst PKGLOCK_VERSION = npm.lockfileVersion;\n\n// emit JSON describing versions of all packages currently installed (for later\n// use with shrinkwrap install)\nshrinkwrap.usage = 'npm shrinkwrap';\nmodule.exports = exports = shrinkwrap;\nexports.treeToShrinkwrap = treeToShrinkwrap;\nfunction shrinkwrap(args, silent, cb) {\n  if (typeof cb !== 'function') {\n    cb = silent;\n    silent = false;\n  }\n  if (args.length) {\n    log.warn('shrinkwrap', \"doesn't take positional args\");\n  }\n  move(path.resolve(npm.prefix, PKGLOCK), path.resolve(npm.prefix, SHRINKWRAP), {\n    Promise: BB\n  }).then(() => {\n    log.notice('', `${PKGLOCK} has been renamed to ${SHRINKWRAP}. ${SHRINKWRAP} will be used for future installations.`);\n    return readFile(path.resolve(npm.prefix, SHRINKWRAP)).then(d => {\n      return JSON.parse(d);\n    });\n  }, err => {\n    if (err.code !== 'ENOENT') {\n      throw err;\n    } else {\n      return readPackageTree(npm.localPrefix).then(id.computeMetadata).then(tree => {\n        return BB.fromNode(cb => {\n          createShrinkwrap(tree, {\n            silent,\n            defaultFile: SHRINKWRAP\n          }, cb);\n        });\n      });\n    }\n  }).then(data => cb(null, data), cb);\n}\nmodule.exports.createShrinkwrap = createShrinkwrap;\nfunction createShrinkwrap(tree, opts, cb) {\n  opts = opts || {};\n  lifecycle(tree.package, 'preshrinkwrap', tree.path, function () {\n    const pkginfo = treeToShrinkwrap(tree);\n    chain([[lifecycle, tree.package, 'shrinkwrap', tree.path], [shrinkwrap_, tree.path, pkginfo, opts], [lifecycle, tree.package, 'postshrinkwrap', tree.path]], iferr(cb, function (data) {\n      cb(null, pkginfo);\n    }));\n  });\n}\nfunction treeToShrinkwrap(tree) {\n  validate('O', arguments);\n  var pkginfo = {};\n  if (tree.package.name) pkginfo.name = tree.package.name;\n  if (tree.package.version) pkginfo.version = tree.package.version;\n  if (tree.children.length) {\n    pkginfo.requires = true;\n    shrinkwrapDeps(pkginfo.dependencies = {}, tree, tree);\n  }\n  return pkginfo;\n}\nfunction shrinkwrapDeps(deps, top, tree, seen) {\n  validate('OOO', [deps, top, tree]);\n  if (!seen) seen = new Set();\n  if (seen.has(tree)) return;\n  seen.add(tree);\n  sortModules(tree.children).forEach(function (child) {\n    var childIsOnlyDev = isOnlyDev(child);\n    var pkginfo = deps[moduleName(child)] = {};\n    var requested = getRequested(child) || child.package._requested || {};\n    var linked = child.isLink || child.isInLink;\n    pkginfo.version = childVersion(top, child, requested);\n    if (requested.type === 'git' && child.package._from) {\n      pkginfo.from = child.package._from;\n    }\n    if (child.fromBundle && !linked) {\n      pkginfo.bundled = true;\n    } else {\n      if (isRegistry(requested)) {\n        pkginfo.resolved = child.package._resolved;\n      }\n      // no integrity for git deps as integrity hashes are based on the\n      // tarball and we can't (yet) create consistent tarballs from a stable\n      // source.\n      if (requested.type !== 'git') {\n        pkginfo.integrity = child.package._integrity || undefined;\n        if (!pkginfo.integrity && child.package._shasum) {\n          pkginfo.integrity = ssri.fromHex(child.package._shasum, 'sha1');\n        }\n      }\n    }\n    if (childIsOnlyDev) pkginfo.dev = true;\n    if (isOnlyOptional(child)) pkginfo.optional = true;\n    if (child.requires.length) {\n      pkginfo.requires = {};\n      sortModules(child.requires).forEach(required => {\n        var requested = getRequested(required, child) || required.package._requested || {};\n        pkginfo.requires[moduleName(required)] = childRequested(top, required, requested);\n      });\n    }\n    // iterate into children on non-links and links contained within the top level package\n    if (child.children.length) {\n      pkginfo.dependencies = {};\n      shrinkwrapDeps(pkginfo.dependencies, top, child, seen);\n    }\n  });\n}\nfunction sortModules(modules) {\n  // sort modules with the locale-agnostic Unicode sort\n  var sortedModuleNames = modules.map(moduleName).sort();\n  return modules.sort((a, b) => sortedModuleNames.indexOf(moduleName(a)) - sortedModuleNames.indexOf(moduleName(b)));\n}\nfunction childVersion(top, child, req) {\n  if (req.type === 'directory' || req.type === 'file') {\n    return 'file:' + unixFormatPath(path.relative(top.path, child.package._resolved || req.fetchSpec));\n  } else if (!isRegistry(req) && !child.fromBundle) {\n    return child.package._resolved || req.saveSpec || req.rawSpec;\n  } else if (req.type === 'alias') {\n    return `npm:${child.package.name}@${child.package.version}`;\n  } else {\n    return child.package.version;\n  }\n}\nfunction childRequested(top, child, requested) {\n  if (requested.type === 'directory' || requested.type === 'file') {\n    return 'file:' + unixFormatPath(path.relative(top.path, child.package._resolved || requested.fetchSpec));\n  } else if (requested.type === 'git' && child.package._from) {\n    return child.package._from;\n  } else if (!isRegistry(requested) && !child.fromBundle) {\n    return child.package._resolved || requested.saveSpec || requested.rawSpec;\n  } else if (requested.type === 'tag') {\n    // tags are not ranges we can match against, so we invent a \"reasonable\"\n    // one based on what we actually installed.\n    return npm.config.get('save-prefix') + child.package.version;\n  } else if (requested.saveSpec || requested.rawSpec) {\n    return requested.saveSpec || requested.rawSpec;\n  } else if (child.package._from || child.package._requested && child.package._requested.rawSpec) {\n    return child.package._from.replace(/^@?[^@]+@/, '') || child.package._requested.rawSpec;\n  } else {\n    return child.package.version;\n  }\n}\nfunction shrinkwrap_(dir, pkginfo, opts, cb) {\n  save(dir, pkginfo, opts, cb);\n}\nfunction save(dir, pkginfo, opts, cb) {\n  // copy the keys over in a well defined order\n  // because javascript objects serialize arbitrarily\n  BB.join(checkPackageFile(dir, SHRINKWRAP), checkPackageFile(dir, PKGLOCK), checkPackageFile(dir, 'package.json'), (shrinkwrap, lockfile, pkg) => {\n    const info = shrinkwrap || lockfile || {\n      path: path.resolve(dir, opts.defaultFile || PKGLOCK),\n      data: '{}',\n      indent: pkg && pkg.indent,\n      newline: pkg && pkg.newline\n    };\n    const updated = updateLockfileMetadata(pkginfo, pkg && JSON.parse(pkg.raw));\n    const swdata = stringifyPackage(updated, info.indent, info.newline);\n    if (swdata === info.raw) {\n      // skip writing if file is identical\n      log.verbose('shrinkwrap', `skipping write for ${path.basename(info.path)} because there were no changes.`);\n      cb(null, pkginfo);\n    } else {\n      inferOwner(info.path).then(owner => {\n        writeFileAtomic(info.path, swdata, err => {\n          if (err) return cb(err);\n          if (opts.silent) return cb(null, pkginfo);\n          if (!shrinkwrap && !lockfile) {\n            log.notice('', `created a lockfile as ${path.basename(info.path)}. You should commit this file.`);\n          }\n          if (selfOwner.uid === 0 && (selfOwner.uid !== owner.uid || selfOwner.gid !== owner.gid)) {\n            chown(info.path, owner.uid, owner.gid, er => cb(er, pkginfo));\n          } else {\n            cb(null, pkginfo);\n          }\n        });\n      });\n    }\n  }).then(file => {}, cb);\n}\nfunction updateLockfileMetadata(pkginfo, pkgJson) {\n  // This is a lot of work just to make sure the extra metadata fields are\n  // between version and dependencies fields, without affecting any other stuff\n  const newPkg = {};\n  let metainfoWritten = false;\n  const metainfo = new Set(['lockfileVersion', 'preserveSymlinks']);\n  Object.keys(pkginfo).forEach(k => {\n    if (k === 'dependencies') {\n      writeMetainfo(newPkg);\n    }\n    if (!metainfo.has(k)) {\n      newPkg[k] = pkginfo[k];\n    }\n    if (k === 'version') {\n      writeMetainfo(newPkg);\n    }\n  });\n  if (!metainfoWritten) {\n    writeMetainfo(newPkg);\n  }\n  function writeMetainfo(pkginfo) {\n    pkginfo.lockfileVersion = PKGLOCK_VERSION;\n    if (process.env.NODE_PRESERVE_SYMLINKS) {\n      pkginfo.preserveSymlinks = process.env.NODE_PRESERVE_SYMLINKS;\n    }\n    metainfoWritten = true;\n  }\n  return newPkg;\n}\nfunction checkPackageFile(dir, name) {\n  const file = path.resolve(dir, name);\n  return readFile(file, 'utf8').then(data => {\n    const format = npm.config.get('format-package-lock') !== false;\n    const indent = format ? detectIndent(data).indent : 0;\n    const newline = format ? detectNewline(data) : 0;\n    return {\n      path: file,\n      raw: data,\n      indent,\n      newline\n    };\n  }).catch({\n    code: 'ENOENT'\n  }, () => {});\n}","map":{"version":3,"names":["BB","require","chain","detectIndent","detectNewline","readFile","promisify","getRequested","id","iferr","isOnlyOptional","isOnlyDev","lifecycle","log","moduleName","move","npm","path","readPackageTree","ssri","stringifyPackage","validate","writeFileAtomic","unixFormatPath","isRegistry","chown","inferOwner","selfOwner","uid","process","getuid","gid","getgid","PKGLOCK","SHRINKWRAP","PKGLOCK_VERSION","lockfileVersion","shrinkwrap","usage","module","exports","treeToShrinkwrap","args","silent","cb","length","warn","resolve","prefix","Promise","then","notice","d","JSON","parse","err","code","localPrefix","computeMetadata","tree","fromNode","createShrinkwrap","defaultFile","data","opts","package","pkginfo","shrinkwrap_","arguments","name","version","children","requires","shrinkwrapDeps","dependencies","deps","top","seen","Set","has","add","sortModules","forEach","child","childIsOnlyDev","requested","_requested","linked","isLink","isInLink","childVersion","type","_from","from","fromBundle","bundled","resolved","_resolved","integrity","_integrity","undefined","_shasum","fromHex","dev","optional","required","childRequested","modules","sortedModuleNames","map","sort","a","b","indexOf","req","relative","fetchSpec","saveSpec","rawSpec","config","get","replace","dir","save","join","checkPackageFile","lockfile","pkg","info","indent","newline","updated","updateLockfileMetadata","raw","swdata","verbose","basename","owner","er","file","pkgJson","newPkg","metainfoWritten","metainfo","Object","keys","k","writeMetainfo","env","NODE_PRESERVE_SYMLINKS","preserveSymlinks","format","catch"],"sources":["/Users/hkateliev/node_modules/npm/lib/shrinkwrap.js"],"sourcesContent":["'use strict'\n\nconst BB = require('bluebird')\n\nconst chain = require('slide').chain\nconst detectIndent = require('detect-indent')\nconst detectNewline = require('detect-newline')\nconst readFile = BB.promisify(require('graceful-fs').readFile)\nconst getRequested = require('./install/get-requested.js')\nconst id = require('./install/deps.js')\nconst iferr = require('iferr')\nconst isOnlyOptional = require('./install/is-only-optional.js')\nconst isOnlyDev = require('./install/is-only-dev.js')\nconst lifecycle = require('./utils/lifecycle.js')\nconst log = require('npmlog')\nconst moduleName = require('./utils/module-name.js')\nconst move = require('move-concurrently')\nconst npm = require('./npm.js')\nconst path = require('path')\nconst readPackageTree = BB.promisify(require('read-package-tree'))\nconst ssri = require('ssri')\nconst stringifyPackage = require('stringify-package')\nconst validate = require('aproba')\nconst writeFileAtomic = require('write-file-atomic')\nconst unixFormatPath = require('./utils/unix-format-path.js')\nconst isRegistry = require('./utils/is-registry.js')\n\nconst { chown } = require('fs')\nconst inferOwner = require('infer-owner')\nconst selfOwner = {\n  uid: process.getuid && process.getuid(),\n  gid: process.getgid && process.getgid()\n}\n\nconst PKGLOCK = 'package-lock.json'\nconst SHRINKWRAP = 'npm-shrinkwrap.json'\nconst PKGLOCK_VERSION = npm.lockfileVersion\n\n// emit JSON describing versions of all packages currently installed (for later\n// use with shrinkwrap install)\nshrinkwrap.usage = 'npm shrinkwrap'\n\nmodule.exports = exports = shrinkwrap\nexports.treeToShrinkwrap = treeToShrinkwrap\n\nfunction shrinkwrap (args, silent, cb) {\n  if (typeof cb !== 'function') {\n    cb = silent\n    silent = false\n  }\n\n  if (args.length) {\n    log.warn('shrinkwrap', \"doesn't take positional args\")\n  }\n\n  move(\n    path.resolve(npm.prefix, PKGLOCK),\n    path.resolve(npm.prefix, SHRINKWRAP),\n    { Promise: BB }\n  ).then(() => {\n    log.notice('', `${PKGLOCK} has been renamed to ${SHRINKWRAP}. ${SHRINKWRAP} will be used for future installations.`)\n    return readFile(path.resolve(npm.prefix, SHRINKWRAP)).then((d) => {\n      return JSON.parse(d)\n    })\n  }, (err) => {\n    if (err.code !== 'ENOENT') {\n      throw err\n    } else {\n      return readPackageTree(npm.localPrefix).then(\n        id.computeMetadata\n      ).then((tree) => {\n        return BB.fromNode((cb) => {\n          createShrinkwrap(tree, {\n            silent,\n            defaultFile: SHRINKWRAP\n          }, cb)\n        })\n      })\n    }\n  }).then((data) => cb(null, data), cb)\n}\n\nmodule.exports.createShrinkwrap = createShrinkwrap\n\nfunction createShrinkwrap (tree, opts, cb) {\n  opts = opts || {}\n  lifecycle(tree.package, 'preshrinkwrap', tree.path, function () {\n    const pkginfo = treeToShrinkwrap(tree)\n    chain([\n      [lifecycle, tree.package, 'shrinkwrap', tree.path],\n      [shrinkwrap_, tree.path, pkginfo, opts],\n      [lifecycle, tree.package, 'postshrinkwrap', tree.path]\n    ], iferr(cb, function (data) {\n      cb(null, pkginfo)\n    }))\n  })\n}\n\nfunction treeToShrinkwrap (tree) {\n  validate('O', arguments)\n  var pkginfo = {}\n  if (tree.package.name) pkginfo.name = tree.package.name\n  if (tree.package.version) pkginfo.version = tree.package.version\n  if (tree.children.length) {\n    pkginfo.requires = true\n    shrinkwrapDeps(pkginfo.dependencies = {}, tree, tree)\n  }\n  return pkginfo\n}\n\nfunction shrinkwrapDeps (deps, top, tree, seen) {\n  validate('OOO', [deps, top, tree])\n  if (!seen) seen = new Set()\n  if (seen.has(tree)) return\n  seen.add(tree)\n  sortModules(tree.children).forEach(function (child) {\n    var childIsOnlyDev = isOnlyDev(child)\n    var pkginfo = deps[moduleName(child)] = {}\n    var requested = getRequested(child) || child.package._requested || {}\n    var linked = child.isLink || child.isInLink\n    pkginfo.version = childVersion(top, child, requested)\n    if (requested.type === 'git' && child.package._from) {\n      pkginfo.from = child.package._from\n    }\n    if (child.fromBundle && !linked) {\n      pkginfo.bundled = true\n    } else {\n      if (isRegistry(requested)) {\n        pkginfo.resolved = child.package._resolved\n      }\n      // no integrity for git deps as integrity hashes are based on the\n      // tarball and we can't (yet) create consistent tarballs from a stable\n      // source.\n      if (requested.type !== 'git') {\n        pkginfo.integrity = child.package._integrity || undefined\n        if (!pkginfo.integrity && child.package._shasum) {\n          pkginfo.integrity = ssri.fromHex(child.package._shasum, 'sha1')\n        }\n      }\n    }\n    if (childIsOnlyDev) pkginfo.dev = true\n    if (isOnlyOptional(child)) pkginfo.optional = true\n    if (child.requires.length) {\n      pkginfo.requires = {}\n      sortModules(child.requires).forEach((required) => {\n        var requested = getRequested(required, child) || required.package._requested || {}\n        pkginfo.requires[moduleName(required)] = childRequested(top, required, requested)\n      })\n    }\n    // iterate into children on non-links and links contained within the top level package\n    if (child.children.length) {\n      pkginfo.dependencies = {}\n      shrinkwrapDeps(pkginfo.dependencies, top, child, seen)\n    }\n  })\n}\n\nfunction sortModules (modules) {\n  // sort modules with the locale-agnostic Unicode sort\n  var sortedModuleNames = modules.map(moduleName).sort()\n  return modules.sort((a, b) => (\n    sortedModuleNames.indexOf(moduleName(a)) - sortedModuleNames.indexOf(moduleName(b))\n  ))\n}\n\nfunction childVersion (top, child, req) {\n  if (req.type === 'directory' || req.type === 'file') {\n    return 'file:' + unixFormatPath(path.relative(top.path, child.package._resolved || req.fetchSpec))\n  } else if (!isRegistry(req) && !child.fromBundle) {\n    return child.package._resolved || req.saveSpec || req.rawSpec\n  } else if (req.type === 'alias') {\n    return `npm:${child.package.name}@${child.package.version}`\n  } else {\n    return child.package.version\n  }\n}\n\nfunction childRequested (top, child, requested) {\n  if (requested.type === 'directory' || requested.type === 'file') {\n    return 'file:' + unixFormatPath(path.relative(top.path, child.package._resolved || requested.fetchSpec))\n  } else if (requested.type === 'git' && child.package._from) {\n    return child.package._from\n  } else if (!isRegistry(requested) && !child.fromBundle) {\n    return child.package._resolved || requested.saveSpec || requested.rawSpec\n  } else if (requested.type === 'tag') {\n    // tags are not ranges we can match against, so we invent a \"reasonable\"\n    // one based on what we actually installed.\n    return npm.config.get('save-prefix') + child.package.version\n  } else if (requested.saveSpec || requested.rawSpec) {\n    return requested.saveSpec || requested.rawSpec\n  } else if (child.package._from || (child.package._requested && child.package._requested.rawSpec)) {\n    return child.package._from.replace(/^@?[^@]+@/, '') || child.package._requested.rawSpec\n  } else {\n    return child.package.version\n  }\n}\n\nfunction shrinkwrap_ (dir, pkginfo, opts, cb) {\n  save(dir, pkginfo, opts, cb)\n}\n\nfunction save (dir, pkginfo, opts, cb) {\n  // copy the keys over in a well defined order\n  // because javascript objects serialize arbitrarily\n  BB.join(\n    checkPackageFile(dir, SHRINKWRAP),\n    checkPackageFile(dir, PKGLOCK),\n    checkPackageFile(dir, 'package.json'),\n    (shrinkwrap, lockfile, pkg) => {\n      const info = (\n        shrinkwrap ||\n        lockfile ||\n        {\n          path: path.resolve(dir, opts.defaultFile || PKGLOCK),\n          data: '{}',\n          indent: pkg && pkg.indent,\n          newline: pkg && pkg.newline\n        }\n      )\n      const updated = updateLockfileMetadata(pkginfo, pkg && JSON.parse(pkg.raw))\n      const swdata = stringifyPackage(updated, info.indent, info.newline)\n      if (swdata === info.raw) {\n        // skip writing if file is identical\n        log.verbose('shrinkwrap', `skipping write for ${path.basename(info.path)} because there were no changes.`)\n        cb(null, pkginfo)\n      } else {\n        inferOwner(info.path).then(owner => {\n          writeFileAtomic(info.path, swdata, (err) => {\n            if (err) return cb(err)\n            if (opts.silent) return cb(null, pkginfo)\n            if (!shrinkwrap && !lockfile) {\n              log.notice('', `created a lockfile as ${path.basename(info.path)}. You should commit this file.`)\n            }\n            if (selfOwner.uid === 0 && (selfOwner.uid !== owner.uid || selfOwner.gid !== owner.gid)) {\n              chown(info.path, owner.uid, owner.gid, er => cb(er, pkginfo))\n            } else {\n              cb(null, pkginfo)\n            }\n          })\n        })\n      }\n    }\n  ).then((file) => {\n  }, cb)\n}\n\nfunction updateLockfileMetadata (pkginfo, pkgJson) {\n  // This is a lot of work just to make sure the extra metadata fields are\n  // between version and dependencies fields, without affecting any other stuff\n  const newPkg = {}\n  let metainfoWritten = false\n  const metainfo = new Set([\n    'lockfileVersion',\n    'preserveSymlinks'\n  ])\n  Object.keys(pkginfo).forEach((k) => {\n    if (k === 'dependencies') {\n      writeMetainfo(newPkg)\n    }\n    if (!metainfo.has(k)) {\n      newPkg[k] = pkginfo[k]\n    }\n    if (k === 'version') {\n      writeMetainfo(newPkg)\n    }\n  })\n  if (!metainfoWritten) {\n    writeMetainfo(newPkg)\n  }\n  function writeMetainfo (pkginfo) {\n    pkginfo.lockfileVersion = PKGLOCK_VERSION\n    if (process.env.NODE_PRESERVE_SYMLINKS) {\n      pkginfo.preserveSymlinks = process.env.NODE_PRESERVE_SYMLINKS\n    }\n    metainfoWritten = true\n  }\n  return newPkg\n}\n\nfunction checkPackageFile (dir, name) {\n  const file = path.resolve(dir, name)\n  return readFile(\n    file, 'utf8'\n  ).then((data) => {\n    const format = npm.config.get('format-package-lock') !== false\n    const indent = format ? detectIndent(data).indent : 0\n    const newline = format ? detectNewline(data) : 0\n\n    return {\n      path: file,\n      raw: data,\n      indent,\n      newline\n    }\n  }).catch({code: 'ENOENT'}, () => {})\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}