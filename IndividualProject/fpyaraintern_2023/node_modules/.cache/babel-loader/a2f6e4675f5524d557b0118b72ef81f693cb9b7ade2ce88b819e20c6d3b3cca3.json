{"ast":null,"code":"exports.replaceDollarWithPercentPair = replaceDollarWithPercentPair;\nexports.convertToSetCommand = convertToSetCommand;\nexports.convertToSetCommands = convertToSetCommands;\nfunction convertToSetCommand(key, value) {\n  var line = \"\";\n  key = key || \"\";\n  key = key.trim();\n  value = value || \"\";\n  value = value.trim();\n  if (key && value && value.length > 0) {\n    line = \"@SET \" + key + \"=\" + replaceDollarWithPercentPair(value) + \"\\r\\n\";\n  }\n  return line;\n}\nfunction extractVariableValuePairs(declarations) {\n  var pairs = {};\n  declarations.map(function (declaration) {\n    var split = declaration.split(\"=\");\n    pairs[split[0]] = split[1];\n  });\n  return pairs;\n}\nfunction convertToSetCommands(variableString) {\n  var variableValuePairs = extractVariableValuePairs(variableString.split(\" \"));\n  var variableDeclarationsAsBatch = \"\";\n  Object.keys(variableValuePairs).forEach(function (key) {\n    variableDeclarationsAsBatch += convertToSetCommand(key, variableValuePairs[key]);\n  });\n  return variableDeclarationsAsBatch;\n}\nfunction replaceDollarWithPercentPair(value) {\n  var dollarExpressions = /\\$\\{?([^\\$@#\\?\\- \\t{}:]+)\\}?/g;\n  var result = \"\";\n  var startIndex = 0;\n  do {\n    var match = dollarExpressions.exec(value);\n    if (match) {\n      var betweenMatches = value.substring(startIndex, match.index) || \"\";\n      result += betweenMatches + \"%\" + match[1] + \"%\";\n      startIndex = dollarExpressions.lastIndex;\n    }\n  } while (dollarExpressions.lastIndex > 0);\n  result += value.substr(startIndex);\n  return result;\n}","map":{"version":3,"names":["exports","replaceDollarWithPercentPair","convertToSetCommand","convertToSetCommands","key","value","line","trim","length","extractVariableValuePairs","declarations","pairs","map","declaration","split","variableString","variableValuePairs","variableDeclarationsAsBatch","Object","keys","forEach","dollarExpressions","result","startIndex","match","exec","betweenMatches","substring","index","lastIndex","substr"],"sources":["/Users/hkateliev/node_modules/npm/node_modules/cmd-shim/lib/to-batch-syntax.js"],"sourcesContent":["exports.replaceDollarWithPercentPair = replaceDollarWithPercentPair\nexports.convertToSetCommand = convertToSetCommand\nexports.convertToSetCommands = convertToSetCommands\n\nfunction convertToSetCommand(key, value) {\n    var line = \"\"\n    key = key || \"\"\n    key = key.trim()\n    value = value || \"\"\n    value = value.trim()\n    if(key && value && value.length > 0) {\n        line = \"@SET \" + key + \"=\" + replaceDollarWithPercentPair(value) + \"\\r\\n\"\n    }\n    return line\n}\n\nfunction extractVariableValuePairs(declarations) {\n    var pairs = {}\n    declarations.map(function(declaration) {\n        var split = declaration.split(\"=\")\n        pairs[split[0]]=split[1]\n    })\n    return pairs\n}\n\nfunction convertToSetCommands(variableString) {\n    var variableValuePairs = extractVariableValuePairs(variableString.split(\" \"))\n    var variableDeclarationsAsBatch = \"\"\n    Object.keys(variableValuePairs).forEach(function (key) {\n        variableDeclarationsAsBatch += convertToSetCommand(key, variableValuePairs[key])\n    })\n    return variableDeclarationsAsBatch\n}\n\nfunction replaceDollarWithPercentPair(value) {\n    var dollarExpressions = /\\$\\{?([^\\$@#\\?\\- \\t{}:]+)\\}?/g\n    var result = \"\"\n    var startIndex = 0\n    do {\n        var match = dollarExpressions.exec(value)\n        if(match) {\n            var betweenMatches = value.substring(startIndex, match.index) || \"\"\n            result +=  betweenMatches + \"%\" + match[1] + \"%\"\n            startIndex = dollarExpressions.lastIndex\n        }\n    } while (dollarExpressions.lastIndex > 0)\n    result += value.substr(startIndex)\n    return result\n}\n\n\n"],"mappings":"AAAAA,OAAO,CAACC,4BAA4B,GAAGA,4BAA4B;AACnED,OAAO,CAACE,mBAAmB,GAAGA,mBAAmB;AACjDF,OAAO,CAACG,oBAAoB,GAAGA,oBAAoB;AAEnD,SAASD,mBAAmBA,CAACE,GAAG,EAAEC,KAAK,EAAE;EACrC,IAAIC,IAAI,GAAG,EAAE;EACbF,GAAG,GAAGA,GAAG,IAAI,EAAE;EACfA,GAAG,GAAGA,GAAG,CAACG,IAAI,EAAE;EAChBF,KAAK,GAAGA,KAAK,IAAI,EAAE;EACnBA,KAAK,GAAGA,KAAK,CAACE,IAAI,EAAE;EACpB,IAAGH,GAAG,IAAIC,KAAK,IAAIA,KAAK,CAACG,MAAM,GAAG,CAAC,EAAE;IACjCF,IAAI,GAAG,OAAO,GAAGF,GAAG,GAAG,GAAG,GAAGH,4BAA4B,CAACI,KAAK,CAAC,GAAG,MAAM;EAC7E;EACA,OAAOC,IAAI;AACf;AAEA,SAASG,yBAAyBA,CAACC,YAAY,EAAE;EAC7C,IAAIC,KAAK,GAAG,CAAC,CAAC;EACdD,YAAY,CAACE,GAAG,CAAC,UAASC,WAAW,EAAE;IACnC,IAAIC,KAAK,GAAGD,WAAW,CAACC,KAAK,CAAC,GAAG,CAAC;IAClCH,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,GAACA,KAAK,CAAC,CAAC,CAAC;EAC5B,CAAC,CAAC;EACF,OAAOH,KAAK;AAChB;AAEA,SAASR,oBAAoBA,CAACY,cAAc,EAAE;EAC1C,IAAIC,kBAAkB,GAAGP,yBAAyB,CAACM,cAAc,CAACD,KAAK,CAAC,GAAG,CAAC,CAAC;EAC7E,IAAIG,2BAA2B,GAAG,EAAE;EACpCC,MAAM,CAACC,IAAI,CAACH,kBAAkB,CAAC,CAACI,OAAO,CAAC,UAAUhB,GAAG,EAAE;IACnDa,2BAA2B,IAAIf,mBAAmB,CAACE,GAAG,EAAEY,kBAAkB,CAACZ,GAAG,CAAC,CAAC;EACpF,CAAC,CAAC;EACF,OAAOa,2BAA2B;AACtC;AAEA,SAAShB,4BAA4BA,CAACI,KAAK,EAAE;EACzC,IAAIgB,iBAAiB,GAAG,+BAA+B;EACvD,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,UAAU,GAAG,CAAC;EAClB,GAAG;IACC,IAAIC,KAAK,GAAGH,iBAAiB,CAACI,IAAI,CAACpB,KAAK,CAAC;IACzC,IAAGmB,KAAK,EAAE;MACN,IAAIE,cAAc,GAAGrB,KAAK,CAACsB,SAAS,CAACJ,UAAU,EAAEC,KAAK,CAACI,KAAK,CAAC,IAAI,EAAE;MACnEN,MAAM,IAAKI,cAAc,GAAG,GAAG,GAAGF,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG;MAChDD,UAAU,GAAGF,iBAAiB,CAACQ,SAAS;IAC5C;EACJ,CAAC,QAAQR,iBAAiB,CAACQ,SAAS,GAAG,CAAC;EACxCP,MAAM,IAAIjB,KAAK,CAACyB,MAAM,CAACP,UAAU,CAAC;EAClC,OAAOD,MAAM;AACjB"},"metadata":{},"sourceType":"script","externalDependencies":[]}