{"ast":null,"code":"'use strict';\n\nvar fs = require('graceful-fs');\nfunction extractPath(path, cmdshimContents) {\n  if (/[.]cmd$/.test(path)) {\n    return extractPathFromCmd(cmdshimContents);\n  } else if (/[.]ps1$/.test(path)) {\n    return extractPathFromPowershell(cmdshimContents);\n  } else {\n    return extractPathFromCygwin(cmdshimContents);\n  }\n}\nfunction extractPathFromPowershell(cmdshimContents) {\n  var matches = cmdshimContents.match(/\"[$]basedir[/]([^\"]+?)\"\\s+[$]args/);\n  return matches && matches[1];\n}\nfunction extractPathFromCmd(cmdshimContents) {\n  var matches = cmdshimContents.match(/\"%(?:~dp0|dp0%)\\\\([^\"]+?)\"\\s+%[*]/);\n  return matches && matches[1];\n}\nfunction extractPathFromCygwin(cmdshimContents) {\n  var matches = cmdshimContents.match(/\"[$]basedir[/]([^\"]+?)\"\\s+\"[$]@\"/);\n  return matches && matches[1];\n}\nfunction wrapError(thrown, newError) {\n  newError.message = thrown.message;\n  newError.code = thrown.code;\n  return newError;\n}\nfunction notaShim(path, er) {\n  if (!er) {\n    er = new Error();\n    Error.captureStackTrace(er, notaShim);\n  }\n  er.code = 'ENOTASHIM';\n  er.message = \"Can't read shim path from '\" + path + \"', it doesn't appear to be a cmd-shim\";\n  return er;\n}\nvar readCmdShim = module.exports = function (path, cb) {\n  var er = new Error();\n  Error.captureStackTrace(er, readCmdShim);\n  fs.readFile(path, function (readFileEr, contents) {\n    if (readFileEr) return cb(wrapError(readFileEr, er));\n    var destination = extractPath(path, contents.toString());\n    if (destination) return cb(null, destination);\n    return cb(notaShim(path, er));\n  });\n};\nmodule.exports.sync = function (path) {\n  var contents = fs.readFileSync(path);\n  var destination = extractPath(path, contents.toString());\n  if (!destination) throw notaShim(path);\n  return destination;\n};","map":{"version":3,"names":["fs","require","extractPath","path","cmdshimContents","test","extractPathFromCmd","extractPathFromPowershell","extractPathFromCygwin","matches","match","wrapError","thrown","newError","message","code","notaShim","er","Error","captureStackTrace","readCmdShim","module","exports","cb","readFile","readFileEr","contents","destination","toString","sync","readFileSync"],"sources":["/Users/hkateliev/node_modules/npm/node_modules/read-cmd-shim/index.js"],"sourcesContent":["'use strict'\nvar fs = require('graceful-fs')\n\nfunction extractPath (path, cmdshimContents) {\n  if (/[.]cmd$/.test(path)) {\n    return extractPathFromCmd(cmdshimContents)\n  } else if (/[.]ps1$/.test(path)) {\n    return extractPathFromPowershell(cmdshimContents)\n  } else {\n    return extractPathFromCygwin(cmdshimContents)\n  }\n}\n\nfunction extractPathFromPowershell (cmdshimContents) {\n  var matches = cmdshimContents.match(/\"[$]basedir[/]([^\"]+?)\"\\s+[$]args/)\n  return matches && matches[1]\n}\n\nfunction extractPathFromCmd (cmdshimContents) {\n  var matches = cmdshimContents.match(/\"%(?:~dp0|dp0%)\\\\([^\"]+?)\"\\s+%[*]/)\n  return matches && matches[1]\n}\n\nfunction extractPathFromCygwin (cmdshimContents) {\n  var matches = cmdshimContents.match(/\"[$]basedir[/]([^\"]+?)\"\\s+\"[$]@\"/)\n  return matches && matches[1]\n}\n\nfunction wrapError (thrown, newError) {\n  newError.message = thrown.message\n  newError.code = thrown.code\n  return newError\n}\n\nfunction notaShim (path, er) {\n  if (!er) {\n    er = new Error()\n    Error.captureStackTrace(er, notaShim)\n  }\n  er.code = 'ENOTASHIM'\n  er.message = \"Can't read shim path from '\" + path + \"', it doesn't appear to be a cmd-shim\"\n  return er\n}\n\nvar readCmdShim = module.exports = function (path, cb) {\n  var er = new Error()\n  Error.captureStackTrace(er, readCmdShim)\n  fs.readFile(path, function (readFileEr, contents) {\n    if (readFileEr) return cb(wrapError(readFileEr, er))\n    var destination = extractPath(path, contents.toString())\n    if (destination) return cb(null, destination)\n    return cb(notaShim(path, er))\n  })\n}\n\nmodule.exports.sync = function (path) {\n  var contents = fs.readFileSync(path)\n  var destination = extractPath(path, contents.toString())\n  if (!destination) throw notaShim(path)\n  return destination\n}\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,EAAE,GAAGC,OAAO,CAAC,aAAa,CAAC;AAE/B,SAASC,WAAWA,CAAEC,IAAI,EAAEC,eAAe,EAAE;EAC3C,IAAI,SAAS,CAACC,IAAI,CAACF,IAAI,CAAC,EAAE;IACxB,OAAOG,kBAAkB,CAACF,eAAe,CAAC;EAC5C,CAAC,MAAM,IAAI,SAAS,CAACC,IAAI,CAACF,IAAI,CAAC,EAAE;IAC/B,OAAOI,yBAAyB,CAACH,eAAe,CAAC;EACnD,CAAC,MAAM;IACL,OAAOI,qBAAqB,CAACJ,eAAe,CAAC;EAC/C;AACF;AAEA,SAASG,yBAAyBA,CAAEH,eAAe,EAAE;EACnD,IAAIK,OAAO,GAAGL,eAAe,CAACM,KAAK,CAAC,mCAAmC,CAAC;EACxE,OAAOD,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC;AAC9B;AAEA,SAASH,kBAAkBA,CAAEF,eAAe,EAAE;EAC5C,IAAIK,OAAO,GAAGL,eAAe,CAACM,KAAK,CAAC,mCAAmC,CAAC;EACxE,OAAOD,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC;AAC9B;AAEA,SAASD,qBAAqBA,CAAEJ,eAAe,EAAE;EAC/C,IAAIK,OAAO,GAAGL,eAAe,CAACM,KAAK,CAAC,kCAAkC,CAAC;EACvE,OAAOD,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC;AAC9B;AAEA,SAASE,SAASA,CAAEC,MAAM,EAAEC,QAAQ,EAAE;EACpCA,QAAQ,CAACC,OAAO,GAAGF,MAAM,CAACE,OAAO;EACjCD,QAAQ,CAACE,IAAI,GAAGH,MAAM,CAACG,IAAI;EAC3B,OAAOF,QAAQ;AACjB;AAEA,SAASG,QAAQA,CAAEb,IAAI,EAAEc,EAAE,EAAE;EAC3B,IAAI,CAACA,EAAE,EAAE;IACPA,EAAE,GAAG,IAAIC,KAAK,EAAE;IAChBA,KAAK,CAACC,iBAAiB,CAACF,EAAE,EAAED,QAAQ,CAAC;EACvC;EACAC,EAAE,CAACF,IAAI,GAAG,WAAW;EACrBE,EAAE,CAACH,OAAO,GAAG,6BAA6B,GAAGX,IAAI,GAAG,uCAAuC;EAC3F,OAAOc,EAAE;AACX;AAEA,IAAIG,WAAW,GAAGC,MAAM,CAACC,OAAO,GAAG,UAAUnB,IAAI,EAAEoB,EAAE,EAAE;EACrD,IAAIN,EAAE,GAAG,IAAIC,KAAK,EAAE;EACpBA,KAAK,CAACC,iBAAiB,CAACF,EAAE,EAAEG,WAAW,CAAC;EACxCpB,EAAE,CAACwB,QAAQ,CAACrB,IAAI,EAAE,UAAUsB,UAAU,EAAEC,QAAQ,EAAE;IAChD,IAAID,UAAU,EAAE,OAAOF,EAAE,CAACZ,SAAS,CAACc,UAAU,EAAER,EAAE,CAAC,CAAC;IACpD,IAAIU,WAAW,GAAGzB,WAAW,CAACC,IAAI,EAAEuB,QAAQ,CAACE,QAAQ,EAAE,CAAC;IACxD,IAAID,WAAW,EAAE,OAAOJ,EAAE,CAAC,IAAI,EAAEI,WAAW,CAAC;IAC7C,OAAOJ,EAAE,CAACP,QAAQ,CAACb,IAAI,EAAEc,EAAE,CAAC,CAAC;EAC/B,CAAC,CAAC;AACJ,CAAC;AAEDI,MAAM,CAACC,OAAO,CAACO,IAAI,GAAG,UAAU1B,IAAI,EAAE;EACpC,IAAIuB,QAAQ,GAAG1B,EAAE,CAAC8B,YAAY,CAAC3B,IAAI,CAAC;EACpC,IAAIwB,WAAW,GAAGzB,WAAW,CAACC,IAAI,EAAEuB,QAAQ,CAACE,QAAQ,EAAE,CAAC;EACxD,IAAI,CAACD,WAAW,EAAE,MAAMX,QAAQ,CAACb,IAAI,CAAC;EACtC,OAAOwB,WAAW;AACpB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}