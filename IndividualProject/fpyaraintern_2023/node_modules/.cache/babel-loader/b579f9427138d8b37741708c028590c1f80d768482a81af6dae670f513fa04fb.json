{"ast":null,"code":"'use strict';\n\nconst url = require('url');\nfunction packageName(href) {\n  try {\n    let basePath = url.parse(href).pathname.substr(1);\n    if (!basePath.match(/^-/)) {\n      basePath = basePath.split('/');\n      var index = basePath.indexOf('_rewrite');\n      if (index === -1) {\n        index = basePath.length - 1;\n      } else {\n        index++;\n      }\n      return decodeURIComponent(basePath[index]);\n    }\n  } catch (_) {\n    // this is ok\n  }\n}\nclass HttpErrorBase extends Error {\n  constructor(method, res, body, spec) {\n    super();\n    this.headers = res.headers.raw();\n    this.statusCode = res.status;\n    this.code = `E${res.status}`;\n    this.method = method;\n    this.uri = res.url;\n    this.body = body;\n    this.pkgid = spec ? spec.toString() : packageName(res.url);\n  }\n}\nmodule.exports.HttpErrorBase = HttpErrorBase;\nclass HttpErrorGeneral extends HttpErrorBase {\n  constructor(method, res, body, spec) {\n    super(method, res, body, spec);\n    this.message = `${res.status} ${res.statusText} - ${this.method.toUpperCase()} ${this.spec || this.uri}${body && body.error ? ' - ' + body.error : ''}`;\n    Error.captureStackTrace(this, HttpErrorGeneral);\n  }\n}\nmodule.exports.HttpErrorGeneral = HttpErrorGeneral;\nclass HttpErrorAuthOTP extends HttpErrorBase {\n  constructor(method, res, body, spec) {\n    super(method, res, body, spec);\n    this.message = 'OTP required for authentication';\n    this.code = 'EOTP';\n    Error.captureStackTrace(this, HttpErrorAuthOTP);\n  }\n}\nmodule.exports.HttpErrorAuthOTP = HttpErrorAuthOTP;\nclass HttpErrorAuthIPAddress extends HttpErrorBase {\n  constructor(method, res, body, spec) {\n    super(method, res, body, spec);\n    this.message = 'Login is not allowed from your IP address';\n    this.code = 'EAUTHIP';\n    Error.captureStackTrace(this, HttpErrorAuthIPAddress);\n  }\n}\nmodule.exports.HttpErrorAuthIPAddress = HttpErrorAuthIPAddress;\nclass HttpErrorAuthUnknown extends HttpErrorBase {\n  constructor(method, res, body, spec) {\n    super(method, res, body, spec);\n    this.message = 'Unable to authenticate, need: ' + res.headers.get('www-authenticate');\n    Error.captureStackTrace(this, HttpErrorAuthUnknown);\n  }\n}\nmodule.exports.HttpErrorAuthUnknown = HttpErrorAuthUnknown;","map":{"version":3,"names":["url","require","packageName","href","basePath","parse","pathname","substr","match","split","index","indexOf","length","decodeURIComponent","_","HttpErrorBase","Error","constructor","method","res","body","spec","headers","raw","statusCode","status","code","uri","pkgid","toString","module","exports","HttpErrorGeneral","message","statusText","toUpperCase","error","captureStackTrace","HttpErrorAuthOTP","HttpErrorAuthIPAddress","HttpErrorAuthUnknown","get"],"sources":["/Users/hkateliev/node_modules/npm/node_modules/npm-registry-fetch/errors.js"],"sourcesContent":["'use strict'\n\nconst url = require('url')\n\nfunction packageName (href) {\n  try {\n    let basePath = url.parse(href).pathname.substr(1)\n    if (!basePath.match(/^-/)) {\n      basePath = basePath.split('/')\n      var index = basePath.indexOf('_rewrite')\n      if (index === -1) {\n        index = basePath.length - 1\n      } else {\n        index++\n      }\n      return decodeURIComponent(basePath[index])\n    }\n  } catch (_) {\n    // this is ok\n  }\n}\n\nclass HttpErrorBase extends Error {\n  constructor (method, res, body, spec) {\n    super()\n    this.headers = res.headers.raw()\n    this.statusCode = res.status\n    this.code = `E${res.status}`\n    this.method = method\n    this.uri = res.url\n    this.body = body\n    this.pkgid = spec ? spec.toString() : packageName(res.url)\n  }\n}\nmodule.exports.HttpErrorBase = HttpErrorBase\n\nclass HttpErrorGeneral extends HttpErrorBase {\n  constructor (method, res, body, spec) {\n    super(method, res, body, spec)\n    this.message = `${res.status} ${res.statusText} - ${\n      this.method.toUpperCase()\n    } ${\n      this.spec || this.uri\n    }${\n      (body && body.error) ? ' - ' + body.error : ''\n    }`\n    Error.captureStackTrace(this, HttpErrorGeneral)\n  }\n}\nmodule.exports.HttpErrorGeneral = HttpErrorGeneral\n\nclass HttpErrorAuthOTP extends HttpErrorBase {\n  constructor (method, res, body, spec) {\n    super(method, res, body, spec)\n    this.message = 'OTP required for authentication'\n    this.code = 'EOTP'\n    Error.captureStackTrace(this, HttpErrorAuthOTP)\n  }\n}\nmodule.exports.HttpErrorAuthOTP = HttpErrorAuthOTP\n\nclass HttpErrorAuthIPAddress extends HttpErrorBase {\n  constructor (method, res, body, spec) {\n    super(method, res, body, spec)\n    this.message = 'Login is not allowed from your IP address'\n    this.code = 'EAUTHIP'\n    Error.captureStackTrace(this, HttpErrorAuthIPAddress)\n  }\n}\nmodule.exports.HttpErrorAuthIPAddress = HttpErrorAuthIPAddress\n\nclass HttpErrorAuthUnknown extends HttpErrorBase {\n  constructor (method, res, body, spec) {\n    super(method, res, body, spec)\n    this.message = 'Unable to authenticate, need: ' + res.headers.get('www-authenticate')\n    Error.captureStackTrace(this, HttpErrorAuthUnknown)\n  }\n}\nmodule.exports.HttpErrorAuthUnknown = HttpErrorAuthUnknown\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}