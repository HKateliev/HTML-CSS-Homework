{"ast":null,"code":"// XXX use infer-owner or gentle-fs.mkdir here\nconst npm = require('../npm.js');\nconst path = require('path');\nconst chownr = require('chownr');\nconst writeFileAtomic = require('write-file-atomic');\nconst mkdirp = require('mkdirp');\nconst fs = require('graceful-fs');\nlet cache = null;\nlet cacheUid = null;\nlet cacheGid = null;\nlet needChown = typeof process.getuid === 'function';\nconst getCacheOwner = () => {\n  let st;\n  try {\n    st = fs.lstatSync(cache);\n  } catch (er) {\n    if (er.code !== 'ENOENT') {\n      throw er;\n    }\n    st = fs.lstatSync(path.dirname(cache));\n  }\n  cacheUid = st.uid;\n  cacheGid = st.gid;\n  needChown = st.uid !== process.getuid() || st.gid !== process.getgid();\n};\nconst writeOrAppend = (method, file, data) => {\n  if (!cache) {\n    cache = npm.config.get('cache');\n  }\n\n  // redundant if already absolute, but prevents non-absolute files\n  // from being written as if they're part of the cache.\n  file = path.resolve(cache, file);\n  if (cacheUid === null && needChown) {\n    getCacheOwner();\n  }\n  const dir = path.dirname(file);\n  const firstMade = mkdirp.sync(dir);\n  if (!needChown) {\n    return method(file, data);\n  }\n  let methodThrew = true;\n  try {\n    method(file, data);\n    methodThrew = false;\n  } finally {\n    // always try to leave it in the right ownership state, even on failure\n    // let the method error fail it instead of the chownr error, though\n    if (!methodThrew) {\n      chownr.sync(firstMade || file, cacheUid, cacheGid);\n    } else {\n      try {\n        chownr.sync(firstMade || file, cacheUid, cacheGid);\n      } catch (_) {}\n    }\n  }\n};\nexports.append = (file, data) => writeOrAppend(fs.appendFileSync, file, data);\nexports.write = (file, data) => writeOrAppend(writeFileAtomic.sync, file, data);","map":{"version":3,"names":["npm","require","path","chownr","writeFileAtomic","mkdirp","fs","cache","cacheUid","cacheGid","needChown","process","getuid","getCacheOwner","st","lstatSync","er","code","dirname","uid","gid","getgid","writeOrAppend","method","file","data","config","get","resolve","dir","firstMade","sync","methodThrew","_","exports","append","appendFileSync","write"],"sources":["/Users/hkateliev/node_modules/npm/lib/utils/cache-file.js"],"sourcesContent":["// XXX use infer-owner or gentle-fs.mkdir here\nconst npm = require('../npm.js')\nconst path = require('path')\nconst chownr = require('chownr')\nconst writeFileAtomic = require('write-file-atomic')\nconst mkdirp = require('mkdirp')\nconst fs = require('graceful-fs')\n\nlet cache = null\nlet cacheUid = null\nlet cacheGid = null\nlet needChown = typeof process.getuid === 'function'\n\nconst getCacheOwner = () => {\n  let st\n  try {\n    st = fs.lstatSync(cache)\n  } catch (er) {\n    if (er.code !== 'ENOENT') {\n      throw er\n    }\n    st = fs.lstatSync(path.dirname(cache))\n  }\n\n  cacheUid = st.uid\n  cacheGid = st.gid\n\n  needChown = st.uid !== process.getuid() ||\n    st.gid !== process.getgid()\n}\n\nconst writeOrAppend = (method, file, data) => {\n  if (!cache) {\n    cache = npm.config.get('cache')\n  }\n\n  // redundant if already absolute, but prevents non-absolute files\n  // from being written as if they're part of the cache.\n  file = path.resolve(cache, file)\n\n  if (cacheUid === null && needChown) {\n    getCacheOwner()\n  }\n\n  const dir = path.dirname(file)\n  const firstMade = mkdirp.sync(dir)\n\n  if (!needChown) {\n    return method(file, data)\n  }\n\n  let methodThrew = true\n  try {\n    method(file, data)\n    methodThrew = false\n  } finally {\n    // always try to leave it in the right ownership state, even on failure\n    // let the method error fail it instead of the chownr error, though\n    if (!methodThrew) {\n      chownr.sync(firstMade || file, cacheUid, cacheGid)\n    } else {\n      try {\n        chownr.sync(firstMade || file, cacheUid, cacheGid)\n      } catch (_) {}\n    }\n  }\n}\n\nexports.append = (file, data) => writeOrAppend(fs.appendFileSync, file, data)\nexports.write = (file, data) => writeOrAppend(writeFileAtomic.sync, file, data)\n"],"mappings":"AAAA;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,WAAW,CAAC;AAChC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMG,eAAe,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AACpD,MAAMI,MAAM,GAAGJ,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMK,EAAE,GAAGL,OAAO,CAAC,aAAa,CAAC;AAEjC,IAAIM,KAAK,GAAG,IAAI;AAChB,IAAIC,QAAQ,GAAG,IAAI;AACnB,IAAIC,QAAQ,GAAG,IAAI;AACnB,IAAIC,SAAS,GAAG,OAAOC,OAAO,CAACC,MAAM,KAAK,UAAU;AAEpD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAC1B,IAAIC,EAAE;EACN,IAAI;IACFA,EAAE,GAAGR,EAAE,CAACS,SAAS,CAACR,KAAK,CAAC;EAC1B,CAAC,CAAC,OAAOS,EAAE,EAAE;IACX,IAAIA,EAAE,CAACC,IAAI,KAAK,QAAQ,EAAE;MACxB,MAAMD,EAAE;IACV;IACAF,EAAE,GAAGR,EAAE,CAACS,SAAS,CAACb,IAAI,CAACgB,OAAO,CAACX,KAAK,CAAC,CAAC;EACxC;EAEAC,QAAQ,GAAGM,EAAE,CAACK,GAAG;EACjBV,QAAQ,GAAGK,EAAE,CAACM,GAAG;EAEjBV,SAAS,GAAGI,EAAE,CAACK,GAAG,KAAKR,OAAO,CAACC,MAAM,EAAE,IACrCE,EAAE,CAACM,GAAG,KAAKT,OAAO,CAACU,MAAM,EAAE;AAC/B,CAAC;AAED,MAAMC,aAAa,GAAGA,CAACC,MAAM,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAC5C,IAAI,CAAClB,KAAK,EAAE;IACVA,KAAK,GAAGP,GAAG,CAAC0B,MAAM,CAACC,GAAG,CAAC,OAAO,CAAC;EACjC;;EAEA;EACA;EACAH,IAAI,GAAGtB,IAAI,CAAC0B,OAAO,CAACrB,KAAK,EAAEiB,IAAI,CAAC;EAEhC,IAAIhB,QAAQ,KAAK,IAAI,IAAIE,SAAS,EAAE;IAClCG,aAAa,EAAE;EACjB;EAEA,MAAMgB,GAAG,GAAG3B,IAAI,CAACgB,OAAO,CAACM,IAAI,CAAC;EAC9B,MAAMM,SAAS,GAAGzB,MAAM,CAAC0B,IAAI,CAACF,GAAG,CAAC;EAElC,IAAI,CAACnB,SAAS,EAAE;IACd,OAAOa,MAAM,CAACC,IAAI,EAAEC,IAAI,CAAC;EAC3B;EAEA,IAAIO,WAAW,GAAG,IAAI;EACtB,IAAI;IACFT,MAAM,CAACC,IAAI,EAAEC,IAAI,CAAC;IAClBO,WAAW,GAAG,KAAK;EACrB,CAAC,SAAS;IACR;IACA;IACA,IAAI,CAACA,WAAW,EAAE;MAChB7B,MAAM,CAAC4B,IAAI,CAACD,SAAS,IAAIN,IAAI,EAAEhB,QAAQ,EAAEC,QAAQ,CAAC;IACpD,CAAC,MAAM;MACL,IAAI;QACFN,MAAM,CAAC4B,IAAI,CAACD,SAAS,IAAIN,IAAI,EAAEhB,QAAQ,EAAEC,QAAQ,CAAC;MACpD,CAAC,CAAC,OAAOwB,CAAC,EAAE,CAAC;IACf;EACF;AACF,CAAC;AAEDC,OAAO,CAACC,MAAM,GAAG,CAACX,IAAI,EAAEC,IAAI,KAAKH,aAAa,CAAChB,EAAE,CAAC8B,cAAc,EAAEZ,IAAI,EAAEC,IAAI,CAAC;AAC7ES,OAAO,CAACG,KAAK,GAAG,CAACb,IAAI,EAAEC,IAAI,KAAKH,aAAa,CAAClB,eAAe,CAAC2B,IAAI,EAAEP,IAAI,EAAEC,IAAI,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}