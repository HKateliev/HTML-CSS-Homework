{"ast":null,"code":"'use strict';\n\nvar path = require('path');\nmodule.exports = moduleName;\nmodule.exports.test = {};\nmodule.exports.test.pathToPackageName = pathToPackageName;\nfunction pathToPackageName(dir) {\n  if (dir == null) return '';\n  if (dir === '') return '';\n  var name = path.relative(path.resolve(dir, '..'), dir);\n  var scoped = path.relative(path.resolve(dir, '../..'), dir);\n  if (scoped[0] === '@') return scoped.replace(/\\\\/g, '/');\n  return name.trim();\n}\nmodule.exports.test.isNotEmpty = isNotEmpty;\nfunction isNotEmpty(str) {\n  return str != null && str !== '';\n}\nvar unknown = 0;\nfunction moduleName(tree) {\n  if (tree.name) {\n    return tree.name;\n  }\n  var pkg = tree.package || tree;\n  if (isNotEmpty(pkg.name) && typeof pkg.name === 'string') return pkg.name.trim();\n  var pkgName = pathToPackageName(tree.path);\n  if (pkgName !== '') return pkgName;\n  if (tree._invalidName != null) return tree._invalidName;\n  tree._invalidName = '!invalid#' + ++unknown;\n  return tree._invalidName;\n}","map":{"version":3,"names":["path","require","module","exports","moduleName","test","pathToPackageName","dir","name","relative","resolve","scoped","replace","trim","isNotEmpty","str","unknown","tree","pkg","package","pkgName","_invalidName"],"sources":["/Users/hkateliev/node_modules/npm/lib/utils/module-name.js"],"sourcesContent":["'use strict'\nvar path = require('path')\n\nmodule.exports = moduleName\nmodule.exports.test = {}\n\nmodule.exports.test.pathToPackageName = pathToPackageName\nfunction pathToPackageName (dir) {\n  if (dir == null) return ''\n  if (dir === '') return ''\n  var name = path.relative(path.resolve(dir, '..'), dir)\n  var scoped = path.relative(path.resolve(dir, '../..'), dir)\n  if (scoped[0] === '@') return scoped.replace(/\\\\/g, '/')\n  return name.trim()\n}\n\nmodule.exports.test.isNotEmpty = isNotEmpty\nfunction isNotEmpty (str) {\n  return str != null && str !== ''\n}\n\nvar unknown = 0\nfunction moduleName (tree) {\n  if (tree.name) { return tree.name }\n  var pkg = tree.package || tree\n  if (isNotEmpty(pkg.name) && typeof pkg.name === 'string') return pkg.name.trim()\n  var pkgName = pathToPackageName(tree.path)\n  if (pkgName !== '') return pkgName\n  if (tree._invalidName != null) return tree._invalidName\n  tree._invalidName = '!invalid#' + (++unknown)\n  return tree._invalidName\n}\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAE1BC,MAAM,CAACC,OAAO,GAAGC,UAAU;AAC3BF,MAAM,CAACC,OAAO,CAACE,IAAI,GAAG,CAAC,CAAC;AAExBH,MAAM,CAACC,OAAO,CAACE,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;AACzD,SAASA,iBAAiBA,CAAEC,GAAG,EAAE;EAC/B,IAAIA,GAAG,IAAI,IAAI,EAAE,OAAO,EAAE;EAC1B,IAAIA,GAAG,KAAK,EAAE,EAAE,OAAO,EAAE;EACzB,IAAIC,IAAI,GAAGR,IAAI,CAACS,QAAQ,CAACT,IAAI,CAACU,OAAO,CAACH,GAAG,EAAE,IAAI,CAAC,EAAEA,GAAG,CAAC;EACtD,IAAII,MAAM,GAAGX,IAAI,CAACS,QAAQ,CAACT,IAAI,CAACU,OAAO,CAACH,GAAG,EAAE,OAAO,CAAC,EAAEA,GAAG,CAAC;EAC3D,IAAII,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,OAAOA,MAAM,CAACC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;EACxD,OAAOJ,IAAI,CAACK,IAAI,EAAE;AACpB;AAEAX,MAAM,CAACC,OAAO,CAACE,IAAI,CAACS,UAAU,GAAGA,UAAU;AAC3C,SAASA,UAAUA,CAAEC,GAAG,EAAE;EACxB,OAAOA,GAAG,IAAI,IAAI,IAAIA,GAAG,KAAK,EAAE;AAClC;AAEA,IAAIC,OAAO,GAAG,CAAC;AACf,SAASZ,UAAUA,CAAEa,IAAI,EAAE;EACzB,IAAIA,IAAI,CAACT,IAAI,EAAE;IAAE,OAAOS,IAAI,CAACT,IAAI;EAAC;EAClC,IAAIU,GAAG,GAAGD,IAAI,CAACE,OAAO,IAAIF,IAAI;EAC9B,IAAIH,UAAU,CAACI,GAAG,CAACV,IAAI,CAAC,IAAI,OAAOU,GAAG,CAACV,IAAI,KAAK,QAAQ,EAAE,OAAOU,GAAG,CAACV,IAAI,CAACK,IAAI,EAAE;EAChF,IAAIO,OAAO,GAAGd,iBAAiB,CAACW,IAAI,CAACjB,IAAI,CAAC;EAC1C,IAAIoB,OAAO,KAAK,EAAE,EAAE,OAAOA,OAAO;EAClC,IAAIH,IAAI,CAACI,YAAY,IAAI,IAAI,EAAE,OAAOJ,IAAI,CAACI,YAAY;EACvDJ,IAAI,CAACI,YAAY,GAAG,WAAW,GAAI,EAAEL,OAAQ;EAC7C,OAAOC,IAAI,CAACI,YAAY;AAC1B"},"metadata":{},"sourceType":"script","externalDependencies":[]}