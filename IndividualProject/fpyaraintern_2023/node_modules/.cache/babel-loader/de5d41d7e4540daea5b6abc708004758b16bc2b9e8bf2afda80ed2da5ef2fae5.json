{"ast":null,"code":"'use strict';\n\nconst BB = require('bluebird');\nconst cacache = require('cacache');\nconst Fetcher = require('../fetch');\nconst fs = require('fs');\nconst pipe = BB.promisify(require('mississippi').pipe);\nconst through = require('mississippi').through;\nconst readFileAsync = BB.promisify(fs.readFile);\nconst statAsync = BB.promisify(fs.stat);\nconst MAX_BULK_SIZE = 2 * 1024 * 1024; // 2MB\n\n// `file` packages refer to local tarball files.\nconst fetchFile = module.exports = Object.create(null);\nFetcher.impl(fetchFile, {\n  packument(spec, opts) {\n    return BB.reject(new Error('Not implemented yet'));\n  },\n  manifest(spec, opts) {\n    // We can't do much here. `finalizeManifest` will take care of\n    // calling `tarball` to fill out all the necessary details.\n    return BB.resolve(null);\n  },\n  // All the heavy lifting for `file` packages is done here.\n  // They're never cached. We just read straight out of the file.\n  // TODO - maybe they *should* be cached?\n  tarball(spec, opts) {\n    const src = spec._resolved || spec.fetchSpec;\n    const stream = through();\n    statAsync(src).then(stat => {\n      if (spec._resolved) {\n        stream.emit('manifest', spec);\n      }\n      if (stat.size <= MAX_BULK_SIZE) {\n        // YAY LET'S DO THING IN BULK\n        return readFileAsync(src).then(data => {\n          if (opts.cache) {\n            return cacache.put(opts.cache, `pacote:tarball:file:${src}`, data, {\n              integrity: opts.integrity\n            }).then(integrity => ({\n              data,\n              integrity\n            }));\n          } else {\n            return {\n              data\n            };\n          }\n        }).then(info => {\n          if (info.integrity) {\n            stream.emit('integrity', info.integrity);\n          }\n          stream.write(info.data, () => {\n            stream.end();\n          });\n        });\n      } else {\n        let integrity;\n        const cacheWriter = !opts.cache ? BB.resolve(null) : pipe(fs.createReadStream(src), cacache.put.stream(opts.cache, `pacote:tarball:${src}`, {\n          integrity: opts.integrity\n        }).on('integrity', d => {\n          integrity = d;\n        }));\n        return cacheWriter.then(() => {\n          if (integrity) {\n            stream.emit('integrity', integrity);\n          }\n          return pipe(fs.createReadStream(src), stream);\n        });\n      }\n    }).catch(err => stream.emit('error', err));\n    return stream;\n  },\n  fromManifest(manifest, spec, opts) {\n    return this.tarball(manifest || spec, opts);\n  }\n});","map":{"version":3,"names":["BB","require","cacache","Fetcher","fs","pipe","promisify","through","readFileAsync","readFile","statAsync","stat","MAX_BULK_SIZE","fetchFile","module","exports","Object","create","impl","packument","spec","opts","reject","Error","manifest","resolve","tarball","src","_resolved","fetchSpec","stream","then","emit","size","data","cache","put","integrity","info","write","end","cacheWriter","createReadStream","on","d","catch","err","fromManifest"],"sources":["/Users/hkateliev/node_modules/npm/node_modules/pacote/lib/fetchers/file.js"],"sourcesContent":["'use strict'\n\nconst BB = require('bluebird')\n\nconst cacache = require('cacache')\nconst Fetcher = require('../fetch')\nconst fs = require('fs')\nconst pipe = BB.promisify(require('mississippi').pipe)\nconst through = require('mississippi').through\n\nconst readFileAsync = BB.promisify(fs.readFile)\nconst statAsync = BB.promisify(fs.stat)\n\nconst MAX_BULK_SIZE = 2 * 1024 * 1024 // 2MB\n\n// `file` packages refer to local tarball files.\nconst fetchFile = module.exports = Object.create(null)\n\nFetcher.impl(fetchFile, {\n  packument (spec, opts) {\n    return BB.reject(new Error('Not implemented yet'))\n  },\n\n  manifest (spec, opts) {\n    // We can't do much here. `finalizeManifest` will take care of\n    // calling `tarball` to fill out all the necessary details.\n    return BB.resolve(null)\n  },\n\n  // All the heavy lifting for `file` packages is done here.\n  // They're never cached. We just read straight out of the file.\n  // TODO - maybe they *should* be cached?\n  tarball (spec, opts) {\n    const src = spec._resolved || spec.fetchSpec\n    const stream = through()\n    statAsync(src).then(stat => {\n      if (spec._resolved) { stream.emit('manifest', spec) }\n      if (stat.size <= MAX_BULK_SIZE) {\n        // YAY LET'S DO THING IN BULK\n        return readFileAsync(src).then(data => {\n          if (opts.cache) {\n            return cacache.put(\n              opts.cache, `pacote:tarball:file:${src}`, data, {\n                integrity: opts.integrity\n              }\n            ).then(integrity => ({ data, integrity }))\n          } else {\n            return { data }\n          }\n        }).then(info => {\n          if (info.integrity) { stream.emit('integrity', info.integrity) }\n          stream.write(info.data, () => {\n            stream.end()\n          })\n        })\n      } else {\n        let integrity\n        const cacheWriter = !opts.cache\n          ? BB.resolve(null)\n          : (pipe(\n            fs.createReadStream(src),\n            cacache.put.stream(opts.cache, `pacote:tarball:${src}`, {\n              integrity: opts.integrity\n            }).on('integrity', d => { integrity = d })\n          ))\n        return cacheWriter.then(() => {\n          if (integrity) { stream.emit('integrity', integrity) }\n          return pipe(fs.createReadStream(src), stream)\n        })\n      }\n    }).catch(err => stream.emit('error', err))\n    return stream\n  },\n\n  fromManifest (manifest, spec, opts) {\n    return this.tarball(manifest || spec, opts)\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}