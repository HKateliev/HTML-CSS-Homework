{"ast":null,"code":"// On windows, create a .cmd file.\n// Read the #! in the file to see what it uses.  The vast majority\n// of the time, this will be either:\n// \"#!/usr/bin/env <prog> <args...>\"\n// or:\n// \"#!<prog> <args...>\"\n//\n// Write a binroot/pkg.bin + \".cmd\" file that has this line in it:\n// @<prog> <args...> %dp0%<target> %*\n\nmodule.exports = cmdShim;\ncmdShim.ifExists = cmdShimIfExists;\nvar fs = require(\"graceful-fs\");\nvar mkdir = require(\"mkdirp\"),\n  path = require(\"path\"),\n  toBatchSyntax = require(\"./lib/to-batch-syntax\"),\n  shebangExpr = /^#\\!\\s*(?:\\/usr\\/bin\\/env)?\\s*([^ \\t]+=[^ \\t]+\\s+)*\\s*([^ \\t]+)(.*)$/;\nfunction cmdShimIfExists(from, to, cb) {\n  fs.stat(from, function (er) {\n    if (er) return cb();\n    cmdShim(from, to, cb);\n  });\n}\n\n// Try to unlink, but ignore errors.\n// Any problems will surface later.\nfunction rm(path, cb) {\n  fs.unlink(path, function (er) {\n    cb();\n  });\n}\nfunction cmdShim(from, to, cb) {\n  fs.stat(from, function (er, stat) {\n    if (er) return cb(er);\n    cmdShim_(from, to, cb);\n  });\n}\nfunction cmdShim_(from, to, cb) {\n  var then = times(3, next, cb);\n  rm(to, then);\n  rm(to + \".cmd\", then);\n  rm(to + \".ps1\", then);\n  function next(er) {\n    writeShim(from, to, cb);\n  }\n}\nfunction writeShim(from, to, cb) {\n  // make a cmd file and a sh script\n  // First, check if the bin is a #! of some sort.\n  // If not, then assume it's something that'll be compiled, or some other\n  // sort of script, and just call it directly.\n  mkdir(path.dirname(to), function (er) {\n    if (er) return cb(er);\n    fs.readFile(from, \"utf8\", function (er, data) {\n      if (er) return writeShim_(from, to, null, null, null, cb);\n      var firstLine = data.trim().split(/\\r*\\n/)[0],\n        shebang = firstLine.match(shebangExpr);\n      if (!shebang) return writeShim_(from, to, null, null, null, cb);\n      var vars = shebang[1] || \"\",\n        prog = shebang[2],\n        args = shebang[3] || \"\";\n      return writeShim_(from, to, prog, args, vars, cb);\n    });\n  });\n}\nfunction writeShim_(from, to, prog, args, variables, cb) {\n  var shTarget = path.relative(path.dirname(to), from),\n    target = shTarget.split(\"/\").join(\"\\\\\"),\n    longProg,\n    shProg = prog && prog.split(\"\\\\\").join(\"/\"),\n    shLongProg,\n    pwshProg = shProg && \"\\\"\" + shProg + \"$exe\\\"\",\n    pwshLongProg;\n  shTarget = shTarget.split(\"\\\\\").join(\"/\");\n  args = args || \"\";\n  variables = variables || \"\";\n  if (!prog) {\n    prog = \"\\\"%dp0%\\\\\" + target + \"\\\"\";\n    shProg = \"\\\"$basedir/\" + shTarget + \"\\\"\";\n    pwshProg = shProg;\n    args = \"\";\n    target = \"\";\n    shTarget = \"\";\n  } else {\n    longProg = \"\\\"%dp0%\\\\\" + prog + \".exe\\\"\";\n    shLongProg = \"\\\"$basedir/\" + prog + \"\\\"\";\n    pwshLongProg = \"\\\"$basedir/\" + prog + \"$exe\\\"\";\n    target = \"\\\"%dp0%\\\\\" + target + \"\\\"\";\n    shTarget = \"\\\"$basedir/\" + shTarget + \"\\\"\";\n  }\n\n  // @SETLOCAL\n  // @CALL :find_dp0\n  //\n  // @IF EXIST \"%dp0%\\node.exe\" (\n  //   @SET \"_prog=%dp0%\\node.exe\"\n  // ) ELSE (\n  //   @SET \"_prog=node\"\n  //   @SET PATHEXT=%PATHEXT:;.JS;=;%\n  // )\n  //\n  // \"%_prog%\" \"%dp0%\\.\\node_modules\\npm\\bin\\npm-cli.js\" %*\n  // @ENDLOCAL\n  // @EXIT /b %errorlevel%\n  //\n  // :find_dp0\n  // SET dp0=%~dp0\n  // EXIT /b\n  //\n  // Subroutine trick to fix https://github.com/npm/cmd-shim/issues/10\n  var head = '@ECHO off\\r\\n' + 'SETLOCAL\\r\\n' + 'CALL :find_dp0\\r\\n';\n  var foot = 'ENDLOCAL\\r\\n' + 'EXIT /b %errorlevel%\\r\\n' + ':find_dp0\\r\\n' + 'SET dp0=%~dp0\\r\\n' + 'EXIT /b\\r\\n';\n  var cmd;\n  if (longProg) {\n    shLongProg = shLongProg.trim();\n    args = args.trim();\n    var variableDeclarationsAsBatch = toBatchSyntax.convertToSetCommands(variables);\n    cmd = head + variableDeclarationsAsBatch + \"\\r\\n\" + \"IF EXIST \" + longProg + \" (\\r\\n\" + \"  SET \\\"_prog=\" + longProg.replace(/(^\")|(\"$)/g, '') + \"\\\"\\r\\n\" + \") ELSE (\\r\\n\" + \"  SET \\\"_prog=\" + prog.replace(/(^\")|(\"$)/g, '') + \"\\\"\\r\\n\" + \"  SET PATHEXT=%PATHEXT:;.JS;=;%\\r\\n\" + \")\\r\\n\" + \"\\r\\n\" + \"\\\"%_prog%\\\" \" + args + \" \" + target + \" %*\\r\\n\" + foot;\n  } else {\n    cmd = head + prog + \" \" + args + \" \" + target + \" %*\\r\\n\" + foot;\n  }\n\n  // #!/bin/sh\n  // basedir=`dirname \"$0\"`\n  //\n  // case `uname` in\n  //     *CYGWIN*|*MINGW*|*MSYS*) basedir=`cygpath -w \"$basedir\"`;;\n  // esac\n  //\n  // if [ -x \"$basedir/node.exe\" ]; then\n  //   \"$basedir/node.exe\" \"$basedir/node_modules/npm/bin/npm-cli.js\" \"$@\"\n  //   ret=$?\n  // else\n  //   node \"$basedir/node_modules/npm/bin/npm-cli.js\" \"$@\"\n  //   ret=$?\n  // fi\n  // exit $ret\n\n  var sh = \"#!/bin/sh\\n\";\n  sh = sh + \"basedir=$(dirname \\\"$(echo \\\"$0\\\" | sed -e 's,\\\\\\\\,/,g')\\\")\\n\" + \"\\n\" + \"case `uname` in\\n\" + \"    *CYGWIN*|*MINGW*|*MSYS*) basedir=`cygpath -w \\\"$basedir\\\"`;;\\n\" + \"esac\\n\" + \"\\n\";\n  if (shLongProg) {\n    sh = sh + \"if [ -x \" + shLongProg + \" ]; then\\n\" + \"  \" + variables + shLongProg + \" \" + args + \" \" + shTarget + \" \\\"$@\\\"\\n\" + \"  ret=$?\\n\" + \"else \\n\" + \"  \" + variables + shProg + \" \" + args + \" \" + shTarget + \" \\\"$@\\\"\\n\" + \"  ret=$?\\n\" + \"fi\\n\" + \"exit $ret\\n\";\n  } else {\n    sh = sh + shProg + \" \" + args + \" \" + shTarget + \" \\\"$@\\\"\\n\" + \"exit $?\\n\";\n  }\n\n  // #!/usr/bin/env pwsh\n  // $basedir=Split-Path $MyInvocation.MyCommand.Definition -Parent\n  //\n  // $ret=0\n  // $exe = \"\"\n  // if ($PSVersionTable.PSVersion -lt \"6.0\" -or $IsWindows) {\n  //   # Fix case when both the Windows and Linux builds of Node\n  //   # are installed in the same directory\n  //   $exe = \".exe\"\n  // }\n  // if (Test-Path \"$basedir/node\") {\n  //   & \"$basedir/node$exe\" \"$basedir/node_modules/npm/bin/npm-cli.js\" $args\n  //   $ret=$LASTEXITCODE\n  // } else {\n  //   & \"node$exe\" \"$basedir/node_modules/npm/bin/npm-cli.js\" $args\n  //   $ret=$LASTEXITCODE\n  // }\n  // exit $ret\n  var pwsh = \"#!/usr/bin/env pwsh\\n\" + \"$basedir=Split-Path $MyInvocation.MyCommand.Definition -Parent\\n\" + \"\\n\" + \"$exe=\\\"\\\"\\n\" + \"if ($PSVersionTable.PSVersion -lt \\\"6.0\\\" -or $IsWindows) {\\n\" + \"  # Fix case when both the Windows and Linux builds of Node\\n\" + \"  # are installed in the same directory\\n\" + \"  $exe=\\\".exe\\\"\\n\" + \"}\\n\";\n  if (shLongProg) {\n    pwsh = pwsh + \"$ret=0\\n\" + \"if (Test-Path \" + pwshLongProg + \") {\\n\" + \"  & \" + pwshLongProg + \" \" + args + \" \" + shTarget + \" $args\\n\" + \"  $ret=$LASTEXITCODE\\n\" + \"} else {\\n\" + \"  & \" + pwshProg + \" \" + args + \" \" + shTarget + \" $args\\n\" + \"  $ret=$LASTEXITCODE\\n\" + \"}\\n\" + \"exit $ret\\n\";\n  } else {\n    pwsh = pwsh + \"& \" + pwshProg + \" \" + args + \" \" + shTarget + \" $args\\n\" + \"exit $LASTEXITCODE\\n\";\n  }\n  var then = times(3, next, cb);\n  fs.writeFile(to + \".ps1\", pwsh, \"utf8\", then);\n  fs.writeFile(to + \".cmd\", cmd, \"utf8\", then);\n  fs.writeFile(to, sh, \"utf8\", then);\n  function next() {\n    chmodShim(to, cb);\n  }\n}\nfunction chmodShim(to, cb) {\n  var then = times(3, cb, cb);\n  fs.chmod(to, \"0755\", then);\n  fs.chmod(to + \".cmd\", \"0755\", then);\n  fs.chmod(to + \".ps1\", \"0755\", then);\n}\nfunction times(n, ok, cb) {\n  var errState = null;\n  return function (er) {\n    if (!errState) {\n      if (er) cb(errState = er);else if (--n === 0) ok();\n    }\n  };\n}","map":{"version":3,"names":["module","exports","cmdShim","ifExists","cmdShimIfExists","fs","require","mkdir","path","toBatchSyntax","shebangExpr","from","to","cb","stat","er","rm","unlink","cmdShim_","then","times","next","writeShim","dirname","readFile","data","writeShim_","firstLine","trim","split","shebang","match","vars","prog","args","variables","shTarget","relative","target","join","longProg","shProg","shLongProg","pwshProg","pwshLongProg","head","foot","cmd","variableDeclarationsAsBatch","convertToSetCommands","replace","sh","pwsh","writeFile","chmodShim","chmod","n","ok","errState"],"sources":["/Users/hkateliev/node_modules/npm/node_modules/cmd-shim/index.js"],"sourcesContent":["// On windows, create a .cmd file.\n// Read the #! in the file to see what it uses.  The vast majority\n// of the time, this will be either:\n// \"#!/usr/bin/env <prog> <args...>\"\n// or:\n// \"#!<prog> <args...>\"\n//\n// Write a binroot/pkg.bin + \".cmd\" file that has this line in it:\n// @<prog> <args...> %dp0%<target> %*\n\nmodule.exports = cmdShim\ncmdShim.ifExists = cmdShimIfExists\n\nvar fs = require(\"graceful-fs\")\n\nvar mkdir = require(\"mkdirp\")\n  , path = require(\"path\")\n  , toBatchSyntax = require(\"./lib/to-batch-syntax\")\n  , shebangExpr = /^#\\!\\s*(?:\\/usr\\/bin\\/env)?\\s*([^ \\t]+=[^ \\t]+\\s+)*\\s*([^ \\t]+)(.*)$/\n\nfunction cmdShimIfExists (from, to, cb) {\n  fs.stat(from, function (er) {\n    if (er) return cb()\n    cmdShim(from, to, cb)\n  })\n}\n\n// Try to unlink, but ignore errors.\n// Any problems will surface later.\nfunction rm (path, cb) {\n  fs.unlink(path, function(er) {\n    cb()\n  })\n}\n\nfunction cmdShim (from, to, cb) {\n  fs.stat(from, function (er, stat) {\n    if (er)\n      return cb(er)\n\n    cmdShim_(from, to, cb)\n  })\n}\n\nfunction cmdShim_ (from, to, cb) {\n  var then = times(3, next, cb)\n  rm(to, then)\n  rm(to + \".cmd\", then)\n  rm(to + \".ps1\", then)\n\n  function next(er) {\n    writeShim(from, to, cb)\n  }\n}\n\nfunction writeShim (from, to, cb) {\n  // make a cmd file and a sh script\n  // First, check if the bin is a #! of some sort.\n  // If not, then assume it's something that'll be compiled, or some other\n  // sort of script, and just call it directly.\n  mkdir(path.dirname(to), function (er) {\n    if (er)\n      return cb(er)\n    fs.readFile(from, \"utf8\", function (er, data) {\n      if (er) return writeShim_(from, to, null, null, null, cb)\n      var firstLine = data.trim().split(/\\r*\\n/)[0]\n        , shebang = firstLine.match(shebangExpr)\n      if (!shebang) return writeShim_(from, to, null, null, null, cb)\n      var vars = shebang[1] || \"\"\n        , prog = shebang[2]\n        , args = shebang[3] || \"\"\n      return writeShim_(from, to, prog, args, vars, cb)\n    })\n  })\n}\n\n\nfunction writeShim_ (from, to, prog, args, variables, cb) {\n  var shTarget = path.relative(path.dirname(to), from)\n    , target = shTarget.split(\"/\").join(\"\\\\\")\n    , longProg\n    , shProg = prog && prog.split(\"\\\\\").join(\"/\")\n    , shLongProg\n    , pwshProg = shProg && \"\\\"\" + shProg + \"$exe\\\"\"\n    , pwshLongProg\n  shTarget = shTarget.split(\"\\\\\").join(\"/\")\n  args = args || \"\"\n  variables = variables || \"\"\n  if (!prog) {\n    prog = \"\\\"%dp0%\\\\\" + target + \"\\\"\"\n    shProg = \"\\\"$basedir/\" + shTarget + \"\\\"\"\n    pwshProg = shProg\n    args = \"\"\n    target = \"\"\n    shTarget = \"\"\n  } else {\n    longProg = \"\\\"%dp0%\\\\\" + prog + \".exe\\\"\"\n    shLongProg = \"\\\"$basedir/\" + prog + \"\\\"\"\n    pwshLongProg = \"\\\"$basedir/\" + prog + \"$exe\\\"\"\n    target = \"\\\"%dp0%\\\\\" + target + \"\\\"\"\n    shTarget = \"\\\"$basedir/\" + shTarget + \"\\\"\"\n  }\n\n  // @SETLOCAL\n  // @CALL :find_dp0\n  //\n  // @IF EXIST \"%dp0%\\node.exe\" (\n  //   @SET \"_prog=%dp0%\\node.exe\"\n  // ) ELSE (\n  //   @SET \"_prog=node\"\n  //   @SET PATHEXT=%PATHEXT:;.JS;=;%\n  // )\n  //\n  // \"%_prog%\" \"%dp0%\\.\\node_modules\\npm\\bin\\npm-cli.js\" %*\n  // @ENDLOCAL\n  // @EXIT /b %errorlevel%\n  //\n  // :find_dp0\n  // SET dp0=%~dp0\n  // EXIT /b\n  //\n  // Subroutine trick to fix https://github.com/npm/cmd-shim/issues/10\n  var head = '@ECHO off\\r\\n' +\n    'SETLOCAL\\r\\n' +\n    'CALL :find_dp0\\r\\n'\n  var foot = 'ENDLOCAL\\r\\n' +\n    'EXIT /b %errorlevel%\\r\\n' +\n    ':find_dp0\\r\\n' +\n    'SET dp0=%~dp0\\r\\n' +\n    'EXIT /b\\r\\n'\n\n  var cmd\n  if (longProg) {\n    shLongProg = shLongProg.trim();\n    args = args.trim();\n    var variableDeclarationsAsBatch = toBatchSyntax.convertToSetCommands(variables)\n    cmd = head\n        + variableDeclarationsAsBatch\n        + \"\\r\\n\"\n        + \"IF EXIST \" + longProg + \" (\\r\\n\"\n        + \"  SET \\\"_prog=\" + longProg.replace(/(^\")|(\"$)/g, '') + \"\\\"\\r\\n\"\n        + \") ELSE (\\r\\n\"\n        + \"  SET \\\"_prog=\" + prog.replace(/(^\")|(\"$)/g, '') + \"\\\"\\r\\n\"\n        + \"  SET PATHEXT=%PATHEXT:;.JS;=;%\\r\\n\"\n        + \")\\r\\n\"\n        + \"\\r\\n\"\n        +  \"\\\"%_prog%\\\" \" + args + \" \" + target + \" %*\\r\\n\"\n        + foot\n  } else {\n    cmd = head + prog + \" \" + args + \" \" + target + \" %*\\r\\n\" + foot\n  }\n\n  // #!/bin/sh\n  // basedir=`dirname \"$0\"`\n  //\n  // case `uname` in\n  //     *CYGWIN*|*MINGW*|*MSYS*) basedir=`cygpath -w \"$basedir\"`;;\n  // esac\n  //\n  // if [ -x \"$basedir/node.exe\" ]; then\n  //   \"$basedir/node.exe\" \"$basedir/node_modules/npm/bin/npm-cli.js\" \"$@\"\n  //   ret=$?\n  // else\n  //   node \"$basedir/node_modules/npm/bin/npm-cli.js\" \"$@\"\n  //   ret=$?\n  // fi\n  // exit $ret\n\n  var sh = \"#!/bin/sh\\n\"\n\n  sh = sh\n      + \"basedir=$(dirname \\\"$(echo \\\"$0\\\" | sed -e 's,\\\\\\\\,/,g')\\\")\\n\"\n      + \"\\n\"\n      + \"case `uname` in\\n\"\n      + \"    *CYGWIN*|*MINGW*|*MSYS*) basedir=`cygpath -w \\\"$basedir\\\"`;;\\n\"\n      + \"esac\\n\"\n      + \"\\n\"\n\n  if (shLongProg) {\n    sh = sh\n       + \"if [ -x \"+shLongProg+\" ]; then\\n\"\n       + \"  \" + variables + shLongProg + \" \" + args + \" \" + shTarget + \" \\\"$@\\\"\\n\"\n       + \"  ret=$?\\n\"\n       + \"else \\n\"\n       + \"  \" + variables + shProg + \" \" + args + \" \" + shTarget + \" \\\"$@\\\"\\n\"\n       + \"  ret=$?\\n\"\n       + \"fi\\n\"\n       + \"exit $ret\\n\"\n  } else {\n    sh = sh\n       + shProg + \" \" + args + \" \" + shTarget + \" \\\"$@\\\"\\n\"\n       + \"exit $?\\n\"\n  }\n\n  // #!/usr/bin/env pwsh\n  // $basedir=Split-Path $MyInvocation.MyCommand.Definition -Parent\n  //\n  // $ret=0\n  // $exe = \"\"\n  // if ($PSVersionTable.PSVersion -lt \"6.0\" -or $IsWindows) {\n  //   # Fix case when both the Windows and Linux builds of Node\n  //   # are installed in the same directory\n  //   $exe = \".exe\"\n  // }\n  // if (Test-Path \"$basedir/node\") {\n  //   & \"$basedir/node$exe\" \"$basedir/node_modules/npm/bin/npm-cli.js\" $args\n  //   $ret=$LASTEXITCODE\n  // } else {\n  //   & \"node$exe\" \"$basedir/node_modules/npm/bin/npm-cli.js\" $args\n  //   $ret=$LASTEXITCODE\n  // }\n  // exit $ret\n  var pwsh = \"#!/usr/bin/env pwsh\\n\"\n           + \"$basedir=Split-Path $MyInvocation.MyCommand.Definition -Parent\\n\"\n           + \"\\n\"\n           + \"$exe=\\\"\\\"\\n\"\n           + \"if ($PSVersionTable.PSVersion -lt \\\"6.0\\\" -or $IsWindows) {\\n\"\n           + \"  # Fix case when both the Windows and Linux builds of Node\\n\"\n           + \"  # are installed in the same directory\\n\"\n           + \"  $exe=\\\".exe\\\"\\n\"\n           + \"}\\n\"\n  if (shLongProg) {\n    pwsh = pwsh\n         + \"$ret=0\\n\"\n         + \"if (Test-Path \" + pwshLongProg + \") {\\n\"\n         + \"  & \" + pwshLongProg + \" \" + args + \" \" + shTarget + \" $args\\n\"\n         + \"  $ret=$LASTEXITCODE\\n\"\n         + \"} else {\\n\"\n         + \"  & \" + pwshProg + \" \" + args + \" \" + shTarget + \" $args\\n\"\n         + \"  $ret=$LASTEXITCODE\\n\"\n         + \"}\\n\"\n         + \"exit $ret\\n\"\n  } else {\n    pwsh = pwsh\n         + \"& \" + pwshProg + \" \" + args + \" \" + shTarget + \" $args\\n\"\n         + \"exit $LASTEXITCODE\\n\"\n  }\n\n  var then = times(3, next, cb)\n  fs.writeFile(to + \".ps1\", pwsh, \"utf8\", then)\n  fs.writeFile(to + \".cmd\", cmd, \"utf8\", then)\n  fs.writeFile(to, sh, \"utf8\", then)\n  function next () {\n    chmodShim(to, cb)\n  }\n}\n\nfunction chmodShim (to, cb) {\n  var then = times(3, cb, cb)\n  fs.chmod(to, \"0755\", then)\n  fs.chmod(to + \".cmd\", \"0755\", then)\n  fs.chmod(to + \".ps1\", \"0755\", then)\n}\n\nfunction times(n, ok, cb) {\n  var errState = null\n  return function(er) {\n    if (!errState) {\n      if (er)\n        cb(errState = er)\n      else if (--n === 0)\n        ok()\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}