{"ast":null,"code":"'use strict';\n\n/**\n * request.js\n *\n * Request class contains server only options\n */\nconst url = require('url');\nconst Headers = require('./headers.js');\nconst Body = require('./body.js');\nconst clone = Body.clone;\nconst extractContentType = Body.extractContentType;\nconst getTotalBytes = Body.getTotalBytes;\nconst PARSED_URL = Symbol('url');\n\n/**\n * Request class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nclass Request {\n  constructor(input, init) {\n    if (!init) init = {};\n    let parsedURL;\n\n    // normalize input\n    if (!(input instanceof Request)) {\n      if (input && input.href) {\n        // in order to support Node.js' Url objects; though WHATWG's URL objects\n        // will fall into this branch also (since their `toString()` will return\n        // `href` property anyway)\n        parsedURL = url.parse(input.href);\n      } else {\n        // coerce input to a string before attempting to parse\n        parsedURL = url.parse(`${input}`);\n      }\n      input = {};\n    } else {\n      parsedURL = url.parse(input.url);\n    }\n    let method = init.method || input.method || 'GET';\n    if ((init.body != null || input instanceof Request && input.body !== null) && (method === 'GET' || method === 'HEAD')) {\n      throw new TypeError('Request with GET/HEAD method cannot have body');\n    }\n    let inputBody = init.body != null ? init.body : input instanceof Request && input.body !== null ? clone(input) : null;\n    Body.call(this, inputBody, {\n      timeout: init.timeout || input.timeout || 0,\n      size: init.size || input.size || 0\n    });\n\n    // fetch spec options\n    this.method = method.toUpperCase();\n    this.redirect = init.redirect || input.redirect || 'follow';\n    this.headers = new Headers(init.headers || input.headers || {});\n    if (init.body != null) {\n      const contentType = extractContentType(this);\n      if (contentType !== null && !this.headers.has('Content-Type')) {\n        this.headers.append('Content-Type', contentType);\n      }\n    }\n\n    // server only options\n    this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;\n    this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;\n    this.counter = init.counter || input.counter || 0;\n    this.agent = init.agent || input.agent;\n    this[PARSED_URL] = parsedURL;\n    Object.defineProperty(this, Symbol.toStringTag, {\n      value: 'Request',\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  get url() {\n    return url.format(this[PARSED_URL]);\n  }\n\n  /**\n   * Clone this request\n   *\n   * @return  Request\n   */\n  clone() {\n    return new Request(this);\n  }\n}\nBody.mixIn(Request.prototype);\nObject.defineProperty(Request.prototype, Symbol.toStringTag, {\n  value: 'RequestPrototype',\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nexports = module.exports = Request;\nexports.getNodeRequestOptions = function getNodeRequestOptions(request) {\n  const parsedURL = request[PARSED_URL];\n  const headers = new Headers(request.headers);\n\n  // fetch step 3\n  if (!headers.has('Accept')) {\n    headers.set('Accept', '*/*');\n  }\n\n  // Basic fetch\n  if (!parsedURL.protocol || !parsedURL.hostname) {\n    throw new TypeError('Only absolute URLs are supported');\n  }\n  if (!/^https?:$/.test(parsedURL.protocol)) {\n    throw new TypeError('Only HTTP(S) protocols are supported');\n  }\n\n  // HTTP-network-or-cache fetch steps 5-9\n  let contentLengthValue = null;\n  if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {\n    contentLengthValue = '0';\n  }\n  if (request.body != null) {\n    const totalBytes = getTotalBytes(request);\n    if (typeof totalBytes === 'number') {\n      contentLengthValue = String(totalBytes);\n    }\n  }\n  if (contentLengthValue) {\n    headers.set('Content-Length', contentLengthValue);\n  }\n\n  // HTTP-network-or-cache fetch step 12\n  if (!headers.has('User-Agent')) {\n    headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');\n  }\n\n  // HTTP-network-or-cache fetch step 16\n  if (request.compress) {\n    headers.set('Accept-Encoding', 'gzip,deflate');\n  }\n  if (!headers.has('Connection') && !request.agent) {\n    headers.set('Connection', 'close');\n  }\n\n  // HTTP-network fetch step 4\n  // chunked encoding is handled by Node.js\n\n  return Object.assign({}, parsedURL, {\n    method: request.method,\n    headers: headers.raw(),\n    agent: request.agent\n  });\n};","map":{"version":3,"names":["url","require","Headers","Body","clone","extractContentType","getTotalBytes","PARSED_URL","Symbol","Request","constructor","input","init","parsedURL","href","parse","method","body","TypeError","inputBody","call","timeout","size","toUpperCase","redirect","headers","contentType","has","append","follow","undefined","compress","counter","agent","Object","defineProperty","toStringTag","value","writable","enumerable","configurable","format","mixIn","prototype","exports","module","getNodeRequestOptions","request","set","protocol","hostname","test","contentLengthValue","totalBytes","String","assign","raw"],"sources":["/Users/hkateliev/node_modules/npm/node_modules/node-fetch-npm/src/request.js"],"sourcesContent":["'use strict'\n\n/**\n * request.js\n *\n * Request class contains server only options\n */\n\nconst url = require('url')\nconst Headers = require('./headers.js')\nconst Body = require('./body.js')\nconst clone = Body.clone\nconst extractContentType = Body.extractContentType\nconst getTotalBytes = Body.getTotalBytes\n\nconst PARSED_URL = Symbol('url')\n\n/**\n * Request class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nclass Request {\n  constructor (input, init) {\n    if (!init) init = {}\n    let parsedURL\n\n    // normalize input\n    if (!(input instanceof Request)) {\n      if (input && input.href) {\n        // in order to support Node.js' Url objects; though WHATWG's URL objects\n        // will fall into this branch also (since their `toString()` will return\n        // `href` property anyway)\n        parsedURL = url.parse(input.href)\n      } else {\n        // coerce input to a string before attempting to parse\n        parsedURL = url.parse(`${input}`)\n      }\n      input = {}\n    } else {\n      parsedURL = url.parse(input.url)\n    }\n\n    let method = init.method || input.method || 'GET'\n\n    if ((init.body != null || (input instanceof Request && input.body !== null)) &&\n      (method === 'GET' || method === 'HEAD')) {\n      throw new TypeError('Request with GET/HEAD method cannot have body')\n    }\n\n    let inputBody = init.body != null\n      ? init.body\n      : input instanceof Request && input.body !== null\n        ? clone(input)\n        : null\n\n    Body.call(this, inputBody, {\n      timeout: init.timeout || input.timeout || 0,\n      size: init.size || input.size || 0\n    })\n\n    // fetch spec options\n    this.method = method.toUpperCase()\n    this.redirect = init.redirect || input.redirect || 'follow'\n    this.headers = new Headers(init.headers || input.headers || {})\n\n    if (init.body != null) {\n      const contentType = extractContentType(this)\n      if (contentType !== null && !this.headers.has('Content-Type')) {\n        this.headers.append('Content-Type', contentType)\n      }\n    }\n\n    // server only options\n    this.follow = init.follow !== undefined\n      ? init.follow : input.follow !== undefined\n      ? input.follow : 20\n    this.compress = init.compress !== undefined\n      ? init.compress : input.compress !== undefined\n      ? input.compress : true\n    this.counter = init.counter || input.counter || 0\n    this.agent = init.agent || input.agent\n\n    this[PARSED_URL] = parsedURL\n    Object.defineProperty(this, Symbol.toStringTag, {\n      value: 'Request',\n      writable: false,\n      enumerable: false,\n      configurable: true\n    })\n  }\n\n  get url () {\n    return url.format(this[PARSED_URL])\n  }\n\n  /**\n   * Clone this request\n   *\n   * @return  Request\n   */\n  clone () {\n    return new Request(this)\n  }\n}\n\nBody.mixIn(Request.prototype)\n\nObject.defineProperty(Request.prototype, Symbol.toStringTag, {\n  value: 'RequestPrototype',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\nexports = module.exports = Request\n\nexports.getNodeRequestOptions = function getNodeRequestOptions (request) {\n  const parsedURL = request[PARSED_URL]\n  const headers = new Headers(request.headers)\n\n  // fetch step 3\n  if (!headers.has('Accept')) {\n    headers.set('Accept', '*/*')\n  }\n\n  // Basic fetch\n  if (!parsedURL.protocol || !parsedURL.hostname) {\n    throw new TypeError('Only absolute URLs are supported')\n  }\n\n  if (!/^https?:$/.test(parsedURL.protocol)) {\n    throw new TypeError('Only HTTP(S) protocols are supported')\n  }\n\n  // HTTP-network-or-cache fetch steps 5-9\n  let contentLengthValue = null\n  if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {\n    contentLengthValue = '0'\n  }\n  if (request.body != null) {\n    const totalBytes = getTotalBytes(request)\n    if (typeof totalBytes === 'number') {\n      contentLengthValue = String(totalBytes)\n    }\n  }\n  if (contentLengthValue) {\n    headers.set('Content-Length', contentLengthValue)\n  }\n\n  // HTTP-network-or-cache fetch step 12\n  if (!headers.has('User-Agent')) {\n    headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)')\n  }\n\n  // HTTP-network-or-cache fetch step 16\n  if (request.compress) {\n    headers.set('Accept-Encoding', 'gzip,deflate')\n  }\n  if (!headers.has('Connection') && !request.agent) {\n    headers.set('Connection', 'close')\n  }\n\n  // HTTP-network fetch step 4\n  // chunked encoding is handled by Node.js\n\n  return Object.assign({}, parsedURL, {\n    method: request.method,\n    headers: headers.raw(),\n    agent: request.agent\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}