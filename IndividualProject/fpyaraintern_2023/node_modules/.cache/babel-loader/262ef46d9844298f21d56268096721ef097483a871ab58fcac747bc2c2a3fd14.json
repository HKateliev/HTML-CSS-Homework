{"ast":null,"code":"'use strict';\n\n// the PEND/UNPEND stuff tracks whether we're ready to emit end/close yet.\n// but the path reservations are required to avoid race conditions where\n// parallelized unpack ops may mess with one another, due to dependencies\n// (like a Link depending on its target) or destructive operations (like\n// clobbering an fs object to create one of a different type.)\nconst assert = require('assert');\nconst EE = require('events').EventEmitter;\nconst Parser = require('./parse.js');\nconst fs = require('fs');\nconst fsm = require('fs-minipass');\nconst path = require('path');\nconst mkdir = require('./mkdir.js');\nconst mkdirSync = mkdir.sync;\nconst wc = require('./winchars.js');\nconst stripAbsolutePath = require('./strip-absolute-path.js');\nconst pathReservations = require('./path-reservations.js');\nconst normPath = require('./normalize-windows-path.js');\nconst stripSlash = require('./strip-trailing-slashes.js');\nconst ONENTRY = Symbol('onEntry');\nconst CHECKFS = Symbol('checkFs');\nconst CHECKFS2 = Symbol('checkFs2');\nconst PRUNECACHE = Symbol('pruneCache');\nconst ISREUSABLE = Symbol('isReusable');\nconst MAKEFS = Symbol('makeFs');\nconst FILE = Symbol('file');\nconst DIRECTORY = Symbol('directory');\nconst LINK = Symbol('link');\nconst SYMLINK = Symbol('symlink');\nconst HARDLINK = Symbol('hardlink');\nconst UNSUPPORTED = Symbol('unsupported');\nconst UNKNOWN = Symbol('unknown');\nconst CHECKPATH = Symbol('checkPath');\nconst MKDIR = Symbol('mkdir');\nconst ONERROR = Symbol('onError');\nconst PENDING = Symbol('pending');\nconst PEND = Symbol('pend');\nconst UNPEND = Symbol('unpend');\nconst ENDED = Symbol('ended');\nconst MAYBECLOSE = Symbol('maybeClose');\nconst SKIP = Symbol('skip');\nconst DOCHOWN = Symbol('doChown');\nconst UID = Symbol('uid');\nconst GID = Symbol('gid');\nconst CHECKED_CWD = Symbol('checkedCwd');\nconst crypto = require('crypto');\nconst platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform;\nconst isWindows = platform === 'win32';\n\n// Unlinks on Windows are not atomic.\n//\n// This means that if you have a file entry, followed by another\n// file entry with an identical name, and you cannot re-use the file\n// (because it's a hardlink, or because unlink:true is set, or it's\n// Windows, which does not have useful nlink values), then the unlink\n// will be committed to the disk AFTER the new file has been written\n// over the old one, deleting the new file.\n//\n// To work around this, on Windows systems, we rename the file and then\n// delete the renamed file.  It's a sloppy kludge, but frankly, I do not\n// know of a better way to do this, given windows' non-atomic unlink\n// semantics.\n//\n// See: https://github.com/npm/node-tar/issues/183\n/* istanbul ignore next */\nconst unlinkFile = (path, cb) => {\n  if (!isWindows) return fs.unlink(path, cb);\n  const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex');\n  fs.rename(path, name, er => {\n    if (er) return cb(er);\n    fs.unlink(name, cb);\n  });\n};\n\n/* istanbul ignore next */\nconst unlinkFileSync = path => {\n  if (!isWindows) return fs.unlinkSync(path);\n  const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex');\n  fs.renameSync(path, name);\n  fs.unlinkSync(name);\n};\n\n// this.gid, entry.gid, this.processUid\nconst uint32 = (a, b, c) => a === a >>> 0 ? a : b === b >>> 0 ? b : c;\n\n// clear the cache if it's a case-insensitive unicode-squashing match.\n// we can't know if the current file system is case-sensitive or supports\n// unicode fully, so we check for similarity on the maximally compatible\n// representation.  Err on the side of pruning, since all it's doing is\n// preventing lstats, and it's not the end of the world if we get a false\n// positive.\n// Note that on windows, we always drop the entire cache whenever a\n// symbolic link is encountered, because 8.3 filenames are impossible\n// to reason about, and collisions are hazards rather than just failures.\nconst cacheKeyNormalize = path => stripSlash(normPath(path)).normalize('NFKD').toLowerCase();\nconst pruneCache = (cache, abs) => {\n  abs = cacheKeyNormalize(abs);\n  for (const path of cache.keys()) {\n    const pnorm = cacheKeyNormalize(path);\n    if (pnorm === abs || pnorm.indexOf(abs + '/') === 0) cache.delete(path);\n  }\n};\nconst dropCache = cache => {\n  for (const key of cache.keys()) cache.delete(key);\n};\nclass Unpack extends Parser {\n  constructor(opt) {\n    if (!opt) opt = {};\n    opt.ondone = _ => {\n      this[ENDED] = true;\n      this[MAYBECLOSE]();\n    };\n    super(opt);\n    this[CHECKED_CWD] = false;\n    this.reservations = pathReservations();\n    this.transform = typeof opt.transform === 'function' ? opt.transform : null;\n    this.writable = true;\n    this.readable = false;\n    this[PENDING] = 0;\n    this[ENDED] = false;\n    this.dirCache = opt.dirCache || new Map();\n    if (typeof opt.uid === 'number' || typeof opt.gid === 'number') {\n      // need both or neither\n      if (typeof opt.uid !== 'number' || typeof opt.gid !== 'number') throw new TypeError('cannot set owner without number uid and gid');\n      if (opt.preserveOwner) throw new TypeError('cannot preserve owner in archive and also set owner explicitly');\n      this.uid = opt.uid;\n      this.gid = opt.gid;\n      this.setOwner = true;\n    } else {\n      this.uid = null;\n      this.gid = null;\n      this.setOwner = false;\n    }\n\n    // default true for root\n    if (opt.preserveOwner === undefined && typeof opt.uid !== 'number') this.preserveOwner = process.getuid && process.getuid() === 0;else this.preserveOwner = !!opt.preserveOwner;\n    this.processUid = (this.preserveOwner || this.setOwner) && process.getuid ? process.getuid() : null;\n    this.processGid = (this.preserveOwner || this.setOwner) && process.getgid ? process.getgid() : null;\n\n    // mostly just for testing, but useful in some cases.\n    // Forcibly trigger a chown on every entry, no matter what\n    this.forceChown = opt.forceChown === true;\n\n    // turn ><?| in filenames into 0xf000-higher encoded forms\n    this.win32 = !!opt.win32 || isWindows;\n\n    // do not unpack over files that are newer than what's in the archive\n    this.newer = !!opt.newer;\n\n    // do not unpack over ANY files\n    this.keep = !!opt.keep;\n\n    // do not set mtime/atime of extracted entries\n    this.noMtime = !!opt.noMtime;\n\n    // allow .., absolute path entries, and unpacking through symlinks\n    // without this, warn and skip .., relativize absolutes, and error\n    // on symlinks in extraction path\n    this.preservePaths = !!opt.preservePaths;\n\n    // unlink files and links before writing. This breaks existing hard\n    // links, and removes symlink directories rather than erroring\n    this.unlink = !!opt.unlink;\n    this.cwd = normPath(path.resolve(opt.cwd || process.cwd()));\n    this.strip = +opt.strip || 0;\n    this.processUmask = process.umask();\n    this.umask = typeof opt.umask === 'number' ? opt.umask : this.processUmask;\n    // default mode for dirs created as parents\n    this.dmode = opt.dmode || 0o0777 & ~this.umask;\n    this.fmode = opt.fmode || 0o0666 & ~this.umask;\n    this.on('entry', entry => this[ONENTRY](entry));\n  }\n  [MAYBECLOSE]() {\n    if (this[ENDED] && this[PENDING] === 0) {\n      this.emit('prefinish');\n      this.emit('finish');\n      this.emit('end');\n      this.emit('close');\n    }\n  }\n  [CHECKPATH](entry) {\n    if (this.strip) {\n      const parts = normPath(entry.path).split('/');\n      if (parts.length < this.strip) return false;\n      entry.path = parts.slice(this.strip).join('/');\n      if (entry.type === 'Link') {\n        const linkparts = normPath(entry.linkpath).split('/');\n        if (linkparts.length >= this.strip) entry.linkpath = linkparts.slice(this.strip).join('/');else return false;\n      }\n    }\n    if (!this.preservePaths) {\n      const p = normPath(entry.path);\n      const parts = p.split('/');\n      if (parts.includes('..') || isWindows && /^[a-z]:\\.\\.$/i.test(parts[0])) {\n        this.warn(`path contains '..'`, p);\n        return false;\n      }\n\n      // strip off the root\n      const s = stripAbsolutePath(p);\n      if (s[0]) {\n        entry.path = s[1];\n        this.warn(`stripping ${s[0]} from absolute path`, p);\n      }\n    }\n    if (path.isAbsolute(entry.path)) entry.absolute = normPath(path.resolve(entry.path));else entry.absolute = normPath(path.resolve(this.cwd, entry.path));\n\n    // if we somehow ended up with a path that escapes the cwd, and we are\n    // not in preservePaths mode, then something is fishy!  This should have\n    // been prevented above, so ignore this for coverage.\n    /* istanbul ignore if - defense in depth */\n    if (!this.preservePaths && entry.absolute.indexOf(this.cwd + '/') !== 0 && entry.absolute !== this.cwd) {\n      this.warn('TAR_ENTRY_ERROR', 'path escaped extraction target', {\n        entry,\n        path: normPath(entry.path),\n        resolvedPath: entry.absolute,\n        cwd: this.cwd\n      });\n      return false;\n    }\n\n    // an archive can set properties on the extraction directory, but it\n    // may not replace the cwd with a different kind of thing entirely.\n    if (entry.absolute === this.cwd && entry.type !== 'Directory' && entry.type !== 'GNUDumpDir') return false;\n\n    // only encode : chars that aren't drive letter indicators\n    if (this.win32) {\n      const {\n        root: aRoot\n      } = path.win32.parse(entry.absolute);\n      entry.absolute = aRoot + wc.encode(entry.absolute.substr(aRoot.length));\n      const {\n        root: pRoot\n      } = path.win32.parse(entry.path);\n      entry.path = pRoot + wc.encode(entry.path.substr(pRoot.length));\n    }\n    return true;\n  }\n  [ONENTRY](entry) {\n    if (!this[CHECKPATH](entry)) return entry.resume();\n    assert.equal(typeof entry.absolute, 'string');\n    switch (entry.type) {\n      case 'Directory':\n      case 'GNUDumpDir':\n        if (entry.mode) entry.mode = entry.mode | 0o700;\n      case 'File':\n      case 'OldFile':\n      case 'ContiguousFile':\n      case 'Link':\n      case 'SymbolicLink':\n        return this[CHECKFS](entry);\n      case 'CharacterDevice':\n      case 'BlockDevice':\n      case 'FIFO':\n        return this[UNSUPPORTED](entry);\n    }\n  }\n  [ONERROR](er, entry) {\n    // Cwd has to exist, or else nothing works. That's serious.\n    // Other errors are warnings, which raise the error in strict\n    // mode, but otherwise continue on.\n    if (er.name === 'CwdError') this.emit('error', er);else {\n      this.warn(er.message, er);\n      this[UNPEND]();\n      entry.resume();\n    }\n  }\n  [MKDIR](dir, mode, cb) {\n    mkdir(normPath(dir), {\n      uid: this.uid,\n      gid: this.gid,\n      processUid: this.processUid,\n      processGid: this.processGid,\n      umask: this.processUmask,\n      preserve: this.preservePaths,\n      unlink: this.unlink,\n      cache: this.dirCache,\n      cwd: this.cwd,\n      mode: mode\n    }, cb);\n  }\n  [DOCHOWN](entry) {\n    // in preserve owner mode, chown if the entry doesn't match process\n    // in set owner mode, chown if setting doesn't match process\n    return this.forceChown || this.preserveOwner && (typeof entry.uid === 'number' && entry.uid !== this.processUid || typeof entry.gid === 'number' && entry.gid !== this.processGid) || typeof this.uid === 'number' && this.uid !== this.processUid || typeof this.gid === 'number' && this.gid !== this.processGid;\n  }\n  [UID](entry) {\n    return uint32(this.uid, entry.uid, this.processUid);\n  }\n  [GID](entry) {\n    return uint32(this.gid, entry.gid, this.processGid);\n  }\n  [FILE](entry, fullyDone) {\n    const mode = entry.mode & 0o7777 || this.fmode;\n    const stream = new fsm.WriteStream(entry.absolute, {\n      mode: mode,\n      autoClose: false\n    });\n    stream.on('error', er => {\n      if (stream.fd) fs.close(stream.fd, () => {});\n\n      // flush all the data out so that we aren't left hanging\n      // if the error wasn't actually fatal.  otherwise the parse\n      // is blocked, and we never proceed.\n      /* istanbul ignore next */\n      stream.write = () => true;\n      this[ONERROR](er, entry);\n      fullyDone();\n    });\n    let actions = 1;\n    const done = er => {\n      if (er) {\n        /* istanbul ignore else - we should always have a fd by now */\n        if (stream.fd) fs.close(stream.fd, () => {});\n        this[ONERROR](er, entry);\n        fullyDone();\n        return;\n      }\n      if (--actions === 0) {\n        fs.close(stream.fd, er => {\n          fullyDone();\n          /* istanbul ignore next */\n          er ? this[ONERROR](er, entry) : this[UNPEND]();\n        });\n      }\n    };\n    stream.on('finish', _ => {\n      // if futimes fails, try utimes\n      // if utimes fails, fail with the original error\n      // same for fchown/chown\n      const abs = entry.absolute;\n      const fd = stream.fd;\n      if (entry.mtime && !this.noMtime) {\n        actions++;\n        const atime = entry.atime || new Date();\n        const mtime = entry.mtime;\n        fs.futimes(fd, atime, mtime, er => er ? fs.utimes(abs, atime, mtime, er2 => done(er2 && er)) : done());\n      }\n      if (this[DOCHOWN](entry)) {\n        actions++;\n        const uid = this[UID](entry);\n        const gid = this[GID](entry);\n        fs.fchown(fd, uid, gid, er => er ? fs.chown(abs, uid, gid, er2 => done(er2 && er)) : done());\n      }\n      done();\n    });\n    const tx = this.transform ? this.transform(entry) || entry : entry;\n    if (tx !== entry) {\n      tx.on('error', er => this[ONERROR](er, entry));\n      entry.pipe(tx);\n    }\n    tx.pipe(stream);\n  }\n  [DIRECTORY](entry, fullyDone) {\n    const mode = entry.mode & 0o7777 || this.dmode;\n    this[MKDIR](entry.absolute, mode, er => {\n      if (er) {\n        fullyDone();\n        return this[ONERROR](er, entry);\n      }\n      let actions = 1;\n      const done = _ => {\n        if (--actions === 0) {\n          fullyDone();\n          this[UNPEND]();\n          entry.resume();\n        }\n      };\n      if (entry.mtime && !this.noMtime) {\n        actions++;\n        fs.utimes(entry.absolute, entry.atime || new Date(), entry.mtime, done);\n      }\n      if (this[DOCHOWN](entry)) {\n        actions++;\n        fs.chown(entry.absolute, this[UID](entry), this[GID](entry), done);\n      }\n      done();\n    });\n  }\n  [UNSUPPORTED](entry) {\n    this.warn('unsupported entry type: ' + entry.type, entry);\n    entry.resume();\n  }\n  [SYMLINK](entry, done) {\n    this[LINK](entry, entry.linkpath, 'symlink', done);\n  }\n  [HARDLINK](entry, done) {\n    const linkpath = normPath(path.resolve(this.cwd, entry.linkpath));\n    this[LINK](entry, linkpath, 'link', done);\n  }\n  [PEND]() {\n    this[PENDING]++;\n  }\n  [UNPEND]() {\n    this[PENDING]--;\n    this[MAYBECLOSE]();\n  }\n  [SKIP](entry) {\n    this[UNPEND]();\n    entry.resume();\n  }\n\n  // Check if we can reuse an existing filesystem entry safely and\n  // overwrite it, rather than unlinking and recreating\n  // Windows doesn't report a useful nlink, so we just never reuse entries\n  [ISREUSABLE](entry, st) {\n    return entry.type === 'File' && !this.unlink && st.isFile() && st.nlink <= 1 && !isWindows;\n  }\n\n  // check if a thing is there, and if so, try to clobber it\n  [CHECKFS](entry) {\n    this[PEND]();\n    const paths = [entry.path];\n    if (entry.linkpath) paths.push(entry.linkpath);\n    this.reservations.reserve(paths, done => this[CHECKFS2](entry, done));\n  }\n  [PRUNECACHE](entry) {\n    // if we are not creating a directory, and the path is in the dirCache,\n    // then that means we are about to delete the directory we created\n    // previously, and it is no longer going to be a directory, and neither\n    // is any of its children.\n    // If a symbolic link is encountered, all bets are off.  There is no\n    // reasonable way to sanitize the cache in such a way we will be able to\n    // avoid having filesystem collisions.  If this happens with a non-symlink\n    // entry, it'll just fail to unpack, but a symlink to a directory, using an\n    // 8.3 shortname or certain unicode attacks, can evade detection and lead\n    // to arbitrary writes to anywhere on the system.\n    if (entry.type === 'SymbolicLink') dropCache(this.dirCache);else if (entry.type !== 'Directory') pruneCache(this.dirCache, entry.absolute);\n  }\n  [CHECKFS2](entry, fullyDone) {\n    this[PRUNECACHE](entry);\n    const done = er => {\n      this[PRUNECACHE](entry);\n      fullyDone(er);\n    };\n    const checkCwd = () => {\n      this[MKDIR](this.cwd, this.dmode, er => {\n        if (er) {\n          this[ONERROR](er, entry);\n          done();\n          return;\n        }\n        this[CHECKED_CWD] = true;\n        start();\n      });\n    };\n    const start = () => {\n      if (entry.absolute !== this.cwd) {\n        const parent = normPath(path.dirname(entry.absolute));\n        if (parent !== this.cwd) {\n          return this[MKDIR](parent, this.dmode, er => {\n            if (er) {\n              this[ONERROR](er, entry);\n              done();\n              return;\n            }\n            afterMakeParent();\n          });\n        }\n      }\n      afterMakeParent();\n    };\n    const afterMakeParent = () => {\n      fs.lstat(entry.absolute, (lstatEr, st) => {\n        if (st && (this.keep || this.newer && st.mtime > entry.mtime)) {\n          this[SKIP](entry);\n          done();\n          return;\n        }\n        if (lstatEr || this[ISREUSABLE](entry, st)) return this[MAKEFS](null, entry, done);\n        if (st.isDirectory()) {\n          if (entry.type === 'Directory') {\n            const needChmod = !this.noChmod && entry.mode && (st.mode & 0o7777) !== entry.mode;\n            const afterChmod = er => this[MAKEFS](er, entry, done);\n            if (!needChmod) return afterChmod();\n            return fs.chmod(entry.absolute, entry.mode, afterChmod);\n          }\n          // Not a dir entry, have to remove it.\n          // NB: the only way to end up with an entry that is the cwd\n          // itself, in such a way that == does not detect, is a\n          // tricky windows absolute path with UNC or 8.3 parts (and\n          // preservePaths:true, or else it will have been stripped).\n          // In that case, the user has opted out of path protections\n          // explicitly, so if they blow away the cwd, c'est la vie.\n          if (entry.absolute !== this.cwd) {\n            return fs.rmdir(entry.absolute, er => this[MAKEFS](er, entry, done));\n          }\n        }\n\n        // not a dir, and not reusable\n        // don't remove if the cwd, we want that error\n        if (entry.absolute === this.cwd) return this[MAKEFS](null, entry, done);\n        unlinkFile(entry.absolute, er => this[MAKEFS](er, entry, done));\n      });\n    };\n    if (this[CHECKED_CWD]) start();else checkCwd();\n  }\n  [MAKEFS](er, entry, done) {\n    if (er) return this[ONERROR](er, entry);\n    switch (entry.type) {\n      case 'File':\n      case 'OldFile':\n      case 'ContiguousFile':\n        return this[FILE](entry, done);\n      case 'Link':\n        return this[HARDLINK](entry, done);\n      case 'SymbolicLink':\n        return this[SYMLINK](entry, done);\n      case 'Directory':\n      case 'GNUDumpDir':\n        return this[DIRECTORY](entry, done);\n    }\n  }\n  [LINK](entry, linkpath, link, done) {\n    // XXX: get the type ('symlink' or 'junction') for windows\n    fs[link](linkpath, entry.absolute, er => {\n      if (er) return this[ONERROR](er, entry);\n      done();\n      this[UNPEND]();\n      entry.resume();\n    });\n  }\n}\nconst callSync = fn => {\n  try {\n    return [null, fn()];\n  } catch (er) {\n    return [er, null];\n  }\n};\nclass UnpackSync extends Unpack {\n  [MAKEFS](er, entry) {\n    return super[MAKEFS](er, entry, /* istanbul ignore next */() => {});\n  }\n  [CHECKFS](entry) {\n    this[PRUNECACHE](entry);\n    if (!this[CHECKED_CWD]) {\n      const er = this[MKDIR](this.cwd, this.dmode);\n      if (er) return this[ONERROR](er, entry);\n      this[CHECKED_CWD] = true;\n    }\n\n    // don't bother to make the parent if the current entry is the cwd,\n    // we've already checked it.\n    if (entry.absolute !== this.cwd) {\n      const parent = normPath(path.dirname(entry.absolute));\n      if (parent !== this.cwd) {\n        const mkParent = this[MKDIR](parent, this.dmode);\n        if (mkParent) return this[ONERROR](mkParent, entry);\n      }\n    }\n    const [lstatEr, st] = callSync(() => fs.lstatSync(entry.absolute));\n    if (st && (this.keep || this.newer && st.mtime > entry.mtime)) return this[SKIP](entry);\n    if (lstatEr || this[ISREUSABLE](entry, st)) return this[MAKEFS](null, entry);\n    if (st.isDirectory()) {\n      if (entry.type === 'Directory') {\n        const needChmod = !this.noChmod && entry.mode && (st.mode & 0o7777) !== entry.mode;\n        const [er] = needChmod ? callSync(() => {\n          fs.chmodSync(entry.absolute, entry.mode);\n        }) : [];\n        return this[MAKEFS](er, entry);\n      }\n      // not a dir entry, have to remove it\n      const [er] = callSync(() => fs.rmdirSync(entry.absolute));\n      this[MAKEFS](er, entry);\n    }\n\n    // not a dir, and not reusable.\n    // don't remove if it's the cwd, since we want that error.\n    const [er] = entry.absolute === this.cwd ? [] : callSync(() => unlinkFileSync(entry.absolute));\n    this[MAKEFS](er, entry);\n  }\n  [FILE](entry, done) {\n    const mode = entry.mode & 0o7777 || this.fmode;\n    const oner = er => {\n      let closeError;\n      try {\n        fs.closeSync(fd);\n      } catch (e) {\n        closeError = e;\n      }\n      if (er || closeError) this[ONERROR](er || closeError, entry);\n      done();\n    };\n    let stream;\n    let fd;\n    try {\n      fd = fs.openSync(entry.absolute, 'w', mode);\n    } catch (er) {\n      return oner(er);\n    }\n    const tx = this.transform ? this.transform(entry) || entry : entry;\n    if (tx !== entry) {\n      tx.on('error', er => this[ONERROR](er, entry));\n      entry.pipe(tx);\n    }\n    tx.on('data', chunk => {\n      try {\n        fs.writeSync(fd, chunk, 0, chunk.length);\n      } catch (er) {\n        oner(er);\n      }\n    });\n    tx.on('end', _ => {\n      let er = null;\n      // try both, falling futimes back to utimes\n      // if either fails, handle the first error\n      if (entry.mtime && !this.noMtime) {\n        const atime = entry.atime || new Date();\n        const mtime = entry.mtime;\n        try {\n          fs.futimesSync(fd, atime, mtime);\n        } catch (futimeser) {\n          try {\n            fs.utimesSync(entry.absolute, atime, mtime);\n          } catch (utimeser) {\n            er = futimeser;\n          }\n        }\n      }\n      if (this[DOCHOWN](entry)) {\n        const uid = this[UID](entry);\n        const gid = this[GID](entry);\n        try {\n          fs.fchownSync(fd, uid, gid);\n        } catch (fchowner) {\n          try {\n            fs.chownSync(entry.absolute, uid, gid);\n          } catch (chowner) {\n            er = er || fchowner;\n          }\n        }\n      }\n      oner(er);\n    });\n  }\n  [DIRECTORY](entry, done) {\n    const mode = entry.mode & 0o7777 || this.dmode;\n    const er = this[MKDIR](entry.absolute, mode);\n    if (er) {\n      this[ONERROR](er, entry);\n      done();\n      return;\n    }\n    if (entry.mtime && !this.noMtime) {\n      try {\n        fs.utimesSync(entry.absolute, entry.atime || new Date(), entry.mtime);\n      } catch (er) {}\n    }\n    if (this[DOCHOWN](entry)) {\n      try {\n        fs.chownSync(entry.absolute, this[UID](entry), this[GID](entry));\n      } catch (er) {}\n    }\n    done();\n    entry.resume();\n  }\n  [MKDIR](dir, mode) {\n    try {\n      return mkdir.sync(normPath(dir), {\n        uid: this.uid,\n        gid: this.gid,\n        processUid: this.processUid,\n        processGid: this.processGid,\n        umask: this.processUmask,\n        preserve: this.preservePaths,\n        unlink: this.unlink,\n        cache: this.dirCache,\n        cwd: this.cwd,\n        mode: mode\n      });\n    } catch (er) {\n      return er;\n    }\n  }\n  [LINK](entry, linkpath, link, done) {\n    try {\n      fs[link + 'Sync'](linkpath, entry.absolute);\n      done();\n      entry.resume();\n    } catch (er) {\n      return this[ONERROR](er, entry);\n    }\n  }\n}\nUnpack.Sync = UnpackSync;\nmodule.exports = Unpack;","map":{"version":3,"names":["assert","require","EE","EventEmitter","Parser","fs","fsm","path","mkdir","mkdirSync","sync","wc","stripAbsolutePath","pathReservations","normPath","stripSlash","ONENTRY","Symbol","CHECKFS","CHECKFS2","PRUNECACHE","ISREUSABLE","MAKEFS","FILE","DIRECTORY","LINK","SYMLINK","HARDLINK","UNSUPPORTED","UNKNOWN","CHECKPATH","MKDIR","ONERROR","PENDING","PEND","UNPEND","ENDED","MAYBECLOSE","SKIP","DOCHOWN","UID","GID","CHECKED_CWD","crypto","platform","process","env","TESTING_TAR_FAKE_PLATFORM","isWindows","unlinkFile","cb","unlink","name","randomBytes","toString","rename","er","unlinkFileSync","unlinkSync","renameSync","uint32","a","b","c","cacheKeyNormalize","normalize","toLowerCase","pruneCache","cache","abs","keys","pnorm","indexOf","delete","dropCache","key","Unpack","constructor","opt","ondone","_","reservations","transform","writable","readable","dirCache","Map","uid","gid","TypeError","preserveOwner","setOwner","undefined","getuid","processUid","processGid","getgid","forceChown","win32","newer","keep","noMtime","preservePaths","cwd","resolve","strip","processUmask","umask","dmode","fmode","on","entry","emit","parts","split","length","slice","join","type","linkparts","linkpath","p","includes","test","warn","s","isAbsolute","absolute","resolvedPath","root","aRoot","parse","encode","substr","pRoot","resume","equal","mode","message","dir","preserve","fullyDone","stream","WriteStream","autoClose","fd","close","write","actions","done","mtime","atime","Date","futimes","utimes","er2","fchown","chown","tx","pipe","st","isFile","nlink","paths","push","reserve","checkCwd","start","parent","dirname","afterMakeParent","lstat","lstatEr","isDirectory","needChmod","noChmod","afterChmod","chmod","rmdir","link","callSync","fn","UnpackSync","mkParent","lstatSync","chmodSync","rmdirSync","oner","closeError","closeSync","e","openSync","chunk","writeSync","futimesSync","futimeser","utimesSync","utimeser","fchownSync","fchowner","chownSync","chowner","Sync","module","exports"],"sources":["/Users/hkateliev/node_modules/npm/node_modules/tar/lib/unpack.js"],"sourcesContent":["'use strict'\n\n// the PEND/UNPEND stuff tracks whether we're ready to emit end/close yet.\n// but the path reservations are required to avoid race conditions where\n// parallelized unpack ops may mess with one another, due to dependencies\n// (like a Link depending on its target) or destructive operations (like\n// clobbering an fs object to create one of a different type.)\n\nconst assert = require('assert')\nconst EE = require('events').EventEmitter\nconst Parser = require('./parse.js')\nconst fs = require('fs')\nconst fsm = require('fs-minipass')\nconst path = require('path')\nconst mkdir = require('./mkdir.js')\nconst mkdirSync = mkdir.sync\nconst wc = require('./winchars.js')\nconst stripAbsolutePath = require('./strip-absolute-path.js')\nconst pathReservations = require('./path-reservations.js')\nconst normPath = require('./normalize-windows-path.js')\nconst stripSlash = require('./strip-trailing-slashes.js')\n\nconst ONENTRY = Symbol('onEntry')\nconst CHECKFS = Symbol('checkFs')\nconst CHECKFS2 = Symbol('checkFs2')\nconst PRUNECACHE = Symbol('pruneCache')\nconst ISREUSABLE = Symbol('isReusable')\nconst MAKEFS = Symbol('makeFs')\nconst FILE = Symbol('file')\nconst DIRECTORY = Symbol('directory')\nconst LINK = Symbol('link')\nconst SYMLINK = Symbol('symlink')\nconst HARDLINK = Symbol('hardlink')\nconst UNSUPPORTED = Symbol('unsupported')\nconst UNKNOWN = Symbol('unknown')\nconst CHECKPATH = Symbol('checkPath')\nconst MKDIR = Symbol('mkdir')\nconst ONERROR = Symbol('onError')\nconst PENDING = Symbol('pending')\nconst PEND = Symbol('pend')\nconst UNPEND = Symbol('unpend')\nconst ENDED = Symbol('ended')\nconst MAYBECLOSE = Symbol('maybeClose')\nconst SKIP = Symbol('skip')\nconst DOCHOWN = Symbol('doChown')\nconst UID = Symbol('uid')\nconst GID = Symbol('gid')\nconst CHECKED_CWD = Symbol('checkedCwd')\nconst crypto = require('crypto')\nconst platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform\nconst isWindows = platform === 'win32'\n\n// Unlinks on Windows are not atomic.\n//\n// This means that if you have a file entry, followed by another\n// file entry with an identical name, and you cannot re-use the file\n// (because it's a hardlink, or because unlink:true is set, or it's\n// Windows, which does not have useful nlink values), then the unlink\n// will be committed to the disk AFTER the new file has been written\n// over the old one, deleting the new file.\n//\n// To work around this, on Windows systems, we rename the file and then\n// delete the renamed file.  It's a sloppy kludge, but frankly, I do not\n// know of a better way to do this, given windows' non-atomic unlink\n// semantics.\n//\n// See: https://github.com/npm/node-tar/issues/183\n/* istanbul ignore next */\nconst unlinkFile = (path, cb) => {\n  if (!isWindows)\n    return fs.unlink(path, cb)\n\n  const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex')\n  fs.rename(path, name, er => {\n    if (er)\n      return cb(er)\n    fs.unlink(name, cb)\n  })\n}\n\n/* istanbul ignore next */\nconst unlinkFileSync = path => {\n  if (!isWindows)\n    return fs.unlinkSync(path)\n\n  const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex')\n  fs.renameSync(path, name)\n  fs.unlinkSync(name)\n}\n\n// this.gid, entry.gid, this.processUid\nconst uint32 = (a, b, c) =>\n  a === a >>> 0 ? a\n  : b === b >>> 0 ? b\n  : c\n\n// clear the cache if it's a case-insensitive unicode-squashing match.\n// we can't know if the current file system is case-sensitive or supports\n// unicode fully, so we check for similarity on the maximally compatible\n// representation.  Err on the side of pruning, since all it's doing is\n// preventing lstats, and it's not the end of the world if we get a false\n// positive.\n// Note that on windows, we always drop the entire cache whenever a\n// symbolic link is encountered, because 8.3 filenames are impossible\n// to reason about, and collisions are hazards rather than just failures.\nconst cacheKeyNormalize = path => stripSlash(normPath(path))\n  .normalize('NFKD')\n  .toLowerCase()\n\nconst pruneCache = (cache, abs) => {\n  abs = cacheKeyNormalize(abs)\n  for (const path of cache.keys()) {\n    const pnorm = cacheKeyNormalize(path)\n    if (pnorm === abs || pnorm.indexOf(abs + '/') === 0)\n      cache.delete(path)\n  }\n}\n\nconst dropCache = cache => {\n  for (const key of cache.keys())\n    cache.delete(key)\n}\n\nclass Unpack extends Parser {\n  constructor (opt) {\n    if (!opt)\n      opt = {}\n\n    opt.ondone = _ => {\n      this[ENDED] = true\n      this[MAYBECLOSE]()\n    }\n\n    super(opt)\n\n    this[CHECKED_CWD] = false\n\n    this.reservations = pathReservations()\n\n    this.transform = typeof opt.transform === 'function' ? opt.transform : null\n\n    this.writable = true\n    this.readable = false\n\n    this[PENDING] = 0\n    this[ENDED] = false\n\n    this.dirCache = opt.dirCache || new Map()\n\n    if (typeof opt.uid === 'number' || typeof opt.gid === 'number') {\n      // need both or neither\n      if (typeof opt.uid !== 'number' || typeof opt.gid !== 'number')\n        throw new TypeError('cannot set owner without number uid and gid')\n      if (opt.preserveOwner)\n        throw new TypeError(\n          'cannot preserve owner in archive and also set owner explicitly')\n      this.uid = opt.uid\n      this.gid = opt.gid\n      this.setOwner = true\n    } else {\n      this.uid = null\n      this.gid = null\n      this.setOwner = false\n    }\n\n    // default true for root\n    if (opt.preserveOwner === undefined && typeof opt.uid !== 'number')\n      this.preserveOwner = process.getuid && process.getuid() === 0\n    else\n      this.preserveOwner = !!opt.preserveOwner\n\n    this.processUid = (this.preserveOwner || this.setOwner) && process.getuid ?\n      process.getuid() : null\n    this.processGid = (this.preserveOwner || this.setOwner) && process.getgid ?\n      process.getgid() : null\n\n    // mostly just for testing, but useful in some cases.\n    // Forcibly trigger a chown on every entry, no matter what\n    this.forceChown = opt.forceChown === true\n\n    // turn ><?| in filenames into 0xf000-higher encoded forms\n    this.win32 = !!opt.win32 || isWindows\n\n    // do not unpack over files that are newer than what's in the archive\n    this.newer = !!opt.newer\n\n    // do not unpack over ANY files\n    this.keep = !!opt.keep\n\n    // do not set mtime/atime of extracted entries\n    this.noMtime = !!opt.noMtime\n\n    // allow .., absolute path entries, and unpacking through symlinks\n    // without this, warn and skip .., relativize absolutes, and error\n    // on symlinks in extraction path\n    this.preservePaths = !!opt.preservePaths\n\n    // unlink files and links before writing. This breaks existing hard\n    // links, and removes symlink directories rather than erroring\n    this.unlink = !!opt.unlink\n\n    this.cwd = normPath(path.resolve(opt.cwd || process.cwd()))\n    this.strip = +opt.strip || 0\n    this.processUmask = process.umask()\n    this.umask = typeof opt.umask === 'number' ? opt.umask : this.processUmask\n    // default mode for dirs created as parents\n    this.dmode = opt.dmode || (0o0777 & (~this.umask))\n    this.fmode = opt.fmode || (0o0666 & (~this.umask))\n    this.on('entry', entry => this[ONENTRY](entry))\n  }\n\n  [MAYBECLOSE] () {\n    if (this[ENDED] && this[PENDING] === 0) {\n      this.emit('prefinish')\n      this.emit('finish')\n      this.emit('end')\n      this.emit('close')\n    }\n  }\n\n  [CHECKPATH] (entry) {\n    if (this.strip) {\n      const parts = normPath(entry.path).split('/')\n      if (parts.length < this.strip)\n        return false\n      entry.path = parts.slice(this.strip).join('/')\n\n      if (entry.type === 'Link') {\n        const linkparts = normPath(entry.linkpath).split('/')\n        if (linkparts.length >= this.strip)\n          entry.linkpath = linkparts.slice(this.strip).join('/')\n        else\n          return false\n      }\n    }\n\n    if (!this.preservePaths) {\n      const p = normPath(entry.path)\n      const parts = p.split('/')\n      if (parts.includes('..') || isWindows && /^[a-z]:\\.\\.$/i.test(parts[0])) {\n        this.warn(`path contains '..'`, p)\n        return false\n      }\n\n      // strip off the root\n      const s = stripAbsolutePath(p)\n      if (s[0]) {\n        entry.path = s[1]\n        this.warn(`stripping ${s[0]} from absolute path`, p)\n      }\n    }\n\n    if (path.isAbsolute(entry.path))\n      entry.absolute = normPath(path.resolve(entry.path))\n    else\n      entry.absolute = normPath(path.resolve(this.cwd, entry.path))\n\n    // if we somehow ended up with a path that escapes the cwd, and we are\n    // not in preservePaths mode, then something is fishy!  This should have\n    // been prevented above, so ignore this for coverage.\n    /* istanbul ignore if - defense in depth */\n    if (!this.preservePaths &&\n        entry.absolute.indexOf(this.cwd + '/') !== 0 &&\n        entry.absolute !== this.cwd) {\n      this.warn('TAR_ENTRY_ERROR', 'path escaped extraction target', {\n        entry,\n        path: normPath(entry.path),\n        resolvedPath: entry.absolute,\n        cwd: this.cwd,\n      })\n      return false\n    }\n\n    // an archive can set properties on the extraction directory, but it\n    // may not replace the cwd with a different kind of thing entirely.\n    if (entry.absolute === this.cwd &&\n        entry.type !== 'Directory' &&\n        entry.type !== 'GNUDumpDir')\n      return false\n\n    // only encode : chars that aren't drive letter indicators\n    if (this.win32) {\n      const { root: aRoot } = path.win32.parse(entry.absolute)\n      entry.absolute = aRoot + wc.encode(entry.absolute.substr(aRoot.length))\n      const { root: pRoot } = path.win32.parse(entry.path)\n      entry.path = pRoot + wc.encode(entry.path.substr(pRoot.length))\n    }\n\n    return true\n  }\n\n  [ONENTRY] (entry) {\n    if (!this[CHECKPATH](entry))\n      return entry.resume()\n\n    assert.equal(typeof entry.absolute, 'string')\n\n    switch (entry.type) {\n      case 'Directory':\n      case 'GNUDumpDir':\n        if (entry.mode)\n          entry.mode = entry.mode | 0o700\n\n      case 'File':\n      case 'OldFile':\n      case 'ContiguousFile':\n      case 'Link':\n      case 'SymbolicLink':\n        return this[CHECKFS](entry)\n\n      case 'CharacterDevice':\n      case 'BlockDevice':\n      case 'FIFO':\n        return this[UNSUPPORTED](entry)\n    }\n  }\n\n  [ONERROR] (er, entry) {\n    // Cwd has to exist, or else nothing works. That's serious.\n    // Other errors are warnings, which raise the error in strict\n    // mode, but otherwise continue on.\n    if (er.name === 'CwdError')\n      this.emit('error', er)\n    else {\n      this.warn(er.message, er)\n      this[UNPEND]()\n      entry.resume()\n    }\n  }\n\n  [MKDIR] (dir, mode, cb) {\n    mkdir(normPath(dir), {\n      uid: this.uid,\n      gid: this.gid,\n      processUid: this.processUid,\n      processGid: this.processGid,\n      umask: this.processUmask,\n      preserve: this.preservePaths,\n      unlink: this.unlink,\n      cache: this.dirCache,\n      cwd: this.cwd,\n      mode: mode\n    }, cb)\n  }\n\n  [DOCHOWN] (entry) {\n    // in preserve owner mode, chown if the entry doesn't match process\n    // in set owner mode, chown if setting doesn't match process\n    return this.forceChown ||\n      this.preserveOwner &&\n      ( typeof entry.uid === 'number' && entry.uid !== this.processUid ||\n        typeof entry.gid === 'number' && entry.gid !== this.processGid )\n      ||\n      ( typeof this.uid === 'number' && this.uid !== this.processUid ||\n        typeof this.gid === 'number' && this.gid !== this.processGid )\n  }\n\n  [UID] (entry) {\n    return uint32(this.uid, entry.uid, this.processUid)\n  }\n\n  [GID] (entry) {\n    return uint32(this.gid, entry.gid, this.processGid)\n  }\n\n  [FILE] (entry, fullyDone) {\n    const mode = entry.mode & 0o7777 || this.fmode\n    const stream = new fsm.WriteStream(entry.absolute, {\n      mode: mode,\n      autoClose: false\n    })\n    stream.on('error', er => {\n      if (stream.fd)\n        fs.close(stream.fd, () => {})\n\n      // flush all the data out so that we aren't left hanging\n      // if the error wasn't actually fatal.  otherwise the parse\n      // is blocked, and we never proceed.\n      /* istanbul ignore next */\n      stream.write = () => true\n      this[ONERROR](er, entry)\n      fullyDone()\n    })\n\n    let actions = 1\n    const done = er => {\n      if (er) {\n        /* istanbul ignore else - we should always have a fd by now */\n        if (stream.fd)\n          fs.close(stream.fd, () => {})\n\n        this[ONERROR](er, entry)\n        fullyDone()\n        return\n      }\n\n      if (--actions === 0) {\n        fs.close(stream.fd, er => {\n          fullyDone()\n          /* istanbul ignore next */\n          er ? this[ONERROR](er, entry) : this[UNPEND]()\n        })\n      }\n    }\n\n    stream.on('finish', _ => {\n      // if futimes fails, try utimes\n      // if utimes fails, fail with the original error\n      // same for fchown/chown\n      const abs = entry.absolute\n      const fd = stream.fd\n\n      if (entry.mtime && !this.noMtime) {\n        actions++\n        const atime = entry.atime || new Date()\n        const mtime = entry.mtime\n        fs.futimes(fd, atime, mtime, er =>\n          er ? fs.utimes(abs, atime, mtime, er2 => done(er2 && er))\n          : done())\n      }\n\n      if (this[DOCHOWN](entry)) {\n        actions++\n        const uid = this[UID](entry)\n        const gid = this[GID](entry)\n        fs.fchown(fd, uid, gid, er =>\n          er ? fs.chown(abs, uid, gid, er2 => done(er2 && er))\n          : done())\n      }\n\n      done()\n    })\n\n    const tx = this.transform ? this.transform(entry) || entry : entry\n    if (tx !== entry) {\n      tx.on('error', er => this[ONERROR](er, entry))\n      entry.pipe(tx)\n    }\n    tx.pipe(stream)\n  }\n\n  [DIRECTORY] (entry, fullyDone) {\n    const mode = entry.mode & 0o7777 || this.dmode\n    this[MKDIR](entry.absolute, mode, er => {\n      if (er) {\n        fullyDone()\n        return this[ONERROR](er, entry)\n      }\n\n      let actions = 1\n      const done = _ => {\n        if (--actions === 0) {\n          fullyDone()\n          this[UNPEND]()\n          entry.resume()\n        }\n      }\n\n      if (entry.mtime && !this.noMtime) {\n        actions++\n        fs.utimes(entry.absolute, entry.atime || new Date(), entry.mtime, done)\n      }\n\n      if (this[DOCHOWN](entry)) {\n        actions++\n        fs.chown(entry.absolute, this[UID](entry), this[GID](entry), done)\n      }\n\n      done()\n    })\n  }\n\n  [UNSUPPORTED] (entry) {\n    this.warn('unsupported entry type: ' + entry.type, entry)\n    entry.resume()\n  }\n\n  [SYMLINK] (entry, done) {\n    this[LINK](entry, entry.linkpath, 'symlink', done)\n  }\n\n  [HARDLINK] (entry, done) {\n    const linkpath = normPath(path.resolve(this.cwd, entry.linkpath))\n    this[LINK](entry, linkpath, 'link', done)\n  }\n\n  [PEND] () {\n    this[PENDING]++\n  }\n\n  [UNPEND] () {\n    this[PENDING]--\n    this[MAYBECLOSE]()\n  }\n\n  [SKIP] (entry) {\n    this[UNPEND]()\n    entry.resume()\n  }\n\n  // Check if we can reuse an existing filesystem entry safely and\n  // overwrite it, rather than unlinking and recreating\n  // Windows doesn't report a useful nlink, so we just never reuse entries\n  [ISREUSABLE] (entry, st) {\n    return entry.type === 'File' &&\n      !this.unlink &&\n      st.isFile() &&\n      st.nlink <= 1 &&\n      !isWindows\n  }\n\n  // check if a thing is there, and if so, try to clobber it\n  [CHECKFS] (entry) {\n    this[PEND]()\n    const paths = [entry.path]\n    if (entry.linkpath)\n      paths.push(entry.linkpath)\n    this.reservations.reserve(paths, done => this[CHECKFS2](entry, done))\n  }\n\n  [PRUNECACHE] (entry) {\n    // if we are not creating a directory, and the path is in the dirCache,\n    // then that means we are about to delete the directory we created\n    // previously, and it is no longer going to be a directory, and neither\n    // is any of its children.\n    // If a symbolic link is encountered, all bets are off.  There is no\n    // reasonable way to sanitize the cache in such a way we will be able to\n    // avoid having filesystem collisions.  If this happens with a non-symlink\n    // entry, it'll just fail to unpack, but a symlink to a directory, using an\n    // 8.3 shortname or certain unicode attacks, can evade detection and lead\n    // to arbitrary writes to anywhere on the system.\n    if (entry.type === 'SymbolicLink')\n      dropCache(this.dirCache)\n    else if (entry.type !== 'Directory')\n      pruneCache(this.dirCache, entry.absolute)\n  }\n\n  [CHECKFS2] (entry, fullyDone) {\n    this[PRUNECACHE](entry)\n\n    const done = er => {\n      this[PRUNECACHE](entry)\n      fullyDone(er)\n    }\n\n    const checkCwd = () => {\n      this[MKDIR](this.cwd, this.dmode, er => {\n        if (er) {\n          this[ONERROR](er, entry)\n          done()\n          return\n        }\n        this[CHECKED_CWD] = true\n        start()\n      })\n    }\n\n    const start = () => {\n      if (entry.absolute !== this.cwd) {\n        const parent = normPath(path.dirname(entry.absolute))\n        if (parent !== this.cwd) {\n          return this[MKDIR](parent, this.dmode, er => {\n            if (er) {\n              this[ONERROR](er, entry)\n              done()\n              return\n            }\n            afterMakeParent()\n          })\n        }\n      }\n      afterMakeParent()\n    }\n\n    const afterMakeParent = () => {\n      fs.lstat(entry.absolute, (lstatEr, st) => {\n        if (st && (this.keep || this.newer && st.mtime > entry.mtime)) {\n          this[SKIP](entry)\n          done()\n          return\n        }\n        if (lstatEr || this[ISREUSABLE](entry, st))\n          return this[MAKEFS](null, entry, done)\n\n        if (st.isDirectory()) {\n          if (entry.type === 'Directory') {\n            const needChmod = !this.noChmod &&\n              entry.mode &&\n              (st.mode & 0o7777) !== entry.mode\n            const afterChmod = er => this[MAKEFS](er, entry, done)\n            if (!needChmod)\n              return afterChmod()\n            return fs.chmod(entry.absolute, entry.mode, afterChmod)\n          }\n          // Not a dir entry, have to remove it.\n          // NB: the only way to end up with an entry that is the cwd\n          // itself, in such a way that == does not detect, is a\n          // tricky windows absolute path with UNC or 8.3 parts (and\n          // preservePaths:true, or else it will have been stripped).\n          // In that case, the user has opted out of path protections\n          // explicitly, so if they blow away the cwd, c'est la vie.\n          if (entry.absolute !== this.cwd) {\n            return fs.rmdir(entry.absolute, er =>\n              this[MAKEFS](er, entry, done))\n          }\n        }\n\n        // not a dir, and not reusable\n        // don't remove if the cwd, we want that error\n        if (entry.absolute === this.cwd)\n          return this[MAKEFS](null, entry, done)\n\n        unlinkFile(entry.absolute, er =>\n          this[MAKEFS](er, entry, done))\n      })\n    }\n\n    if (this[CHECKED_CWD])\n      start()\n    else\n      checkCwd()\n  }\n\n  [MAKEFS] (er, entry, done) {\n    if (er)\n      return this[ONERROR](er, entry)\n\n    switch (entry.type) {\n      case 'File':\n      case 'OldFile':\n      case 'ContiguousFile':\n        return this[FILE](entry, done)\n\n      case 'Link':\n        return this[HARDLINK](entry, done)\n\n      case 'SymbolicLink':\n        return this[SYMLINK](entry, done)\n\n      case 'Directory':\n      case 'GNUDumpDir':\n        return this[DIRECTORY](entry, done)\n    }\n  }\n\n  [LINK] (entry, linkpath, link, done) {\n    // XXX: get the type ('symlink' or 'junction') for windows\n    fs[link](linkpath, entry.absolute, er => {\n      if (er)\n        return this[ONERROR](er, entry)\n      done()\n      this[UNPEND]()\n      entry.resume()\n    })\n  }\n}\n\nconst callSync = fn => {\n  try {\n    return [null, fn()]\n  } catch (er) {\n    return [er, null]\n  }\n}\nclass UnpackSync extends Unpack {\n  [MAKEFS] (er, entry) {\n    return super[MAKEFS](er, entry, /* istanbul ignore next */ () => {})\n  }\n\n  [CHECKFS] (entry) {\n    this[PRUNECACHE](entry)\n\n    if (!this[CHECKED_CWD]) {\n      const er = this[MKDIR](this.cwd, this.dmode)\n      if (er)\n        return this[ONERROR](er, entry)\n      this[CHECKED_CWD] = true\n    }\n\n    // don't bother to make the parent if the current entry is the cwd,\n    // we've already checked it.\n    if (entry.absolute !== this.cwd) {\n      const parent = normPath(path.dirname(entry.absolute))\n      if (parent !== this.cwd) {\n        const mkParent = this[MKDIR](parent, this.dmode)\n        if (mkParent)\n          return this[ONERROR](mkParent, entry)\n      }\n    }\n\n    const [lstatEr, st] = callSync(() => fs.lstatSync(entry.absolute))\n    if (st && (this.keep || this.newer && st.mtime > entry.mtime))\n      return this[SKIP](entry)\n\n    if (lstatEr || this[ISREUSABLE](entry, st))\n      return this[MAKEFS](null, entry)\n\n    if (st.isDirectory()) {\n      if (entry.type === 'Directory') {\n        const needChmod = !this.noChmod &&\n          entry.mode &&\n          (st.mode & 0o7777) !== entry.mode\n        const [er] = needChmod ? callSync(() => {\n          fs.chmodSync(entry.absolute, entry.mode)\n        }) : []\n        return this[MAKEFS](er, entry)\n      }\n      // not a dir entry, have to remove it\n      const [er] = callSync(() => fs.rmdirSync(entry.absolute))\n      this[MAKEFS](er, entry)\n    }\n\n    // not a dir, and not reusable.\n    // don't remove if it's the cwd, since we want that error.\n    const [er] = entry.absolute === this.cwd ? []\n      : callSync(() => unlinkFileSync(entry.absolute))\n    this[MAKEFS](er, entry)\n  }\n\n  [FILE] (entry, done) {\n    const mode = entry.mode & 0o7777 || this.fmode\n\n    const oner = er => {\n      let closeError\n      try {\n        fs.closeSync(fd)\n      } catch (e) {\n        closeError = e\n      }\n      if (er || closeError)\n        this[ONERROR](er || closeError, entry)\n      done()\n    }\n\n    let stream\n    let fd\n    try {\n      fd = fs.openSync(entry.absolute, 'w', mode)\n    } catch (er) {\n      return oner(er)\n    }\n    const tx = this.transform ? this.transform(entry) || entry : entry\n    if (tx !== entry) {\n      tx.on('error', er => this[ONERROR](er, entry))\n      entry.pipe(tx)\n    }\n\n    tx.on('data', chunk => {\n      try {\n        fs.writeSync(fd, chunk, 0, chunk.length)\n      } catch (er) {\n        oner(er)\n      }\n    })\n\n    tx.on('end', _ => {\n      let er = null\n      // try both, falling futimes back to utimes\n      // if either fails, handle the first error\n      if (entry.mtime && !this.noMtime) {\n        const atime = entry.atime || new Date()\n        const mtime = entry.mtime\n        try {\n          fs.futimesSync(fd, atime, mtime)\n        } catch (futimeser) {\n          try {\n            fs.utimesSync(entry.absolute, atime, mtime)\n          } catch (utimeser) {\n            er = futimeser\n          }\n        }\n      }\n\n      if (this[DOCHOWN](entry)) {\n        const uid = this[UID](entry)\n        const gid = this[GID](entry)\n\n        try {\n          fs.fchownSync(fd, uid, gid)\n        } catch (fchowner) {\n          try {\n            fs.chownSync(entry.absolute, uid, gid)\n          } catch (chowner) {\n            er = er || fchowner\n          }\n        }\n      }\n\n      oner(er)\n    })\n  }\n\n  [DIRECTORY] (entry, done) {\n    const mode = entry.mode & 0o7777 || this.dmode\n    const er = this[MKDIR](entry.absolute, mode)\n    if (er) {\n      this[ONERROR](er, entry)\n      done()\n      return\n    }\n    if (entry.mtime && !this.noMtime) {\n      try {\n        fs.utimesSync(entry.absolute, entry.atime || new Date(), entry.mtime)\n      } catch (er) {}\n    }\n    if (this[DOCHOWN](entry)) {\n      try {\n        fs.chownSync(entry.absolute, this[UID](entry), this[GID](entry))\n      } catch (er) {}\n    }\n    done()\n    entry.resume()\n  }\n\n  [MKDIR] (dir, mode) {\n    try {\n      return mkdir.sync(normPath(dir), {\n        uid: this.uid,\n        gid: this.gid,\n        processUid: this.processUid,\n        processGid: this.processGid,\n        umask: this.processUmask,\n        preserve: this.preservePaths,\n        unlink: this.unlink,\n        cache: this.dirCache,\n        cwd: this.cwd,\n        mode: mode\n      })\n    } catch (er) {\n      return er\n    }\n  }\n\n  [LINK] (entry, linkpath, link, done) {\n    try {\n      fs[link + 'Sync'](linkpath, entry.absolute)\n      done()\n      entry.resume()\n    } catch (er) {\n      return this[ONERROR](er, entry)\n    }\n  }\n}\n\nUnpack.Sync = UnpackSync\nmodule.exports = Unpack\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}