{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.byteSize = factory());\n})(this, function () {\n  'use strict';\n\n  /**\n   * An isomorphic, load-anywhere function to convert a bytes value into a more human-readable format. Choose between [metric or IEC units](https://en.wikipedia.org/wiki/Gigabyte), summarised below.\n   *\n   * Value | Metric\n   * ----- | -------------\n   * 1000  | kB  kilobyte\n   * 1000^2 | MB  megabyte\n   * 1000^3 | GB  gigabyte\n   * 1000^4 | TB  terabyte\n   * 1000^5 | PB  petabyte\n   * 1000^6 | EB  exabyte\n   * 1000^7 | ZB  zettabyte\n   * 1000^8 | YB  yottabyte\n   *\n   * Value | IEC\n   * ----- | ------------\n   * 1024  | KiB kibibyte\n   * 1024^2 | MiB mebibyte\n   * 1024^3 | GiB gibibyte\n   * 1024^4 | TiB tebibyte\n   * 1024^5 | PiB pebibyte\n   * 1024^6 | EiB exbibyte\n   * 1024^7 | ZiB zebibyte\n   * 1024^8 | YiB yobibyte\n   *\n   * Value | Metric (octet)\n   * ----- | -------------\n   * 1000  | ko  kilooctet\n   * 1000^2 | Mo  megaoctet\n   * 1000^3 | Go  gigaoctet\n   * 1000^4 | To  teraoctet\n   * 1000^5 | Po  petaoctet\n   * 1000^6 | Eo  exaoctet\n   * 1000^7 | Zo  zettaoctet\n   * 1000^8 | Yo  yottaoctet\n   *\n   * Value | IEC (octet)\n   * ----- | ------------\n   * 1024  | Kio kilooctet\n   * 1024^2 | Mio mebioctet\n   * 1024^3 | Gio gibioctet\n   * 1024^4 | Tio tebioctet\n   * 1024^5 | Pio pebioctet\n   * 1024^6 | Eio exbioctet\n   * 1024^7 | Zio zebioctet\n   * 1024^8 | Yio yobioctet\n   *\n   * @module byte-size\n   * @example\n   * ```js\n   * const byteSize = require('byte-size')\n   * ```\n   */\n  class ByteSize {\n    constructor(bytes, options) {\n      options = options || {};\n      options.units = options.units || 'metric';\n      options.precision = typeof options.precision === 'undefined' ? 1 : options.precision;\n      const table = [{\n        expFrom: 0,\n        expTo: 1,\n        metric: 'B',\n        iec: 'B',\n        metric_octet: 'o',\n        iec_octet: 'o'\n      }, {\n        expFrom: 1,\n        expTo: 2,\n        metric: 'kB',\n        iec: 'KiB',\n        metric_octet: 'ko',\n        iec_octet: 'Kio'\n      }, {\n        expFrom: 2,\n        expTo: 3,\n        metric: 'MB',\n        iec: 'MiB',\n        metric_octet: 'Mo',\n        iec_octet: 'Mio'\n      }, {\n        expFrom: 3,\n        expTo: 4,\n        metric: 'GB',\n        iec: 'GiB',\n        metric_octet: 'Go',\n        iec_octet: 'Gio'\n      }, {\n        expFrom: 4,\n        expTo: 5,\n        metric: 'TB',\n        iec: 'TiB',\n        metric_octet: 'To',\n        iec_octet: 'Tio'\n      }, {\n        expFrom: 5,\n        expTo: 6,\n        metric: 'PB',\n        iec: 'PiB',\n        metric_octet: 'Po',\n        iec_octet: 'Pio'\n      }, {\n        expFrom: 6,\n        expTo: 7,\n        metric: 'EB',\n        iec: 'EiB',\n        metric_octet: 'Eo',\n        iec_octet: 'Eio'\n      }, {\n        expFrom: 7,\n        expTo: 8,\n        metric: 'ZB',\n        iec: 'ZiB',\n        metric_octet: 'Zo',\n        iec_octet: 'Zio'\n      }, {\n        expFrom: 8,\n        expTo: 9,\n        metric: 'YB',\n        iec: 'YiB',\n        metric_octet: 'Yo',\n        iec_octet: 'Yio'\n      }];\n      const base = options.units === 'metric' || options.units === 'metric_octet' ? 1000 : 1024;\n      const prefix = bytes < 0 ? '-' : '';\n      bytes = Math.abs(bytes);\n      for (let i = 0; i < table.length; i++) {\n        const lower = Math.pow(base, table[i].expFrom);\n        const upper = Math.pow(base, table[i].expTo);\n        if (bytes >= lower && bytes < upper) {\n          const units = table[i][options.units];\n          if (i === 0) {\n            this.value = prefix + bytes;\n            this.unit = units;\n            return;\n          } else {\n            this.value = prefix + (bytes / lower).toFixed(options.precision);\n            this.unit = units;\n            return;\n          }\n        }\n      }\n      this.value = prefix + bytes;\n      this.unit = '';\n    }\n    toString() {\n      return `${this.value} ${this.unit}`.trim();\n    }\n  }\n\n  /**\n   * @param {number} - the bytes value to convert.\n   * @param [options] {object} - optional config.\n   * @param [options.precision=1] {number} - number of decimal places.\n   * @param [options.units=metric] {string} - select `'metric'`, `'iec'`, `'metric_octet'` or `'iec_octet'` units.\n   * @returns {{ value: string, unit: string}}\n   * @alias module:byte-size\n   * @example\n   * ```js\n   * > const byteSize = require('byte-size')\n   *\n   * > byteSize(1580)\n   * { value: '1.6', unit: 'kB' }\n   *\n   * > byteSize(1580, { units: 'iec' })\n   * { value: '1.5', unit: 'KiB' }\n   *\n   * > byteSize(1580, { units: 'iec', precision: 3 })\n   * { value: '1.543', unit: 'KiB' }\n   *\n   * > byteSize(1580, { units: 'iec', precision: 0 })\n   * { value: '2', unit: 'KiB' }\n   *\n   * > byteSize(1580, { units: 'metric_octet' })\n   * { value: '1.6', unit: 'ko' }\n   *\n   * > byteSize(1580, { units: 'iec_octet' })\n   * { value: '1.5', unit: 'Kio' }\n   *\n   * > byteSize(1580, { units: 'iec_octet' }).toString()\n   * '1.5 Kio'\n   *\n   * > const { value, unit }  = byteSize(1580, { units: 'iec_octet' })\n   * > `${value} ${unit}`\n   * '1.5 Kio'\n   * ```\n   */\n  function byteSize(bytes, options) {\n    return new ByteSize(bytes, options);\n  }\n  return byteSize;\n});","map":{"version":3,"names":["global","factory","exports","module","define","amd","self","byteSize","ByteSize","constructor","bytes","options","units","precision","table","expFrom","expTo","metric","iec","metric_octet","iec_octet","base","prefix","Math","abs","i","length","lower","pow","upper","value","unit","toFixed","toString","trim"],"sources":["/Users/hkateliev/node_modules/npm/node_modules/byte-size/dist/index.js"],"sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = global || self, global.byteSize = factory());\n}(this, function () { 'use strict';\n\n  /**\n   * An isomorphic, load-anywhere function to convert a bytes value into a more human-readable format. Choose between [metric or IEC units](https://en.wikipedia.org/wiki/Gigabyte), summarised below.\n   *\n   * Value | Metric\n   * ----- | -------------\n   * 1000  | kB  kilobyte\n   * 1000^2 | MB  megabyte\n   * 1000^3 | GB  gigabyte\n   * 1000^4 | TB  terabyte\n   * 1000^5 | PB  petabyte\n   * 1000^6 | EB  exabyte\n   * 1000^7 | ZB  zettabyte\n   * 1000^8 | YB  yottabyte\n   *\n   * Value | IEC\n   * ----- | ------------\n   * 1024  | KiB kibibyte\n   * 1024^2 | MiB mebibyte\n   * 1024^3 | GiB gibibyte\n   * 1024^4 | TiB tebibyte\n   * 1024^5 | PiB pebibyte\n   * 1024^6 | EiB exbibyte\n   * 1024^7 | ZiB zebibyte\n   * 1024^8 | YiB yobibyte\n   *\n   * Value | Metric (octet)\n   * ----- | -------------\n   * 1000  | ko  kilooctet\n   * 1000^2 | Mo  megaoctet\n   * 1000^3 | Go  gigaoctet\n   * 1000^4 | To  teraoctet\n   * 1000^5 | Po  petaoctet\n   * 1000^6 | Eo  exaoctet\n   * 1000^7 | Zo  zettaoctet\n   * 1000^8 | Yo  yottaoctet\n   *\n   * Value | IEC (octet)\n   * ----- | ------------\n   * 1024  | Kio kilooctet\n   * 1024^2 | Mio mebioctet\n   * 1024^3 | Gio gibioctet\n   * 1024^4 | Tio tebioctet\n   * 1024^5 | Pio pebioctet\n   * 1024^6 | Eio exbioctet\n   * 1024^7 | Zio zebioctet\n   * 1024^8 | Yio yobioctet\n   *\n   * @module byte-size\n   * @example\n   * ```js\n   * const byteSize = require('byte-size')\n   * ```\n   */\n\n  class ByteSize {\n    constructor (bytes, options) {\n      options = options || {};\n      options.units = options.units || 'metric';\n      options.precision = typeof options.precision === 'undefined' ? 1 : options.precision;\n\n      const table = [\n        { expFrom: 0, expTo: 1, metric: 'B', iec: 'B', metric_octet: 'o', iec_octet: 'o' },\n        { expFrom: 1, expTo: 2, metric: 'kB', iec: 'KiB', metric_octet: 'ko', iec_octet: 'Kio' },\n        { expFrom: 2, expTo: 3, metric: 'MB', iec: 'MiB', metric_octet: 'Mo', iec_octet: 'Mio' },\n        { expFrom: 3, expTo: 4, metric: 'GB', iec: 'GiB', metric_octet: 'Go', iec_octet: 'Gio' },\n        { expFrom: 4, expTo: 5, metric: 'TB', iec: 'TiB', metric_octet: 'To', iec_octet: 'Tio' },\n        { expFrom: 5, expTo: 6, metric: 'PB', iec: 'PiB', metric_octet: 'Po', iec_octet: 'Pio' },\n        { expFrom: 6, expTo: 7, metric: 'EB', iec: 'EiB', metric_octet: 'Eo', iec_octet: 'Eio' },\n        { expFrom: 7, expTo: 8, metric: 'ZB', iec: 'ZiB', metric_octet: 'Zo', iec_octet: 'Zio' },\n        { expFrom: 8, expTo: 9, metric: 'YB', iec: 'YiB', metric_octet: 'Yo', iec_octet: 'Yio' }\n      ];\n\n      const base = options.units === 'metric' || options.units === 'metric_octet' ? 1000 : 1024;\n      const prefix = bytes < 0 ? '-' : '';\n      bytes = Math.abs(bytes);\n\n      for (let i = 0; i < table.length; i++) {\n        const lower = Math.pow(base, table[i].expFrom);\n        const upper = Math.pow(base, table[i].expTo);\n        if (bytes >= lower && bytes < upper) {\n          const units = table[i][options.units];\n          if (i === 0) {\n            this.value = prefix + bytes;\n            this.unit = units;\n            return\n          } else {\n            this.value = prefix + (bytes / lower).toFixed(options.precision);\n            this.unit = units;\n            return\n          }\n        }\n      }\n\n      this.value = prefix + bytes;\n      this.unit = '';\n    }\n\n    toString () {\n      return `${this.value} ${this.unit}`.trim()\n    }\n  }\n\n  /**\n   * @param {number} - the bytes value to convert.\n   * @param [options] {object} - optional config.\n   * @param [options.precision=1] {number} - number of decimal places.\n   * @param [options.units=metric] {string} - select `'metric'`, `'iec'`, `'metric_octet'` or `'iec_octet'` units.\n   * @returns {{ value: string, unit: string}}\n   * @alias module:byte-size\n   * @example\n   * ```js\n   * > const byteSize = require('byte-size')\n   *\n   * > byteSize(1580)\n   * { value: '1.6', unit: 'kB' }\n   *\n   * > byteSize(1580, { units: 'iec' })\n   * { value: '1.5', unit: 'KiB' }\n   *\n   * > byteSize(1580, { units: 'iec', precision: 3 })\n   * { value: '1.543', unit: 'KiB' }\n   *\n   * > byteSize(1580, { units: 'iec', precision: 0 })\n   * { value: '2', unit: 'KiB' }\n   *\n   * > byteSize(1580, { units: 'metric_octet' })\n   * { value: '1.6', unit: 'ko' }\n   *\n   * > byteSize(1580, { units: 'iec_octet' })\n   * { value: '1.5', unit: 'Kio' }\n   *\n   * > byteSize(1580, { units: 'iec_octet' }).toString()\n   * '1.5 Kio'\n   *\n   * > const { value, unit }  = byteSize(1580, { units: 'iec_octet' })\n   * > `${value} ${unit}`\n   * '1.5 Kio'\n   * ```\n   */\n  function byteSize (bytes, options) {\n    return new ByteSize(bytes, options)\n  }\n\n  return byteSize;\n\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}