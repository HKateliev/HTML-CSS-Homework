{"ast":null,"code":"'use strict';\n\nconst BB = require('bluebird');\nconst cp = require('child_process');\nconst execFileAsync = BB.promisify(cp.execFile, {\n  multiArgs: true\n});\nconst finished = require('./finished');\nconst LRU = require('lru-cache');\nconst optCheck = require('./opt-check');\nconst osenv = require('osenv');\nconst path = require('path');\nconst pinflight = require('promise-inflight');\nconst promiseRetry = require('promise-retry');\nconst uniqueFilename = require('unique-filename');\nconst which = BB.promisify(require('which'));\nconst semver = require('semver');\nconst inferOwner = require('infer-owner');\nconst GOOD_ENV_VARS = new Set(['GIT_ASKPASS', 'GIT_EXEC_PATH', 'GIT_PROXY_COMMAND', 'GIT_SSH', 'GIT_SSH_COMMAND', 'GIT_SSL_CAINFO', 'GIT_SSL_NO_VERIFY']);\nconst GIT_TRANSIENT_ERRORS = ['remote error: Internal Server Error', 'The remote end hung up unexpectedly', 'Connection timed out', 'Operation timed out', 'Failed to connect to .* Timed out', 'Connection reset by peer', 'SSL_ERROR_SYSCALL', 'The requested URL returned error: 503'].join('|');\nconst GIT_TRANSIENT_ERROR_RE = new RegExp(GIT_TRANSIENT_ERRORS);\nconst GIT_TRANSIENT_ERROR_MAX_RETRY_NUMBER = 3;\nfunction shouldRetry(error, number) {\n  return GIT_TRANSIENT_ERROR_RE.test(error) && number < GIT_TRANSIENT_ERROR_MAX_RETRY_NUMBER;\n}\nconst GIT_ = 'GIT_';\nlet GITENV;\nfunction gitEnv() {\n  if (GITENV) {\n    return GITENV;\n  }\n  const tmpDir = path.join(osenv.tmpdir(), 'pacote-git-template-tmp');\n  const tmpName = uniqueFilename(tmpDir, 'git-clone');\n  GITENV = {\n    GIT_ASKPASS: 'echo',\n    GIT_TEMPLATE_DIR: tmpName\n  };\n  Object.keys(process.env).forEach(k => {\n    if (GOOD_ENV_VARS.has(k) || !k.startsWith(GIT_)) {\n      GITENV[k] = process.env[k];\n    }\n  });\n  return GITENV;\n}\nlet GITPATH;\ntry {\n  GITPATH = which.sync('git');\n} catch (e) {}\nmodule.exports.clone = fullClone;\nfunction fullClone(repo, committish, target, opts) {\n  opts = optCheck(opts);\n  const gitArgs = ['clone', '--mirror', '-q', repo, path.join(target, '.git')];\n  if (process.platform === 'win32') {\n    gitArgs.push('--config', 'core.longpaths=true');\n  }\n  return execGit(gitArgs, {\n    cwd: target\n  }, opts).then(() => {\n    return execGit(['init'], {\n      cwd: target\n    }, opts);\n  }).then(() => {\n    return execGit(['checkout', committish || 'HEAD'], {\n      cwd: target\n    }, opts);\n  }).then(() => {\n    return updateSubmodules(target, opts);\n  }).then(() => headSha(target, opts));\n}\nmodule.exports.shallow = shallowClone;\nfunction shallowClone(repo, branch, target, opts) {\n  opts = optCheck(opts);\n  const gitArgs = ['clone', '--depth=1', '-q'];\n  if (branch) {\n    gitArgs.push('-b', branch);\n  }\n  gitArgs.push(repo, target);\n  if (process.platform === 'win32') {\n    gitArgs.push('--config', 'core.longpaths=true');\n  }\n  return execGit(gitArgs, {\n    cwd: target\n  }, opts).then(() => {\n    return updateSubmodules(target, opts);\n  }).then(() => headSha(target, opts));\n}\nfunction updateSubmodules(localRepo, opts) {\n  const gitArgs = ['submodule', 'update', '-q', '--init', '--recursive'];\n  return execGit(gitArgs, {\n    cwd: localRepo\n  }, opts);\n}\nfunction headSha(repo, opts) {\n  opts = optCheck(opts);\n  return execGit(['rev-parse', '--revs-only', 'HEAD'], {\n    cwd: repo\n  }, opts).spread(stdout => {\n    return stdout.trim();\n  });\n}\nconst CARET_BRACES = '^{}';\nconst REVS = new LRU({\n  max: 100,\n  maxAge: 5 * 60 * 1000\n});\nmodule.exports.revs = revs;\nfunction revs(repo, opts) {\n  opts = optCheck(opts);\n  const cached = REVS.get(repo);\n  if (cached) {\n    return BB.resolve(cached);\n  }\n  return pinflight(`ls-remote:${repo}`, () => {\n    return spawnGit(['ls-remote', '-h', '-t', repo], {\n      env: gitEnv()\n    }, opts).then(stdout => {\n      return stdout.split('\\n').reduce((revs, line) => {\n        const split = line.split(/\\s+/, 2);\n        if (split.length < 2) {\n          return revs;\n        }\n        const sha = split[0].trim();\n        const ref = split[1].trim().match(/(?:refs\\/[^/]+\\/)?(.*)/)[1];\n        if (!ref) {\n          return revs;\n        } // ???\n        if (ref.endsWith(CARET_BRACES)) {\n          return revs;\n        } // refs/tags/x^{} crap\n        const type = refType(line);\n        const doc = {\n          sha,\n          ref,\n          type\n        };\n        revs.refs[ref] = doc;\n        // We can check out shallow clones on specific SHAs if we have a ref\n        if (revs.shas[sha]) {\n          revs.shas[sha].push(ref);\n        } else {\n          revs.shas[sha] = [ref];\n        }\n        if (type === 'tag') {\n          const match = ref.match(/v?(\\d+\\.\\d+\\.\\d+(?:[-+].+)?)$/);\n          if (match && semver.valid(match[1], true)) {\n            revs.versions[semver.clean(match[1], true)] = doc;\n          }\n        }\n        return revs;\n      }, {\n        versions: {},\n        'dist-tags': {},\n        refs: {},\n        shas: {}\n      });\n    }, err => {\n      err.message = `Error while executing:\\n${GITPATH} ls-remote -h -t ${repo}\\n\\n${err.stderr}\\n${err.message}`;\n      throw err;\n    }).then(revs => {\n      if (revs.refs.HEAD) {\n        const HEAD = revs.refs.HEAD;\n        Object.keys(revs.versions).forEach(v => {\n          if (v.sha === HEAD.sha) {\n            revs['dist-tags'].HEAD = v;\n            if (!revs.refs.latest) {\n              revs['dist-tags'].latest = revs.refs.HEAD;\n            }\n          }\n        });\n      }\n      REVS.set(repo, revs);\n      return revs;\n    });\n  });\n}\n\n// infer the owner from the cwd git is operating in, if not the\n// process cwd, but only if we're root.\n// See: https://github.com/npm/cli/issues/624\nmodule.exports._cwdOwner = cwdOwner;\nfunction cwdOwner(gitOpts, opts) {\n  const isRoot = process.getuid && process.getuid() === 0;\n  if (!isRoot || !gitOpts.cwd) {\n    return Promise.resolve();\n  }\n  return BB.resolve(inferOwner(gitOpts.cwd).then(owner => {\n    gitOpts.uid = owner.uid;\n    gitOpts.gid = owner.gid;\n  }));\n}\nmodule.exports._exec = execGit;\nfunction execGit(gitArgs, gitOpts, opts) {\n  opts = optCheck(opts);\n  return BB.resolve(cwdOwner(gitOpts, opts).then(() => checkGit(opts).then(gitPath => {\n    return promiseRetry((retry, number) => {\n      if (number !== 1) {\n        opts.log.silly('pacote', 'Retrying git command: ' + gitArgs.join(' ') + ' attempt # ' + number);\n      }\n      return execFileAsync(gitPath, gitArgs, mkOpts(gitOpts, opts)).catch(err => {\n        if (shouldRetry(err, number)) {\n          retry(err);\n        } else {\n          throw err;\n        }\n      });\n    }, opts.retry != null ? opts.retry : {\n      retries: opts['fetch-retries'],\n      factor: opts['fetch-retry-factor'],\n      maxTimeout: opts['fetch-retry-maxtimeout'],\n      minTimeout: opts['fetch-retry-mintimeout']\n    });\n  })));\n}\nmodule.exports._spawn = spawnGit;\nfunction spawnGit(gitArgs, gitOpts, opts) {\n  opts = optCheck(opts);\n  return BB.resolve(cwdOwner(gitOpts, opts).then(() => checkGit(opts).then(gitPath => {\n    return promiseRetry((retry, number) => {\n      if (number !== 1) {\n        opts.log.silly('pacote', 'Retrying git command: ' + gitArgs.join(' ') + ' attempt # ' + number);\n      }\n      const child = cp.spawn(gitPath, gitArgs, mkOpts(gitOpts, opts));\n      let stdout = '';\n      let stderr = '';\n      child.stdout.on('data', d => {\n        stdout += d;\n      });\n      child.stderr.on('data', d => {\n        stderr += d;\n      });\n      return finished(child, true).catch(err => {\n        if (shouldRetry(stderr, number)) {\n          retry(err);\n        } else {\n          err.stderr = stderr;\n          throw err;\n        }\n      }).then(() => {\n        return stdout;\n      });\n    }, opts.retry);\n  })));\n}\nmodule.exports._mkOpts = mkOpts;\nfunction mkOpts(_gitOpts, opts) {\n  const gitOpts = {\n    env: gitEnv()\n  };\n  const isRoot = process.getuid && process.getuid() === 0;\n  // don't change child process uid/gid if not root\n  if (+opts.uid && !isNaN(opts.uid) && isRoot) {\n    gitOpts.uid = +opts.uid;\n  }\n  if (+opts.gid && !isNaN(opts.gid) && isRoot) {\n    gitOpts.gid = +opts.gid;\n  }\n  Object.assign(gitOpts, _gitOpts);\n  return gitOpts;\n}\nfunction checkGit(opts) {\n  if (opts.git) {\n    return BB.resolve(opts.git);\n  } else if (!GITPATH) {\n    const err = new Error('No git binary found in $PATH');\n    err.code = 'ENOGIT';\n    return BB.reject(err);\n  } else {\n    return BB.resolve(GITPATH);\n  }\n}\nconst REFS_TAGS = 'refs/tags/';\nconst REFS_HEADS = 'refs/heads/';\nconst HEAD = 'HEAD';\nfunction refType(ref) {\n  return ref.indexOf(REFS_TAGS) !== -1 ? 'tag' : ref.indexOf(REFS_HEADS) !== -1 ? 'branch' : ref.endsWith(HEAD) ? 'head' : 'other';\n}","map":{"version":3,"names":["BB","require","cp","execFileAsync","promisify","execFile","multiArgs","finished","LRU","optCheck","osenv","path","pinflight","promiseRetry","uniqueFilename","which","semver","inferOwner","GOOD_ENV_VARS","Set","GIT_TRANSIENT_ERRORS","join","GIT_TRANSIENT_ERROR_RE","RegExp","GIT_TRANSIENT_ERROR_MAX_RETRY_NUMBER","shouldRetry","error","number","test","GIT_","GITENV","gitEnv","tmpDir","tmpdir","tmpName","GIT_ASKPASS","GIT_TEMPLATE_DIR","Object","keys","process","env","forEach","k","has","startsWith","GITPATH","sync","e","module","exports","clone","fullClone","repo","committish","target","opts","gitArgs","platform","push","execGit","cwd","then","updateSubmodules","headSha","shallow","shallowClone","branch","localRepo","spread","stdout","trim","CARET_BRACES","REVS","max","maxAge","revs","cached","get","resolve","spawnGit","split","reduce","line","length","sha","ref","match","endsWith","type","refType","doc","refs","shas","valid","versions","clean","err","message","stderr","HEAD","v","latest","set","_cwdOwner","cwdOwner","gitOpts","isRoot","getuid","Promise","owner","uid","gid","_exec","checkGit","gitPath","retry","log","silly","mkOpts","catch","retries","factor","maxTimeout","minTimeout","_spawn","child","spawn","on","d","_mkOpts","_gitOpts","isNaN","assign","git","Error","code","reject","REFS_TAGS","REFS_HEADS","indexOf"],"sources":["/Users/hkateliev/node_modules/npm/node_modules/pacote/lib/util/git.js"],"sourcesContent":["'use strict'\n\nconst BB = require('bluebird')\n\nconst cp = require('child_process')\nconst execFileAsync = BB.promisify(cp.execFile, {\n  multiArgs: true\n})\nconst finished = require('./finished')\nconst LRU = require('lru-cache')\nconst optCheck = require('./opt-check')\nconst osenv = require('osenv')\nconst path = require('path')\nconst pinflight = require('promise-inflight')\nconst promiseRetry = require('promise-retry')\nconst uniqueFilename = require('unique-filename')\nconst which = BB.promisify(require('which'))\nconst semver = require('semver')\nconst inferOwner = require('infer-owner')\n\nconst GOOD_ENV_VARS = new Set([\n  'GIT_ASKPASS',\n  'GIT_EXEC_PATH',\n  'GIT_PROXY_COMMAND',\n  'GIT_SSH',\n  'GIT_SSH_COMMAND',\n  'GIT_SSL_CAINFO',\n  'GIT_SSL_NO_VERIFY'\n])\n\nconst GIT_TRANSIENT_ERRORS = [\n  'remote error: Internal Server Error',\n  'The remote end hung up unexpectedly',\n  'Connection timed out',\n  'Operation timed out',\n  'Failed to connect to .* Timed out',\n  'Connection reset by peer',\n  'SSL_ERROR_SYSCALL',\n  'The requested URL returned error: 503'\n].join('|')\n\nconst GIT_TRANSIENT_ERROR_RE = new RegExp(GIT_TRANSIENT_ERRORS)\n\nconst GIT_TRANSIENT_ERROR_MAX_RETRY_NUMBER = 3\n\nfunction shouldRetry (error, number) {\n  return GIT_TRANSIENT_ERROR_RE.test(error) && (number < GIT_TRANSIENT_ERROR_MAX_RETRY_NUMBER)\n}\n\nconst GIT_ = 'GIT_'\nlet GITENV\nfunction gitEnv () {\n  if (GITENV) { return GITENV }\n  const tmpDir = path.join(osenv.tmpdir(), 'pacote-git-template-tmp')\n  const tmpName = uniqueFilename(tmpDir, 'git-clone')\n  GITENV = {\n    GIT_ASKPASS: 'echo',\n    GIT_TEMPLATE_DIR: tmpName\n  }\n  Object.keys(process.env).forEach(k => {\n    if (GOOD_ENV_VARS.has(k) || !k.startsWith(GIT_)) {\n      GITENV[k] = process.env[k]\n    }\n  })\n  return GITENV\n}\n\nlet GITPATH\ntry {\n  GITPATH = which.sync('git')\n} catch (e) {}\n\nmodule.exports.clone = fullClone\nfunction fullClone (repo, committish, target, opts) {\n  opts = optCheck(opts)\n  const gitArgs = ['clone', '--mirror', '-q', repo, path.join(target, '.git')]\n  if (process.platform === 'win32') {\n    gitArgs.push('--config', 'core.longpaths=true')\n  }\n  return execGit(gitArgs, { cwd: target }, opts).then(() => {\n    return execGit(['init'], { cwd: target }, opts)\n  }).then(() => {\n    return execGit(['checkout', committish || 'HEAD'], { cwd: target }, opts)\n  }).then(() => {\n    return updateSubmodules(target, opts)\n  }).then(() => headSha(target, opts))\n}\n\nmodule.exports.shallow = shallowClone\nfunction shallowClone (repo, branch, target, opts) {\n  opts = optCheck(opts)\n  const gitArgs = ['clone', '--depth=1', '-q']\n  if (branch) {\n    gitArgs.push('-b', branch)\n  }\n  gitArgs.push(repo, target)\n  if (process.platform === 'win32') {\n    gitArgs.push('--config', 'core.longpaths=true')\n  }\n  return execGit(gitArgs, {\n    cwd: target\n  }, opts).then(() => {\n    return updateSubmodules(target, opts)\n  }).then(() => headSha(target, opts))\n}\n\nfunction updateSubmodules (localRepo, opts) {\n  const gitArgs = ['submodule', 'update', '-q', '--init', '--recursive']\n  return execGit(gitArgs, {\n    cwd: localRepo\n  }, opts)\n}\n\nfunction headSha (repo, opts) {\n  opts = optCheck(opts)\n  return execGit(['rev-parse', '--revs-only', 'HEAD'], { cwd: repo }, opts).spread(stdout => {\n    return stdout.trim()\n  })\n}\n\nconst CARET_BRACES = '^{}'\nconst REVS = new LRU({\n  max: 100,\n  maxAge: 5 * 60 * 1000\n})\nmodule.exports.revs = revs\nfunction revs (repo, opts) {\n  opts = optCheck(opts)\n  const cached = REVS.get(repo)\n  if (cached) {\n    return BB.resolve(cached)\n  }\n  return pinflight(`ls-remote:${repo}`, () => {\n    return spawnGit(['ls-remote', '-h', '-t', repo], {\n      env: gitEnv()\n    }, opts).then((stdout) => {\n      return stdout.split('\\n').reduce((revs, line) => {\n        const split = line.split(/\\s+/, 2)\n        if (split.length < 2) { return revs }\n        const sha = split[0].trim()\n        const ref = split[1].trim().match(/(?:refs\\/[^/]+\\/)?(.*)/)[1]\n        if (!ref) { return revs } // ???\n        if (ref.endsWith(CARET_BRACES)) { return revs } // refs/tags/x^{} crap\n        const type = refType(line)\n        const doc = { sha, ref, type }\n\n        revs.refs[ref] = doc\n        // We can check out shallow clones on specific SHAs if we have a ref\n        if (revs.shas[sha]) {\n          revs.shas[sha].push(ref)\n        } else {\n          revs.shas[sha] = [ref]\n        }\n\n        if (type === 'tag') {\n          const match = ref.match(/v?(\\d+\\.\\d+\\.\\d+(?:[-+].+)?)$/)\n          if (match && semver.valid(match[1], true)) {\n            revs.versions[semver.clean(match[1], true)] = doc\n          }\n        }\n\n        return revs\n      }, { versions: {}, 'dist-tags': {}, refs: {}, shas: {} })\n    }, err => {\n      err.message = `Error while executing:\\n${GITPATH} ls-remote -h -t ${repo}\\n\\n${err.stderr}\\n${err.message}`\n      throw err\n    }).then(revs => {\n      if (revs.refs.HEAD) {\n        const HEAD = revs.refs.HEAD\n        Object.keys(revs.versions).forEach(v => {\n          if (v.sha === HEAD.sha) {\n            revs['dist-tags'].HEAD = v\n            if (!revs.refs.latest) {\n              revs['dist-tags'].latest = revs.refs.HEAD\n            }\n          }\n        })\n      }\n      REVS.set(repo, revs)\n      return revs\n    })\n  })\n}\n\n// infer the owner from the cwd git is operating in, if not the\n// process cwd, but only if we're root.\n// See: https://github.com/npm/cli/issues/624\nmodule.exports._cwdOwner = cwdOwner\nfunction cwdOwner (gitOpts, opts) {\n  const isRoot = process.getuid && process.getuid() === 0\n  if (!isRoot || !gitOpts.cwd) { return Promise.resolve() }\n\n  return BB.resolve(inferOwner(gitOpts.cwd).then(owner => {\n    gitOpts.uid = owner.uid\n    gitOpts.gid = owner.gid\n  }))\n}\n\nmodule.exports._exec = execGit\nfunction execGit (gitArgs, gitOpts, opts) {\n  opts = optCheck(opts)\n  return BB.resolve(cwdOwner(gitOpts, opts).then(() => checkGit(opts).then(gitPath => {\n    return promiseRetry((retry, number) => {\n      if (number !== 1) {\n        opts.log.silly('pacote', 'Retrying git command: ' + gitArgs.join(' ') + ' attempt # ' + number)\n      }\n      return execFileAsync(gitPath, gitArgs, mkOpts(gitOpts, opts)).catch((err) => {\n        if (shouldRetry(err, number)) {\n          retry(err)\n        } else {\n          throw err\n        }\n      })\n    }, opts.retry != null ? opts.retry : {\n      retries: opts['fetch-retries'],\n      factor: opts['fetch-retry-factor'],\n      maxTimeout: opts['fetch-retry-maxtimeout'],\n      minTimeout: opts['fetch-retry-mintimeout']\n    })\n  })))\n}\n\nmodule.exports._spawn = spawnGit\nfunction spawnGit (gitArgs, gitOpts, opts) {\n  opts = optCheck(opts)\n  return BB.resolve(cwdOwner(gitOpts, opts).then(() => checkGit(opts).then(gitPath => {\n    return promiseRetry((retry, number) => {\n      if (number !== 1) {\n        opts.log.silly('pacote', 'Retrying git command: ' + gitArgs.join(' ') + ' attempt # ' + number)\n      }\n      const child = cp.spawn(gitPath, gitArgs, mkOpts(gitOpts, opts))\n\n      let stdout = ''\n      let stderr = ''\n      child.stdout.on('data', d => { stdout += d })\n      child.stderr.on('data', d => { stderr += d })\n\n      return finished(child, true).catch(err => {\n        if (shouldRetry(stderr, number)) {\n          retry(err)\n        } else {\n          err.stderr = stderr\n          throw err\n        }\n      }).then(() => {\n        return stdout\n      })\n    }, opts.retry)\n  })))\n}\n\nmodule.exports._mkOpts = mkOpts\nfunction mkOpts (_gitOpts, opts) {\n  const gitOpts = {\n    env: gitEnv()\n  }\n  const isRoot = process.getuid && process.getuid() === 0\n  // don't change child process uid/gid if not root\n  if (+opts.uid && !isNaN(opts.uid) && isRoot) {\n    gitOpts.uid = +opts.uid\n  }\n  if (+opts.gid && !isNaN(opts.gid) && isRoot) {\n    gitOpts.gid = +opts.gid\n  }\n  Object.assign(gitOpts, _gitOpts)\n  return gitOpts\n}\n\nfunction checkGit (opts) {\n  if (opts.git) {\n    return BB.resolve(opts.git)\n  } else if (!GITPATH) {\n    const err = new Error('No git binary found in $PATH')\n    err.code = 'ENOGIT'\n    return BB.reject(err)\n  } else {\n    return BB.resolve(GITPATH)\n  }\n}\n\nconst REFS_TAGS = 'refs/tags/'\nconst REFS_HEADS = 'refs/heads/'\nconst HEAD = 'HEAD'\nfunction refType (ref) {\n  return ref.indexOf(REFS_TAGS) !== -1\n    ? 'tag'\n    : ref.indexOf(REFS_HEADS) !== -1\n      ? 'branch'\n      : ref.endsWith(HEAD)\n        ? 'head'\n        : 'other'\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}