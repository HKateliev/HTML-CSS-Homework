{"ast":null,"code":"'use strict';\n\nconst config = require('./config.js');\nconst url = require('url');\nmodule.exports = getAuth;\nfunction getAuth(registry, opts) {\n  if (!registry) {\n    throw new Error('registry is required');\n  }\n  opts = config(opts);\n  let AUTH = {};\n  const regKey = registry && registryKey(registry);\n  if (opts.forceAuth) {\n    opts = opts.forceAuth;\n  }\n  const doKey = (key, alias) => addKey(opts, AUTH, regKey, key, alias);\n  doKey('token');\n  doKey('_authToken', 'token');\n  doKey('username');\n  doKey('password');\n  doKey('_password', 'password');\n  doKey('email');\n  doKey('_auth');\n  doKey('otp');\n  doKey('always-auth', 'alwaysAuth');\n  if (AUTH.password) {\n    AUTH.password = Buffer.from(AUTH.password, 'base64').toString('utf8');\n  }\n  if (AUTH._auth && !(AUTH.username && AUTH.password)) {\n    let auth = Buffer.from(AUTH._auth, 'base64').toString();\n    auth = auth.split(':');\n    AUTH.username = auth.shift();\n    AUTH.password = auth.join(':');\n  }\n  AUTH.alwaysAuth = AUTH.alwaysAuth === 'false' ? false : !!AUTH.alwaysAuth;\n  return AUTH;\n}\nfunction addKey(opts, obj, scope, key, objKey) {\n  if (opts[key]) {\n    obj[objKey || key] = opts[key];\n  }\n  if (scope && opts[`${scope}:${key}`]) {\n    obj[objKey || key] = opts[`${scope}:${key}`];\n  }\n}\n\n// Called a nerf dart in the main codebase. Used as a \"safe\"\n// key when fetching registry info from config.\nfunction registryKey(registry) {\n  const parsed = url.parse(registry);\n  const formatted = url.format({\n    host: parsed.host,\n    pathname: parsed.pathname,\n    slashes: parsed.slashes\n  });\n  return url.resolve(formatted, '.');\n}","map":{"version":3,"names":["config","require","url","module","exports","getAuth","registry","opts","Error","AUTH","regKey","registryKey","forceAuth","doKey","key","alias","addKey","password","Buffer","from","toString","_auth","username","auth","split","shift","join","alwaysAuth","obj","scope","objKey","parsed","parse","formatted","format","host","pathname","slashes","resolve"],"sources":["/Users/hkateliev/node_modules/npm/node_modules/npm-registry-fetch/auth.js"],"sourcesContent":["'use strict'\n\nconst config = require('./config.js')\nconst url = require('url')\n\nmodule.exports = getAuth\nfunction getAuth (registry, opts) {\n  if (!registry) { throw new Error('registry is required') }\n  opts = config(opts)\n  let AUTH = {}\n  const regKey = registry && registryKey(registry)\n  if (opts.forceAuth) {\n    opts = opts.forceAuth\n  }\n  const doKey = (key, alias) => addKey(opts, AUTH, regKey, key, alias)\n  doKey('token')\n  doKey('_authToken', 'token')\n  doKey('username')\n  doKey('password')\n  doKey('_password', 'password')\n  doKey('email')\n  doKey('_auth')\n  doKey('otp')\n  doKey('always-auth', 'alwaysAuth')\n  if (AUTH.password) {\n    AUTH.password = Buffer.from(AUTH.password, 'base64').toString('utf8')\n  }\n  if (AUTH._auth && !(AUTH.username && AUTH.password)) {\n    let auth = Buffer.from(AUTH._auth, 'base64').toString()\n    auth = auth.split(':')\n    AUTH.username = auth.shift()\n    AUTH.password = auth.join(':')\n  }\n  AUTH.alwaysAuth = AUTH.alwaysAuth === 'false' ? false : !!AUTH.alwaysAuth\n  return AUTH\n}\n\nfunction addKey (opts, obj, scope, key, objKey) {\n  if (opts[key]) {\n    obj[objKey || key] = opts[key]\n  }\n  if (scope && opts[`${scope}:${key}`]) {\n    obj[objKey || key] = opts[`${scope}:${key}`]\n  }\n}\n\n// Called a nerf dart in the main codebase. Used as a \"safe\"\n// key when fetching registry info from config.\nfunction registryKey (registry) {\n  const parsed = url.parse(registry)\n  const formatted = url.format({\n    host: parsed.host,\n    pathname: parsed.pathname,\n    slashes: parsed.slashes\n  })\n  return url.resolve(formatted, '.')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}