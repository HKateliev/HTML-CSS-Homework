{"ast":null,"code":"'use strict';\n\n/*\n * Method\n *\n * Methods are added, conceptually, to Genfuns, not to objects\n * themselves, although the Genfun object does not have any pointers to\n * method objects.\n *\n * The _rank vector is an internal datastructure used during dispatch\n * to figure out whether a method is applicable, and if so, how to\n * order multiple discovered methods.\n *\n * Right now, the score method on Method does not take into account any\n * ordering, and all arguments to a method are ranked equally for the\n * sake of ordering.\n *\n */\nconst Role = require('./role');\nconst util = require('./util');\nmodule.exports = Method;\nfunction Method(genfun, selector, func) {\n  var method = this;\n  method.genfun = genfun;\n  method.func = func;\n  method._rank = [];\n  method.minimalSelector = 0;\n  const tmpSelector = selector.length ? selector : [Object.prototype];\n  for (var object, i = tmpSelector.length - 1; i >= 0; i--) {\n    object = Object.hasOwnProperty.call(tmpSelector, i) ? tmpSelector[i] : Object.prototype;\n    object = util.dispatchableObject(object);\n    if (typeof object === 'function' && !object.isGenfun) {\n      object = object.prototype;\n    }\n    if (i > 0 && !method.minimalSelector && util.isObjectProto(object)) {\n      continue;\n    } else {\n      method.minimalSelector++;\n      if (!Object.hasOwnProperty.call(object, Role.roleKeyName)) {\n        // Object.defineProperty is JS 1.8.0+\n        Object.defineProperty(object, Role.roleKeyName, {\n          value: [],\n          enumerable: false\n        });\n      }\n      // XXX HACK - no method replacement now, so we just shove\n      // it in a place where it'll always show up first. This\n      // would probably seriously break method combination if we\n      // had it.\n      object[Role.roleKeyName].unshift(new Role(method, i));\n    }\n  }\n}\nMethod.setRankHierarchyPosition = (method, index, hierarchyPosition) => {\n  method._rank[index] = hierarchyPosition;\n};\nMethod.clearRank = method => {\n  method._rank = [];\n};\nMethod.isFullySpecified = method => {\n  for (var i = 0; i < method.minimalSelector; i++) {\n    if (!method._rank.hasOwnProperty(i)) {\n      return false;\n    }\n  }\n  return true;\n};\nMethod.score = method => {\n  // TODO - this makes all items in the list equal\n  return method._rank.reduce((a, b) => a + b, 0);\n};","map":{"version":3,"names":["Role","require","util","module","exports","Method","genfun","selector","func","method","_rank","minimalSelector","tmpSelector","length","Object","prototype","object","i","hasOwnProperty","call","dispatchableObject","isGenfun","isObjectProto","roleKeyName","defineProperty","value","enumerable","unshift","setRankHierarchyPosition","index","hierarchyPosition","clearRank","isFullySpecified","score","reduce","a","b"],"sources":["/Users/hkateliev/node_modules/npm/node_modules/genfun/lib/method.js"],"sourcesContent":["'use strict'\n\n/*\n * Method\n *\n * Methods are added, conceptually, to Genfuns, not to objects\n * themselves, although the Genfun object does not have any pointers to\n * method objects.\n *\n * The _rank vector is an internal datastructure used during dispatch\n * to figure out whether a method is applicable, and if so, how to\n * order multiple discovered methods.\n *\n * Right now, the score method on Method does not take into account any\n * ordering, and all arguments to a method are ranked equally for the\n * sake of ordering.\n *\n */\nconst Role = require('./role')\nconst util = require('./util')\n\nmodule.exports = Method\nfunction Method (genfun, selector, func) {\n  var method = this\n  method.genfun = genfun\n  method.func = func\n  method._rank = []\n  method.minimalSelector = 0\n\n  const tmpSelector = selector.length ? selector : [Object.prototype]\n  for (var object, i = tmpSelector.length - 1; i >= 0; i--) {\n    object = Object.hasOwnProperty.call(tmpSelector, i)\n    ? tmpSelector[i]\n    : Object.prototype\n    object = util.dispatchableObject(object)\n    if (\n      typeof object === 'function' &&\n      !object.isGenfun\n    ) {\n      object = object.prototype\n    }\n    if (i > 0 &&\n        !method.minimalSelector &&\n        util.isObjectProto(object)) {\n      continue\n    } else {\n      method.minimalSelector++\n      if (!Object.hasOwnProperty.call(object, Role.roleKeyName)) {\n        // Object.defineProperty is JS 1.8.0+\n        Object.defineProperty(\n          object, Role.roleKeyName, {value: [], enumerable: false})\n      }\n      // XXX HACK - no method replacement now, so we just shove\n      // it in a place where it'll always show up first. This\n      // would probably seriously break method combination if we\n      // had it.\n      object[Role.roleKeyName].unshift(new Role(method, i))\n    }\n  }\n}\n\nMethod.setRankHierarchyPosition = (method, index, hierarchyPosition) => {\n  method._rank[index] = hierarchyPosition\n}\n\nMethod.clearRank = method => {\n  method._rank = []\n}\n\nMethod.isFullySpecified = method => {\n  for (var i = 0; i < method.minimalSelector; i++) {\n    if (!method._rank.hasOwnProperty(i)) {\n      return false\n    }\n  }\n  return true\n}\n\nMethod.score = method => {\n  // TODO - this makes all items in the list equal\n  return method._rank.reduce((a, b) => a + b, 0)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}