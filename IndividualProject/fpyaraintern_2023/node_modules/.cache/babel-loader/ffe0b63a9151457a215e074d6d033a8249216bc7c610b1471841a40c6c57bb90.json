{"ast":null,"code":"'use strict';\n\n// tar -x\nconst hlo = require('./high-level-opt.js');\nconst Unpack = require('./unpack.js');\nconst fs = require('fs');\nconst fsm = require('fs-minipass');\nconst path = require('path');\nconst stripSlash = require('./strip-trailing-slashes.js');\nconst x = module.exports = (opt_, files, cb) => {\n  if (typeof opt_ === 'function') cb = opt_, files = null, opt_ = {};else if (Array.isArray(opt_)) files = opt_, opt_ = {};\n  if (typeof files === 'function') cb = files, files = null;\n  if (!files) files = [];else files = Array.from(files);\n  const opt = hlo(opt_);\n  if (opt.sync && typeof cb === 'function') throw new TypeError('callback not supported for sync tar functions');\n  if (!opt.file && typeof cb === 'function') throw new TypeError('callback only supported with file option');\n  if (files.length) filesFilter(opt, files);\n  return opt.file && opt.sync ? extractFileSync(opt) : opt.file ? extractFile(opt, cb) : opt.sync ? extractSync(opt) : extract(opt);\n};\n\n// construct a filter that limits the file entries listed\n// include child entries if a dir is included\nconst filesFilter = (opt, files) => {\n  const map = new Map(files.map(f => [stripSlash(f), true]));\n  const filter = opt.filter;\n  const mapHas = (file, r) => {\n    const root = r || path.parse(file).root || '.';\n    const ret = file === root ? false : map.has(file) ? map.get(file) : mapHas(path.dirname(file), root);\n    map.set(file, ret);\n    return ret;\n  };\n  opt.filter = filter ? (file, entry) => filter(file, entry) && mapHas(stripSlash(file)) : file => mapHas(stripSlash(file));\n};\nconst extractFileSync = opt => {\n  const u = new Unpack.Sync(opt);\n  const file = opt.file;\n  let threw = true;\n  let fd;\n  const stat = fs.statSync(file);\n  // This trades a zero-byte read() syscall for a stat\n  // However, it will usually result in less memory allocation\n  const readSize = opt.maxReadSize || 16 * 1024 * 1024;\n  const stream = new fsm.ReadStreamSync(file, {\n    readSize: readSize,\n    size: stat.size\n  });\n  stream.pipe(u);\n};\nconst extractFile = (opt, cb) => {\n  const u = new Unpack(opt);\n  const readSize = opt.maxReadSize || 16 * 1024 * 1024;\n  const file = opt.file;\n  const p = new Promise((resolve, reject) => {\n    u.on('error', reject);\n    u.on('close', resolve);\n\n    // This trades a zero-byte read() syscall for a stat\n    // However, it will usually result in less memory allocation\n    fs.stat(file, (er, stat) => {\n      if (er) reject(er);else {\n        const stream = new fsm.ReadStream(file, {\n          readSize: readSize,\n          size: stat.size\n        });\n        stream.on('error', reject);\n        stream.pipe(u);\n      }\n    });\n  });\n  return cb ? p.then(cb, cb) : p;\n};\nconst extractSync = opt => {\n  return new Unpack.Sync(opt);\n};\nconst extract = opt => {\n  return new Unpack(opt);\n};","map":{"version":3,"names":["hlo","require","Unpack","fs","fsm","path","stripSlash","x","module","exports","opt_","files","cb","Array","isArray","from","opt","sync","TypeError","file","length","filesFilter","extractFileSync","extractFile","extractSync","extract","map","Map","f","filter","mapHas","r","root","parse","ret","has","get","dirname","set","entry","u","Sync","threw","fd","stat","statSync","readSize","maxReadSize","stream","ReadStreamSync","size","pipe","p","Promise","resolve","reject","on","er","ReadStream","then"],"sources":["/Users/hkateliev/node_modules/npm/node_modules/tar/lib/extract.js"],"sourcesContent":["'use strict'\n\n// tar -x\nconst hlo = require('./high-level-opt.js')\nconst Unpack = require('./unpack.js')\nconst fs = require('fs')\nconst fsm = require('fs-minipass')\nconst path = require('path')\nconst stripSlash = require('./strip-trailing-slashes.js')\n\nconst x = module.exports = (opt_, files, cb) => {\n  if (typeof opt_ === 'function')\n    cb = opt_, files = null, opt_ = {}\n  else if (Array.isArray(opt_))\n    files = opt_, opt_ = {}\n\n  if (typeof files === 'function')\n    cb = files, files = null\n\n  if (!files)\n    files = []\n  else\n    files = Array.from(files)\n\n  const opt = hlo(opt_)\n\n  if (opt.sync && typeof cb === 'function')\n    throw new TypeError('callback not supported for sync tar functions')\n\n  if (!opt.file && typeof cb === 'function')\n    throw new TypeError('callback only supported with file option')\n\n  if (files.length)\n    filesFilter(opt, files)\n\n  return opt.file && opt.sync ? extractFileSync(opt)\n    : opt.file ? extractFile(opt, cb)\n    : opt.sync ? extractSync(opt)\n    : extract(opt)\n}\n\n// construct a filter that limits the file entries listed\n// include child entries if a dir is included\nconst filesFilter = (opt, files) => {\n  const map = new Map(files.map(f => [stripSlash(f), true]))\n  const filter = opt.filter\n\n  const mapHas = (file, r) => {\n    const root = r || path.parse(file).root || '.'\n    const ret = file === root ? false\n      : map.has(file) ? map.get(file)\n      : mapHas(path.dirname(file), root)\n\n    map.set(file, ret)\n    return ret\n  }\n\n  opt.filter = filter\n    ? (file, entry) => filter(file, entry) && mapHas(stripSlash(file))\n    : file => mapHas(stripSlash(file))\n}\n\nconst extractFileSync = opt => {\n  const u = new Unpack.Sync(opt)\n\n  const file = opt.file\n  let threw = true\n  let fd\n  const stat = fs.statSync(file)\n  // This trades a zero-byte read() syscall for a stat\n  // However, it will usually result in less memory allocation\n  const readSize = opt.maxReadSize || 16*1024*1024\n  const stream = new fsm.ReadStreamSync(file, {\n    readSize: readSize,\n    size: stat.size\n  })\n  stream.pipe(u)\n}\n\nconst extractFile = (opt, cb) => {\n  const u = new Unpack(opt)\n  const readSize = opt.maxReadSize || 16*1024*1024\n\n  const file = opt.file\n  const p = new Promise((resolve, reject) => {\n    u.on('error', reject)\n    u.on('close', resolve)\n\n    // This trades a zero-byte read() syscall for a stat\n    // However, it will usually result in less memory allocation\n    fs.stat(file, (er, stat) => {\n      if (er)\n        reject(er)\n      else {\n        const stream = new fsm.ReadStream(file, {\n          readSize: readSize,\n          size: stat.size\n        })\n        stream.on('error', reject)\n        stream.pipe(u)\n      }\n    })\n  })\n  return cb ? p.then(cb, cb) : p\n}\n\nconst extractSync = opt => {\n  return new Unpack.Sync(opt)\n}\n\nconst extract = opt => {\n  return new Unpack(opt)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}