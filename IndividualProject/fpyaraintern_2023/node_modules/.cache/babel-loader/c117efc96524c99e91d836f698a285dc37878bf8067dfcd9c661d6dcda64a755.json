{"ast":null,"code":"'use strict';\n\nvar validate = require('aproba');\nvar moduleName = require('../utils/module-name.js');\nmodule.exports = flattenTree;\nmodule.exports.flatName = flatName;\nmodule.exports.flatNameFromTree = flatNameFromTree;\nfunction flattenTree(tree) {\n  validate('O', arguments);\n  var seen = new Set();\n  var flat = {};\n  var todo = [[tree, '/']];\n  while (todo.length) {\n    var next = todo.shift();\n    var pkg = next[0];\n    seen.add(pkg);\n    var path = next[1];\n    flat[path] = pkg;\n    if (path !== '/') path += '/';\n    for (var ii = 0; ii < pkg.children.length; ++ii) {\n      var child = pkg.children[ii];\n      if (!seen.has(child)) {\n        todo.push([child, flatName(path, child)]);\n      }\n    }\n  }\n  return flat;\n}\nfunction flatName(path, child) {\n  validate('SO', arguments);\n  return path + (moduleName(child) || 'TOP');\n}\nfunction flatNameFromTree(tree) {\n  validate('O', arguments);\n  if (tree.isTop) return '/';\n  var path = flatNameFromTree(tree.parent);\n  if (path !== '/') path += '/';\n  return flatName(path, tree);\n}","map":{"version":3,"names":["validate","require","moduleName","module","exports","flattenTree","flatName","flatNameFromTree","tree","arguments","seen","Set","flat","todo","length","next","shift","pkg","add","path","ii","children","child","has","push","isTop","parent"],"sources":["/Users/hkateliev/node_modules/npm/lib/install/flatten-tree.js"],"sourcesContent":["'use strict'\nvar validate = require('aproba')\nvar moduleName = require('../utils/module-name.js')\n\nmodule.exports = flattenTree\nmodule.exports.flatName = flatName\nmodule.exports.flatNameFromTree = flatNameFromTree\n\nfunction flattenTree (tree) {\n  validate('O', arguments)\n  var seen = new Set()\n  var flat = {}\n  var todo = [[tree, '/']]\n  while (todo.length) {\n    var next = todo.shift()\n    var pkg = next[0]\n    seen.add(pkg)\n    var path = next[1]\n    flat[path] = pkg\n    if (path !== '/') path += '/'\n    for (var ii = 0; ii < pkg.children.length; ++ii) {\n      var child = pkg.children[ii]\n      if (!seen.has(child)) {\n        todo.push([child, flatName(path, child)])\n      }\n    }\n  }\n  return flat\n}\n\nfunction flatName (path, child) {\n  validate('SO', arguments)\n  return path + (moduleName(child) || 'TOP')\n}\n\nfunction flatNameFromTree (tree) {\n  validate('O', arguments)\n  if (tree.isTop) return '/'\n  var path = flatNameFromTree(tree.parent)\n  if (path !== '/') path += '/'\n  return flatName(path, tree)\n}\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,QAAQ,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,IAAIC,UAAU,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AAEnDE,MAAM,CAACC,OAAO,GAAGC,WAAW;AAC5BF,MAAM,CAACC,OAAO,CAACE,QAAQ,GAAGA,QAAQ;AAClCH,MAAM,CAACC,OAAO,CAACG,gBAAgB,GAAGA,gBAAgB;AAElD,SAASF,WAAWA,CAAEG,IAAI,EAAE;EAC1BR,QAAQ,CAAC,GAAG,EAAES,SAAS,CAAC;EACxB,IAAIC,IAAI,GAAG,IAAIC,GAAG,EAAE;EACpB,IAAIC,IAAI,GAAG,CAAC,CAAC;EACb,IAAIC,IAAI,GAAG,CAAC,CAACL,IAAI,EAAE,GAAG,CAAC,CAAC;EACxB,OAAOK,IAAI,CAACC,MAAM,EAAE;IAClB,IAAIC,IAAI,GAAGF,IAAI,CAACG,KAAK,EAAE;IACvB,IAAIC,GAAG,GAAGF,IAAI,CAAC,CAAC,CAAC;IACjBL,IAAI,CAACQ,GAAG,CAACD,GAAG,CAAC;IACb,IAAIE,IAAI,GAAGJ,IAAI,CAAC,CAAC,CAAC;IAClBH,IAAI,CAACO,IAAI,CAAC,GAAGF,GAAG;IAChB,IAAIE,IAAI,KAAK,GAAG,EAAEA,IAAI,IAAI,GAAG;IAC7B,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGH,GAAG,CAACI,QAAQ,CAACP,MAAM,EAAE,EAAEM,EAAE,EAAE;MAC/C,IAAIE,KAAK,GAAGL,GAAG,CAACI,QAAQ,CAACD,EAAE,CAAC;MAC5B,IAAI,CAACV,IAAI,CAACa,GAAG,CAACD,KAAK,CAAC,EAAE;QACpBT,IAAI,CAACW,IAAI,CAAC,CAACF,KAAK,EAAEhB,QAAQ,CAACa,IAAI,EAAEG,KAAK,CAAC,CAAC,CAAC;MAC3C;IACF;EACF;EACA,OAAOV,IAAI;AACb;AAEA,SAASN,QAAQA,CAAEa,IAAI,EAAEG,KAAK,EAAE;EAC9BtB,QAAQ,CAAC,IAAI,EAAES,SAAS,CAAC;EACzB,OAAOU,IAAI,IAAIjB,UAAU,CAACoB,KAAK,CAAC,IAAI,KAAK,CAAC;AAC5C;AAEA,SAASf,gBAAgBA,CAAEC,IAAI,EAAE;EAC/BR,QAAQ,CAAC,GAAG,EAAES,SAAS,CAAC;EACxB,IAAID,IAAI,CAACiB,KAAK,EAAE,OAAO,GAAG;EAC1B,IAAIN,IAAI,GAAGZ,gBAAgB,CAACC,IAAI,CAACkB,MAAM,CAAC;EACxC,IAAIP,IAAI,KAAK,GAAG,EAAEA,IAAI,IAAI,GAAG;EAC7B,OAAOb,QAAQ,CAACa,IAAI,EAAEX,IAAI,CAAC;AAC7B"},"metadata":{},"sourceType":"script","externalDependencies":[]}