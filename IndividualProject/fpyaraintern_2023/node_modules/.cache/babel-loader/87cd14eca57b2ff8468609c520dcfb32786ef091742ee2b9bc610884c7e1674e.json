{"ast":null,"code":"'use strict';\n\nconst spawn = require('child_process').spawn;\nconst path = require('path');\nconst format = require('util').format;\nconst importLazy = require('import-lazy')(require);\nconst configstore = importLazy('configstore');\nconst chalk = importLazy('chalk');\nconst semverDiff = importLazy('semver-diff');\nconst latestVersion = importLazy('latest-version');\nconst isNpm = importLazy('is-npm');\nconst isInstalledGlobally = importLazy('is-installed-globally');\nconst boxen = importLazy('boxen');\nconst xdgBasedir = importLazy('xdg-basedir');\nconst isCi = importLazy('is-ci');\nconst ONE_DAY = 1000 * 60 * 60 * 24;\nclass UpdateNotifier {\n  constructor(options) {\n    options = options || {};\n    this.options = options;\n    options.pkg = options.pkg || {};\n\n    // Reduce pkg to the essential keys. with fallback to deprecated options\n    // TODO: Remove deprecated options at some point far into the future\n    options.pkg = {\n      name: options.pkg.name || options.packageName,\n      version: options.pkg.version || options.packageVersion\n    };\n    if (!options.pkg.name || !options.pkg.version) {\n      throw new Error('pkg.name and pkg.version required');\n    }\n    this.packageName = options.pkg.name;\n    this.packageVersion = options.pkg.version;\n    this.updateCheckInterval = typeof options.updateCheckInterval === 'number' ? options.updateCheckInterval : ONE_DAY;\n    this.hasCallback = typeof options.callback === 'function';\n    this.callback = options.callback || (() => {});\n    this.disabled = 'NO_UPDATE_NOTIFIER' in process.env || process.argv.indexOf('--no-update-notifier') !== -1 || isCi();\n    this.shouldNotifyInNpmScript = options.shouldNotifyInNpmScript;\n    if (!this.disabled && !this.hasCallback) {\n      try {\n        const ConfigStore = configstore();\n        this.config = new ConfigStore(`update-notifier-${this.packageName}`, {\n          optOut: false,\n          // Init with the current time so the first check is only\n          // after the set interval, so not to bother users right away\n          lastUpdateCheck: Date.now()\n        });\n      } catch (err) {\n        // Expecting error code EACCES or EPERM\n        const msg = chalk().yellow(format(' %s update check failed ', options.pkg.name)) + format('\\n Try running with %s or get access ', chalk().cyan('sudo')) + '\\n to the local update config store via \\n' + chalk().cyan(format(' sudo chown -R $USER:$(id -gn $USER) %s ', xdgBasedir().config));\n        process.on('exit', () => {\n          console.error('\\n' + boxen()(msg, {\n            align: 'center'\n          }));\n        });\n      }\n    }\n  }\n  check() {\n    if (this.hasCallback) {\n      this.checkNpm().then(update => this.callback(null, update)).catch(err => this.callback(err));\n      return;\n    }\n    if (!this.config || this.config.get('optOut') || this.disabled) {\n      return;\n    }\n    this.update = this.config.get('update');\n    if (this.update) {\n      this.config.delete('update');\n    }\n\n    // Only check for updates on a set interval\n    if (Date.now() - this.config.get('lastUpdateCheck') < this.updateCheckInterval) {\n      return;\n    }\n\n    // Spawn a detached process, passing the options as an environment property\n    spawn(process.execPath, [path.join(__dirname, 'check.js'), JSON.stringify(this.options)], {\n      detached: true,\n      stdio: 'ignore'\n    }).unref();\n  }\n  checkNpm() {\n    return latestVersion()(this.packageName).then(latestVersion => {\n      return {\n        latest: latestVersion,\n        current: this.packageVersion,\n        type: semverDiff()(this.packageVersion, latestVersion) || 'latest',\n        name: this.packageName\n      };\n    });\n  }\n  notify(opts) {\n    const suppressForNpm = !this.shouldNotifyInNpmScript && isNpm();\n    if (!process.stdout.isTTY || suppressForNpm || !this.update) {\n      return this;\n    }\n    opts = Object.assign({\n      isGlobal: isInstalledGlobally()\n    }, opts);\n    opts.message = opts.message || 'Update available ' + chalk().dim(this.update.current) + chalk().reset(' â†’ ') + chalk().green(this.update.latest) + ' \\nRun ' + chalk().cyan('npm i ' + (opts.isGlobal ? '-g ' : '') + this.packageName) + ' to update';\n    opts.boxenOpts = opts.boxenOpts || {\n      padding: 1,\n      margin: 1,\n      align: 'center',\n      borderColor: 'yellow',\n      borderStyle: 'round'\n    };\n    const message = '\\n' + boxen()(opts.message, opts.boxenOpts);\n    if (opts.defer === false) {\n      console.error(message);\n    } else {\n      process.on('exit', () => {\n        console.error(message);\n      });\n      process.on('SIGINT', () => {\n        console.error('');\n        process.exit();\n      });\n    }\n    return this;\n  }\n}\nmodule.exports = options => {\n  const updateNotifier = new UpdateNotifier(options);\n  updateNotifier.check();\n  return updateNotifier;\n};\nmodule.exports.UpdateNotifier = UpdateNotifier;","map":{"version":3,"names":["spawn","require","path","format","importLazy","configstore","chalk","semverDiff","latestVersion","isNpm","isInstalledGlobally","boxen","xdgBasedir","isCi","ONE_DAY","UpdateNotifier","constructor","options","pkg","name","packageName","version","packageVersion","Error","updateCheckInterval","hasCallback","callback","disabled","process","env","argv","indexOf","shouldNotifyInNpmScript","ConfigStore","config","optOut","lastUpdateCheck","Date","now","err","msg","yellow","cyan","on","console","error","align","check","checkNpm","then","update","catch","get","delete","execPath","join","__dirname","JSON","stringify","detached","stdio","unref","latest","current","type","notify","opts","suppressForNpm","stdout","isTTY","Object","assign","isGlobal","message","dim","reset","green","boxenOpts","padding","margin","borderColor","borderStyle","defer","exit","module","exports","updateNotifier"],"sources":["/Users/hkateliev/node_modules/npm/node_modules/update-notifier/index.js"],"sourcesContent":["'use strict';\nconst spawn = require('child_process').spawn;\nconst path = require('path');\nconst format = require('util').format;\nconst importLazy = require('import-lazy')(require);\n\nconst configstore = importLazy('configstore');\nconst chalk = importLazy('chalk');\nconst semverDiff = importLazy('semver-diff');\nconst latestVersion = importLazy('latest-version');\nconst isNpm = importLazy('is-npm');\nconst isInstalledGlobally = importLazy('is-installed-globally');\nconst boxen = importLazy('boxen');\nconst xdgBasedir = importLazy('xdg-basedir');\nconst isCi = importLazy('is-ci');\nconst ONE_DAY = 1000 * 60 * 60 * 24;\n\nclass UpdateNotifier {\n\tconstructor(options) {\n\t\toptions = options || {};\n\t\tthis.options = options;\n\t\toptions.pkg = options.pkg || {};\n\n\t\t// Reduce pkg to the essential keys. with fallback to deprecated options\n\t\t// TODO: Remove deprecated options at some point far into the future\n\t\toptions.pkg = {\n\t\t\tname: options.pkg.name || options.packageName,\n\t\t\tversion: options.pkg.version || options.packageVersion\n\t\t};\n\n\t\tif (!options.pkg.name || !options.pkg.version) {\n\t\t\tthrow new Error('pkg.name and pkg.version required');\n\t\t}\n\n\t\tthis.packageName = options.pkg.name;\n\t\tthis.packageVersion = options.pkg.version;\n\t\tthis.updateCheckInterval = typeof options.updateCheckInterval === 'number' ? options.updateCheckInterval : ONE_DAY;\n\t\tthis.hasCallback = typeof options.callback === 'function';\n\t\tthis.callback = options.callback || (() => {});\n\t\tthis.disabled = 'NO_UPDATE_NOTIFIER' in process.env ||\n\t\t\tprocess.argv.indexOf('--no-update-notifier') !== -1 ||\n\t\t\tisCi();\n\t\tthis.shouldNotifyInNpmScript = options.shouldNotifyInNpmScript;\n\n\t\tif (!this.disabled && !this.hasCallback) {\n\t\t\ttry {\n\t\t\t\tconst ConfigStore = configstore();\n\t\t\t\tthis.config = new ConfigStore(`update-notifier-${this.packageName}`, {\n\t\t\t\t\toptOut: false,\n\t\t\t\t\t// Init with the current time so the first check is only\n\t\t\t\t\t// after the set interval, so not to bother users right away\n\t\t\t\t\tlastUpdateCheck: Date.now()\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\t// Expecting error code EACCES or EPERM\n\t\t\t\tconst msg =\n\t\t\t\t\tchalk().yellow(format(' %s update check failed ', options.pkg.name)) +\n\t\t\t\t\tformat('\\n Try running with %s or get access ', chalk().cyan('sudo')) +\n\t\t\t\t\t'\\n to the local update config store via \\n' +\n\t\t\t\t\tchalk().cyan(format(' sudo chown -R $USER:$(id -gn $USER) %s ', xdgBasedir().config));\n\n\t\t\t\tprocess.on('exit', () => {\n\t\t\t\t\tconsole.error('\\n' + boxen()(msg, {align: 'center'}));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\tcheck() {\n\t\tif (this.hasCallback) {\n\t\t\tthis.checkNpm()\n\t\t\t\t.then(update => this.callback(null, update))\n\t\t\t\t.catch(err => this.callback(err));\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\t!this.config ||\n\t\t\tthis.config.get('optOut') ||\n\t\t\tthis.disabled\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.update = this.config.get('update');\n\n\t\tif (this.update) {\n\t\t\tthis.config.delete('update');\n\t\t}\n\n\t\t// Only check for updates on a set interval\n\t\tif (Date.now() - this.config.get('lastUpdateCheck') < this.updateCheckInterval) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Spawn a detached process, passing the options as an environment property\n\t\tspawn(process.execPath, [path.join(__dirname, 'check.js'), JSON.stringify(this.options)], {\n\t\t\tdetached: true,\n\t\t\tstdio: 'ignore'\n\t\t}).unref();\n\t}\n\tcheckNpm() {\n\t\treturn latestVersion()(this.packageName).then(latestVersion => {\n\t\t\treturn {\n\t\t\t\tlatest: latestVersion,\n\t\t\t\tcurrent: this.packageVersion,\n\t\t\t\ttype: semverDiff()(this.packageVersion, latestVersion) || 'latest',\n\t\t\t\tname: this.packageName\n\t\t\t};\n\t\t});\n\t}\n\tnotify(opts) {\n\t\tconst suppressForNpm = !this.shouldNotifyInNpmScript && isNpm();\n\t\tif (!process.stdout.isTTY || suppressForNpm || !this.update) {\n\t\t\treturn this;\n\t\t}\n\n\t\topts = Object.assign({isGlobal: isInstalledGlobally()}, opts);\n\n\t\topts.message = opts.message || 'Update available ' + chalk().dim(this.update.current) + chalk().reset(' â†’ ') +\n\t\t\tchalk().green(this.update.latest) + ' \\nRun ' + chalk().cyan('npm i ' + (opts.isGlobal ? '-g ' : '') + this.packageName) + ' to update';\n\n\t\topts.boxenOpts = opts.boxenOpts || {\n\t\t\tpadding: 1,\n\t\t\tmargin: 1,\n\t\t\talign: 'center',\n\t\t\tborderColor: 'yellow',\n\t\t\tborderStyle: 'round'\n\t\t};\n\n\t\tconst message = '\\n' + boxen()(opts.message, opts.boxenOpts);\n\n\t\tif (opts.defer === false) {\n\t\t\tconsole.error(message);\n\t\t} else {\n\t\t\tprocess.on('exit', () => {\n\t\t\t\tconsole.error(message);\n\t\t\t});\n\n\t\t\tprocess.on('SIGINT', () => {\n\t\t\t\tconsole.error('');\n\t\t\t\tprocess.exit();\n\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t}\n}\n\nmodule.exports = options => {\n\tconst updateNotifier = new UpdateNotifier(options);\n\tupdateNotifier.check();\n\treturn updateNotifier;\n};\n\nmodule.exports.UpdateNotifier = UpdateNotifier;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}