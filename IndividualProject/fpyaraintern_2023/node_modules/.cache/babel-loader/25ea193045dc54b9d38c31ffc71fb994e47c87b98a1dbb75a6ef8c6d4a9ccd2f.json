{"ast":null,"code":"'use strict';\n\n// Tar can encode large and negative numbers using a leading byte of\n// 0xff for negative, and 0x80 for positive.\nconst encode = exports.encode = (num, buf) => {\n  if (!Number.isSafeInteger(num))\n    // The number is so large that javascript cannot represent it with integer\n    // precision.\n    throw TypeError('cannot encode number outside of javascript safe integer range');else if (num < 0) encodeNegative(num, buf);else encodePositive(num, buf);\n  return buf;\n};\nconst encodePositive = (num, buf) => {\n  buf[0] = 0x80;\n  for (var i = buf.length; i > 1; i--) {\n    buf[i - 1] = num & 0xff;\n    num = Math.floor(num / 0x100);\n  }\n};\nconst encodeNegative = (num, buf) => {\n  buf[0] = 0xff;\n  var flipped = false;\n  num = num * -1;\n  for (var i = buf.length; i > 1; i--) {\n    var byte = num & 0xff;\n    num = Math.floor(num / 0x100);\n    if (flipped) buf[i - 1] = onesComp(byte);else if (byte === 0) buf[i - 1] = 0;else {\n      flipped = true;\n      buf[i - 1] = twosComp(byte);\n    }\n  }\n};\nconst parse = exports.parse = buf => {\n  var post = buf[buf.length - 1];\n  var pre = buf[0];\n  var value;\n  if (pre === 0x80) value = pos(buf.slice(1, buf.length));else if (pre === 0xff) value = twos(buf);else throw TypeError('invalid base256 encoding');\n  if (!Number.isSafeInteger(value))\n    // The number is so large that javascript cannot represent it with integer\n    // precision.\n    throw TypeError('parsed number outside of javascript safe integer range');\n  return value;\n};\nconst twos = buf => {\n  var len = buf.length;\n  var sum = 0;\n  var flipped = false;\n  for (var i = len - 1; i > -1; i--) {\n    var byte = buf[i];\n    var f;\n    if (flipped) f = onesComp(byte);else if (byte === 0) f = byte;else {\n      flipped = true;\n      f = twosComp(byte);\n    }\n    if (f !== 0) sum -= f * Math.pow(256, len - i - 1);\n  }\n  return sum;\n};\nconst pos = buf => {\n  var len = buf.length;\n  var sum = 0;\n  for (var i = len - 1; i > -1; i--) {\n    var byte = buf[i];\n    if (byte !== 0) sum += byte * Math.pow(256, len - i - 1);\n  }\n  return sum;\n};\nconst onesComp = byte => (0xff ^ byte) & 0xff;\nconst twosComp = byte => (0xff ^ byte) + 1 & 0xff;","map":{"version":3,"names":["encode","exports","num","buf","Number","isSafeInteger","TypeError","encodeNegative","encodePositive","i","length","Math","floor","flipped","byte","onesComp","twosComp","parse","post","pre","value","pos","slice","twos","len","sum","f","pow"],"sources":["/Users/hkateliev/node_modules/npm/node_modules/tar/lib/large-numbers.js"],"sourcesContent":["'use strict'\n// Tar can encode large and negative numbers using a leading byte of\n// 0xff for negative, and 0x80 for positive.\n\nconst encode = exports.encode = (num, buf) => {\n  if (!Number.isSafeInteger(num))\n    // The number is so large that javascript cannot represent it with integer\n    // precision.\n    throw TypeError('cannot encode number outside of javascript safe integer range')\n  else if (num < 0)\n    encodeNegative(num, buf)\n  else\n    encodePositive(num, buf)\n  return buf\n}\n\nconst encodePositive = (num, buf) => {\n  buf[0] = 0x80\n\n  for (var i = buf.length; i > 1; i--) {\n    buf[i-1] = num & 0xff\n    num = Math.floor(num / 0x100)\n  }\n}\n\nconst encodeNegative = (num, buf) => {\n  buf[0] = 0xff\n  var flipped = false\n  num = num * -1\n  for (var i = buf.length; i > 1; i--) {\n    var byte = num & 0xff\n    num = Math.floor(num / 0x100)\n    if (flipped)\n      buf[i-1] = onesComp(byte)\n    else if (byte === 0)\n      buf[i-1] = 0\n    else {\n      flipped = true\n      buf[i-1] = twosComp(byte)\n    }\n  }\n}\n\nconst parse = exports.parse = (buf) => {\n  var post = buf[buf.length - 1]\n  var pre = buf[0]\n  var value;\n  if (pre === 0x80)\n    value = pos(buf.slice(1, buf.length))\n  else if (pre === 0xff)\n    value = twos(buf)\n  else\n    throw TypeError('invalid base256 encoding')\n\n  if (!Number.isSafeInteger(value))\n    // The number is so large that javascript cannot represent it with integer\n    // precision.\n    throw TypeError('parsed number outside of javascript safe integer range')\n\n  return value\n}\n\nconst twos = (buf) => {\n  var len = buf.length\n  var sum = 0\n  var flipped = false\n  for (var i = len - 1; i > -1; i--) {\n    var byte = buf[i]\n    var f\n    if (flipped)\n      f = onesComp(byte)\n    else if (byte === 0)\n      f = byte\n    else {\n      flipped = true\n      f = twosComp(byte)\n    }\n    if (f !== 0)\n      sum -= f * Math.pow(256, len - i - 1)\n  }\n  return sum\n}\n\nconst pos = (buf) => {\n  var len = buf.length\n  var sum = 0\n  for (var i = len - 1; i > -1; i--) {\n    var byte = buf[i]\n    if (byte !== 0)\n      sum += byte * Math.pow(256, len - i - 1)\n  }\n  return sum\n}\n\nconst onesComp = byte => (0xff ^ byte) & 0xff\n\nconst twosComp = byte => ((0xff ^ byte) + 1) & 0xff\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}