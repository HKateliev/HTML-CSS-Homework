{"ast":null,"code":"#!/usr/bin/env node\n;\n(function () {\n  // wrapper in case we're in module_context mode\n  // windows: running \"npm blah\" in this folder will invoke WSH, not node.\n  /* global WScript */\n  if (typeof WScript !== 'undefined') {\n    WScript.echo('npm does not work when run\\n' + 'with the Windows Scripting Host\\n\\n' + \"'cd' to a different directory,\\n\" + \"or type 'npm.cmd <args>',\\n\" + \"or type 'node npm <args>'.\");\n    WScript.quit(1);\n    return;\n  }\n  process.title = 'npm';\n  var unsupported = require('../lib/utils/unsupported.js');\n  unsupported.checkForBrokenNode();\n  var log = require('npmlog');\n  log.pause(); // will be unpaused when config is loaded.\n  log.info('it worked if it ends with', 'ok');\n  unsupported.checkForUnsupportedNode();\n  var npm = require('../lib/npm.js');\n  var npmconf = require('../lib/config/core.js');\n  var errorHandler = require('../lib/utils/error-handler.js');\n  var replaceInfo = require('../lib/utils/replace-info.js');\n  var configDefs = npmconf.defs;\n  var shorthands = configDefs.shorthands;\n  var types = configDefs.types;\n  var nopt = require('nopt');\n\n  // if npm is called as \"npmg\" or \"npm_g\", then\n  // run in global mode.\n  if (process.argv[1][process.argv[1].length - 1] === 'g') {\n    process.argv.splice(1, 1, 'npm', '-g');\n  }\n  var args = replaceInfo(process.argv);\n  log.verbose('cli', args);\n  var conf = nopt(types, shorthands);\n  npm.argv = conf.argv.remain;\n  if (npm.deref(npm.argv[0])) npm.command = npm.argv.shift();else conf.usage = true;\n  if (conf.version) {\n    console.log(npm.version);\n    return errorHandler.exit(0);\n  }\n  if (conf.versions) {\n    npm.command = 'version';\n    conf.usage = false;\n    npm.argv = [];\n  }\n  log.info('using', 'npm@%s', npm.version);\n  log.info('using', 'node@%s', process.version);\n  process.on('uncaughtException', errorHandler);\n  process.on('unhandledRejection', errorHandler);\n  if (conf.usage && npm.command !== 'help') {\n    npm.argv.unshift(npm.command);\n    npm.command = 'help';\n  }\n  var isGlobalNpmUpdate = conf.global && ['install', 'update'].includes(npm.command) && npm.argv.includes('npm');\n\n  // now actually fire up npm and run the command.\n  // this is how to use npm programmatically:\n  conf._exit = true;\n  npm.load(conf, function (er) {\n    if (er) return errorHandler(er);\n    if (!isGlobalNpmUpdate && npm.config.get('update-notifier') && !unsupported.checkVersion(process.version).unsupported) {\n      const pkg = require('../package.json');\n      let notifier = require('update-notifier')({\n        pkg\n      });\n      const isCI = require('ci-info').isCI;\n      if (notifier.update && notifier.update.latest !== pkg.version && !isCI) {\n        const color = require('ansicolors');\n        const useColor = npm.config.get('color');\n        const useUnicode = npm.config.get('unicode');\n        const old = notifier.update.current;\n        const latest = notifier.update.latest;\n        let type = notifier.update.type;\n        if (useColor) {\n          switch (type) {\n            case 'major':\n              type = color.red(type);\n              break;\n            case 'minor':\n              type = color.yellow(type);\n              break;\n            case 'patch':\n              type = color.green(type);\n              break;\n          }\n        }\n        const changelog = `https://github.com/npm/cli/releases/tag/v${latest}`;\n        notifier.notify({\n          message: `New ${type} version of ${pkg.name} available! ${useColor ? color.red(old) : old} ${useUnicode ? 'â†’' : '->'} ${useColor ? color.green(latest) : latest}\\n` + `${useColor ? color.yellow('Changelog:') : 'Changelog:'} ${useColor ? color.cyan(changelog) : changelog}\\n` + `Run ${useColor ? color.green(`npm install -g ${pkg.name}`) : `npm i -g ${pkg.name}`} to update!`\n        });\n      }\n    }\n    npm.commands[npm.command](npm.argv, function (err) {\n      // https://genius.com/Lin-manuel-miranda-your-obedient-servant-lyrics\n      if (!err && npm.config.get('ham-it-up') && !npm.config.get('json') && !npm.config.get('parseable') && npm.command !== 'completion') {\n        console.error(`\\n ${npm.config.get('unicode') ? 'ðŸŽµ ' : ''} I Have the Honour to Be Your Obedient Servant,${npm.config.get('unicode') ? 'ðŸŽµ ' : ''} ~ npm ${npm.config.get('unicode') ? 'ðŸ“œðŸ–‹ ' : ''}\\n`);\n      }\n      errorHandler.apply(this, arguments);\n    });\n  });\n})();","map":{"version":3,"names":["WScript","echo","quit","process","title","unsupported","require","checkForBrokenNode","log","pause","info","checkForUnsupportedNode","npm","npmconf","errorHandler","replaceInfo","configDefs","defs","shorthands","types","nopt","argv","length","splice","args","verbose","conf","remain","deref","command","shift","usage","version","console","exit","versions","on","unshift","isGlobalNpmUpdate","global","includes","_exit","load","er","config","get","checkVersion","pkg","notifier","isCI","update","latest","color","useColor","useUnicode","old","current","type","red","yellow","green","changelog","notify","message","name","cyan","commands","err","error","apply","arguments"],"sources":["/Users/hkateliev/node_modules/npm/bin/npm-cli.js"],"sourcesContent":["#!/usr/bin/env node\n;(function () { // wrapper in case we're in module_context mode\n  // windows: running \"npm blah\" in this folder will invoke WSH, not node.\n  /* global WScript */\n  if (typeof WScript !== 'undefined') {\n    WScript.echo(\n      'npm does not work when run\\n' +\n        'with the Windows Scripting Host\\n\\n' +\n        \"'cd' to a different directory,\\n\" +\n        \"or type 'npm.cmd <args>',\\n\" +\n        \"or type 'node npm <args>'.\"\n    )\n    WScript.quit(1)\n    return\n  }\n\n  process.title = 'npm'\n\n  var unsupported = require('../lib/utils/unsupported.js')\n  unsupported.checkForBrokenNode()\n\n  var log = require('npmlog')\n  log.pause() // will be unpaused when config is loaded.\n  log.info('it worked if it ends with', 'ok')\n\n  unsupported.checkForUnsupportedNode()\n\n  var npm = require('../lib/npm.js')\n  var npmconf = require('../lib/config/core.js')\n  var errorHandler = require('../lib/utils/error-handler.js')\n  var replaceInfo = require('../lib/utils/replace-info.js')\n\n  var configDefs = npmconf.defs\n  var shorthands = configDefs.shorthands\n  var types = configDefs.types\n  var nopt = require('nopt')\n\n  // if npm is called as \"npmg\" or \"npm_g\", then\n  // run in global mode.\n  if (process.argv[1][process.argv[1].length - 1] === 'g') {\n    process.argv.splice(1, 1, 'npm', '-g')\n  }\n\n  var args = replaceInfo(process.argv)\n  log.verbose('cli', args)\n\n  var conf = nopt(types, shorthands)\n  npm.argv = conf.argv.remain\n  if (npm.deref(npm.argv[0])) npm.command = npm.argv.shift()\n  else conf.usage = true\n\n  if (conf.version) {\n    console.log(npm.version)\n    return errorHandler.exit(0)\n  }\n\n  if (conf.versions) {\n    npm.command = 'version'\n    conf.usage = false\n    npm.argv = []\n  }\n\n  log.info('using', 'npm@%s', npm.version)\n  log.info('using', 'node@%s', process.version)\n\n  process.on('uncaughtException', errorHandler)\n  process.on('unhandledRejection', errorHandler)\n\n  if (conf.usage && npm.command !== 'help') {\n    npm.argv.unshift(npm.command)\n    npm.command = 'help'\n  }\n\n  var isGlobalNpmUpdate = conf.global && ['install', 'update'].includes(npm.command) && npm.argv.includes('npm')\n\n  // now actually fire up npm and run the command.\n  // this is how to use npm programmatically:\n  conf._exit = true\n  npm.load(conf, function (er) {\n    if (er) return errorHandler(er)\n    if (\n      !isGlobalNpmUpdate &&\n      npm.config.get('update-notifier') &&\n      !unsupported.checkVersion(process.version).unsupported\n    ) {\n      const pkg = require('../package.json')\n      let notifier = require('update-notifier')({pkg})\n      const isCI = require('ci-info').isCI\n      if (\n        notifier.update &&\n        notifier.update.latest !== pkg.version &&\n        !isCI\n      ) {\n        const color = require('ansicolors')\n        const useColor = npm.config.get('color')\n        const useUnicode = npm.config.get('unicode')\n        const old = notifier.update.current\n        const latest = notifier.update.latest\n        let type = notifier.update.type\n        if (useColor) {\n          switch (type) {\n            case 'major':\n              type = color.red(type)\n              break\n            case 'minor':\n              type = color.yellow(type)\n              break\n            case 'patch':\n              type = color.green(type)\n              break\n          }\n        }\n        const changelog = `https://github.com/npm/cli/releases/tag/v${latest}`\n        notifier.notify({\n          message: `New ${type} version of ${pkg.name} available! ${\n            useColor ? color.red(old) : old\n          } ${useUnicode ? 'â†’' : '->'} ${\n            useColor ? color.green(latest) : latest\n          }\\n` +\n          `${\n            useColor ? color.yellow('Changelog:') : 'Changelog:'\n          } ${\n            useColor ? color.cyan(changelog) : changelog\n          }\\n` +\n          `Run ${\n            useColor\n              ? color.green(`npm install -g ${pkg.name}`)\n              : `npm i -g ${pkg.name}`\n          } to update!`\n        })\n      }\n    }\n    npm.commands[npm.command](npm.argv, function (err) {\n      // https://genius.com/Lin-manuel-miranda-your-obedient-servant-lyrics\n      if (\n        !err &&\n        npm.config.get('ham-it-up') &&\n        !npm.config.get('json') &&\n        !npm.config.get('parseable') &&\n        npm.command !== 'completion'\n      ) {\n        console.error(\n          `\\n ${\n            npm.config.get('unicode') ? 'ðŸŽµ ' : ''\n          } I Have the Honour to Be Your Obedient Servant,${\n            npm.config.get('unicode') ? 'ðŸŽµ ' : ''\n          } ~ npm ${\n            npm.config.get('unicode') ? 'ðŸ“œðŸ–‹ ' : ''\n          }\\n`\n        )\n      }\n      errorHandler.apply(this, arguments)\n    })\n  })\n})()\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}