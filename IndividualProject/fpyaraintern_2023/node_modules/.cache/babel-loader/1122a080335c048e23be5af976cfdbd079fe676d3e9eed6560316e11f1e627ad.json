{"ast":null,"code":"'use strict';\n\nmodule.exports = qw;\nfunction appendLast(arr, str) {\n  var last = arr.length - 1;\n  if (last < 0) {\n    arr.push(str);\n  } else {\n    var lastValue = String(arr[last]);\n    return arr[last] = lastValue + String(str);\n  }\n}\nfunction qw() {\n  const args = Object.assign([], arguments[0]);\n  const values = [].slice.call(arguments, 1);\n  const words = [];\n  let lastWordWasValue = false;\n  while (args.length) {\n    const arg = args.shift();\n    const concatValue = arg.length === 0 || arg.slice(-1) !== ' ';\n    if (arg.trim() !== '') {\n      const theseWords = arg.replace(/^\\s+|\\s+$/g, '').replace(/\\s+/g, ' ').split(/ /);\n      if (lastWordWasValue && arg[0] !== ' ') {\n        appendLast(words, theseWords.shift());\n      }\n      words.push.apply(words, theseWords);\n    }\n    if (values.length) {\n      const val = values.shift();\n      if (concatValue) {\n        appendLast(words, val);\n      } else {\n        words.push(val);\n      }\n      lastWordWasValue = true;\n    } else {\n      lastWordWasValue = false;\n    }\n  }\n  return words;\n}","map":{"version":3,"names":["module","exports","qw","appendLast","arr","str","last","length","push","lastValue","String","args","Object","assign","arguments","values","slice","call","words","lastWordWasValue","arg","shift","concatValue","trim","theseWords","replace","split","apply","val"],"sources":["/Users/hkateliev/node_modules/npm/node_modules/qw/qw.js"],"sourcesContent":["'use strict'\nmodule.exports = qw\n\nfunction appendLast (arr, str) {\n  var last = arr.length - 1\n  if (last < 0) {\n    arr.push(str)\n  } else {\n    var lastValue = String(arr[last])\n    return arr[last] = lastValue + String(str)\n  }\n}\n\nfunction qw () {\n  const args = Object.assign([], arguments[0])\n  const values = [].slice.call(arguments, 1)\n  const words = []\n  let lastWordWasValue = false\n  while (args.length) {\n    const arg = args.shift()\n    const concatValue = arg.length === 0 || arg.slice(-1) !== ' '\n    if (arg.trim() !== '') {\n      const theseWords = arg.replace(/^\\s+|\\s+$/g, '').replace(/\\s+/g, ' ').split(/ /)\n      if (lastWordWasValue && arg[0] !== ' ') {\n        appendLast(words, theseWords.shift())\n      }\n      words.push.apply(words, theseWords)\n    }\n\n    if (values.length) {\n      const val = values.shift()\n      if (concatValue) {\n        appendLast(words, val)\n      } else {\n        words.push(val)\n      }\n      lastWordWasValue = true\n    } else {\n      lastWordWasValue = false\n    }\n  }\n  return words\n}\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,OAAO,GAAGC,EAAE;AAEnB,SAASC,UAAUA,CAAEC,GAAG,EAAEC,GAAG,EAAE;EAC7B,IAAIC,IAAI,GAAGF,GAAG,CAACG,MAAM,GAAG,CAAC;EACzB,IAAID,IAAI,GAAG,CAAC,EAAE;IACZF,GAAG,CAACI,IAAI,CAACH,GAAG,CAAC;EACf,CAAC,MAAM;IACL,IAAII,SAAS,GAAGC,MAAM,CAACN,GAAG,CAACE,IAAI,CAAC,CAAC;IACjC,OAAOF,GAAG,CAACE,IAAI,CAAC,GAAGG,SAAS,GAAGC,MAAM,CAACL,GAAG,CAAC;EAC5C;AACF;AAEA,SAASH,EAAEA,CAAA,EAAI;EACb,MAAMS,IAAI,GAAGC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEC,SAAS,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAMC,MAAM,GAAG,EAAE,CAACC,KAAK,CAACC,IAAI,CAACH,SAAS,EAAE,CAAC,CAAC;EAC1C,MAAMI,KAAK,GAAG,EAAE;EAChB,IAAIC,gBAAgB,GAAG,KAAK;EAC5B,OAAOR,IAAI,CAACJ,MAAM,EAAE;IAClB,MAAMa,GAAG,GAAGT,IAAI,CAACU,KAAK,EAAE;IACxB,MAAMC,WAAW,GAAGF,GAAG,CAACb,MAAM,KAAK,CAAC,IAAIa,GAAG,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG;IAC7D,IAAII,GAAG,CAACG,IAAI,EAAE,KAAK,EAAE,EAAE;MACrB,MAAMC,UAAU,GAAGJ,GAAG,CAACK,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC;MAChF,IAAIP,gBAAgB,IAAIC,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACtCjB,UAAU,CAACe,KAAK,EAAEM,UAAU,CAACH,KAAK,EAAE,CAAC;MACvC;MACAH,KAAK,CAACV,IAAI,CAACmB,KAAK,CAACT,KAAK,EAAEM,UAAU,CAAC;IACrC;IAEA,IAAIT,MAAM,CAACR,MAAM,EAAE;MACjB,MAAMqB,GAAG,GAAGb,MAAM,CAACM,KAAK,EAAE;MAC1B,IAAIC,WAAW,EAAE;QACfnB,UAAU,CAACe,KAAK,EAAEU,GAAG,CAAC;MACxB,CAAC,MAAM;QACLV,KAAK,CAACV,IAAI,CAACoB,GAAG,CAAC;MACjB;MACAT,gBAAgB,GAAG,IAAI;IACzB,CAAC,MAAM;MACLA,gBAAgB,GAAG,KAAK;IAC1B;EACF;EACA,OAAOD,KAAK;AACd"},"metadata":{},"sourceType":"script","externalDependencies":[]}