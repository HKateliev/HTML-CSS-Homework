{"ast":null,"code":"var _jsxFileName = \"/Users/hkateliev/Desktop/Individual Project/fpyaraintern_2023/src/Content/LoginPage/index.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./loginstyle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst Client = require(\"src/models/Client\");\nconst {\n  sequelize,\n  Sequelize\n} = require(\"sequelize\");\nsequelize = new Sequelize(\"postgres\", \"postgres\", \"hkateliev99\", {\n  host: \"localhost\",\n  dialect: \"postgres\",\n  port: 5434\n});\nconst app = express();\nconst port = 3000;\napp.use(bodyParser.json());\nsequelize.authenticate().then(() => {\n  console.log(\"Connection has been established successfully.\");\n}).catch(error => {\n  console.error(\"Unable to connect to the database: \", error);\n});\nconst LoginPage = () => {\n  _s();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!username || !password) {\n      alert(\"Username and password are required!\");\n      return;\n    }\n    try {\n      const response = await fetch(\"/api/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username,\n          email,\n          password\n        })\n      });\n      if (response.ok) {\n        // Successful login\n        // Redirect to home page\n        history.push(\"/\");\n      } else {\n        // Invalid credentials\n        // Display error message\n        const errorData = await response.json();\n        alert(errorData.message);\n      }\n    } catch (error) {\n      console.error(error);\n      alert(\"Something went wrong\");\n    }\n    // login user logic goes here\n    // check if a user exists already in DB-> WH else throw error\n    // redirect to home page on successful login\n    // history.push('/'); (use this if you are using react-router-dom)\n    // window.location.href = '/'; (use this to redirect manually)\n  };\n  // Start server\n  app.listen(port, () => {\n    console.log(`Server listening on port ${port}`);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Username:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: username,\n          onChange: event => setUsername(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Password:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: password,\n          onChange: event => setPassword(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Don't have an account? \", /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/register\",\n        children: \"Sign up here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 32\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginPage, \"Lrw7JeD9zj6OUWhT/IH4OIvPKEk=\");\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["useState","Link","jsxDEV","_jsxDEV","express","require","bodyParser","Client","sequelize","Sequelize","host","dialect","port","app","use","json","authenticate","then","console","log","catch","error","LoginPage","_s","username","setUsername","password","setPassword","handleSubmit","event","preventDefault","alert","response","fetch","method","headers","body","JSON","stringify","email","ok","history","push","errorData","message","listen","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","to","_c","$RefreshReg$"],"sources":["/Users/hkateliev/Desktop/Individual Project/fpyaraintern_2023/src/Content/LoginPage/index.js"],"sourcesContent":["import { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./loginstyle.css\";\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst Client = require(\"src/models/Client\");\nconst { sequelize, Sequelize } = require(\"sequelize\");\nsequelize = new Sequelize(\"postgres\", \"postgres\", \"hkateliev99\", {\n  host: \"localhost\",\n  dialect: \"postgres\",\n  port: 5434,\n});\n\nconst app = express();\nconst port = 3000;\napp.use(bodyParser.json());\n\nsequelize\n  .authenticate()\n  .then(() => {\n    console.log(\"Connection has been established successfully.\");\n  })\n  .catch((error) => {\n    console.error(\"Unable to connect to the database: \", error);\n  });\n\nconst LoginPage = () => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!username || !password) {\n      alert(\"Username and password are required!\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\"/api/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          username,\n          email,\n          password,\n        }),\n      });\n\n      if (response.ok) {\n        // Successful login\n        // Redirect to home page\n        history.push(\"/\");\n      } else {\n        // Invalid credentials\n        // Display error message\n        const errorData = await response.json();\n        alert(errorData.message);\n      }\n    } catch (error) {\n      console.error(error);\n      alert(\"Something went wrong\");\n    }\n    // login user logic goes here\n    // check if a user exists already in DB-> WH else throw error\n    // redirect to home page on successful login\n    // history.push('/'); (use this if you are using react-router-dom)\n    // window.location.href = '/'; (use this to redirect manually)\n  };\n  // Start server\n  app.listen(port, () => {\n    console.log(`Server listening on port ${port}`);\n  });\n  return (\n    <div>\n      <h1>Login</h1>\n      <form onSubmit={handleSubmit}>\n        <label>\n          Username:\n          <input\n            type=\"text\"\n            value={username}\n            onChange={(event) => setUsername(event.target.value)}\n          />\n        </label>\n        <br />\n        <label>\n          Password:\n          <input\n            type=\"password\"\n            value={password}\n            onChange={(event) => setPassword(event.target.value)}\n          />\n        </label>\n        <br />\n        <button type=\"submit\">Log In</button>\n      </form>\n      <p>\n        Don't have an account? <Link to=\"/register\">Sign up here</Link>.\n      </p>\n    </div>\n  );\n};\n\nexport default LoginPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}